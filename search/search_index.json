{"config":{"lang":["tr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0130\u00e7indekiler","text":""},{"location":"#bolum-01-golang-hakknda-genel-bilgiler","title":"B\u00f6l\u00fcm 01: Golang Hakk\u0131nda Genel Bilgiler","text":"<ol> <li>Tan\u0131t\u0131m, \u00d6ne \u00c7\u0131kan K\u0131s\u0131mlar\u0131</li> <li>Go Proverbs</li> <li>Kurulum</li> <li>VSCode Kurulumu</li> </ol>"},{"location":"#bolum-02-golang-uygulamasna-genel-baks","title":"B\u00f6l\u00fcm 02: Golang Uygulamas\u0131na Genel Bak\u0131\u015f","text":"<ol> <li>Paket Kavram\u0131 ve <code>main</code> Paketi</li> <li>Executable, Library ve Golang Uygulamas\u0131n\u0131 \u00c7al\u0131\u015ft\u0131rmak</li> </ol>"},{"location":"#bolum-03-dil-kurallar","title":"B\u00f6l\u00fcm 03: Dil Kurallar\u0131","text":"<ol> <li>Encoding Nedir?</li> <li>Unicode Deste\u011fi</li> <li>Anahtar Kelimeler</li> <li>Operat\u00f6rler ve \u0130\u015faret\u00e7iler</li> <li>Built-in (g\u00f6m\u00fcl\u00fc gelen) Veri Tipleri</li> <li>Kod Stili</li> <li>Sabitler</li> <li>De\u011fi\u015fkenler</li> </ol>"},{"location":"#bolum-04-veri-tipleri","title":"B\u00f6l\u00fcm 04: Veri Tipleri","text":"<ol> <li>Strings (metinseller)</li> <li>Booleans (mant\u0131ksallar)</li> <li>Numerics (say\u0131sallar)</li> <li>Arrays (diziler)</li> <li>Slices (dizi kesitleri)</li> <li>Structs (yap\u0131lar)</li> <li>Struct Annotations</li> <li>Pointer (i\u015faret\u00e7i) Kavram\u0131</li> <li>Struct Methods ve Receivers</li> <li>Maps</li> <li>Tip D\u00f6n\u00fc\u015ft\u00fcrmek</li> </ol>"},{"location":"#bolum-05-fonksiyonlar","title":"B\u00f6l\u00fcm 05: Fonksiyonlar","text":"<ol> <li>Function Signature (fonksiyon imzas\u0131)</li> <li>Arg\u00fcman / Parametre</li> <li>Return Values (fonksiyodan geriye d\u00f6nen de\u011ferler)</li> <li>Recursivity (\u00f6zyineleme)</li> <li>Closure / Anonim Fonksiyonlar ve Function Scope (kapsama alan\u0131)</li> <li>Deferring (erteleme)</li> </ol>"},{"location":"#bolum-06-durum-kontrolleri","title":"B\u00f6l\u00fcm 06: Durum Kontrolleri","text":"<ol> <li><code>if</code>, <code>else</code>, <code>else if</code></li> <li>Short <code>if</code> declaration (k\u0131sa if tan\u0131m\u0131)</li> <li><code>switch</code> ve <code>case</code> \u0130fadeleri</li> <li>Label, <code>break</code> ve <code>goto</code> \u0130\u015flemleri</li> </ol>"},{"location":"#bolum-07-donguler","title":"B\u00f6l\u00fcm 07: D\u00f6ng\u00fcler","text":"<ol> <li><code>C</code> stili d\u00f6ng\u00fc</li> <li><code>range</code></li> <li><code>break</code> ve <code>continue</code></li> <li><code>for</code> ve Ko\u015ful Kullan\u0131m\u0131</li> <li>Label Kullan\u0131m\u0131</li> </ol>"},{"location":"#bolum-08-interface","title":"B\u00f6l\u00fcm 08: Interface","text":"<ol> <li>Tan\u0131m\u0131</li> <li>Tip Olarak empty interface ya da <code>any</code></li> <li>Tip Kontrol Meknizmas\u0131</li> <li>Davran\u0131\u015f Olarak <code>interface</code></li> </ol>"},{"location":"#bolum-09-error","title":"B\u00f6l\u00fcm 09: Error","text":"<ol> <li><code>error</code> Nedir?</li> <li>Custom Error Types (\u00f6zelle\u015ftirilmi\u015f error tipi olu\u015fturmak)</li> <li>Wrapping (sarmalama)</li> <li>Unwrapping (sarmal\u0131 a\u00e7ma)</li> <li><code>error</code> Tip Kontrolleri: <code>errors.Is</code> ve <code>errors.As</code></li> <li><code>panic</code> ve <code>recover</code></li> <li>Yayg\u0131n Pratikler</li> </ol>"},{"location":"#bolum-10-nil","title":"B\u00f6l\u00fcm 10: <code>nil</code>","text":"<ol> <li><code>nil</code> Nedir?</li> <li>Nerelerde ve Ne \u0130\u00e7in Kullan\u0131n\u0131r?</li> </ol>"},{"location":"#bolum-11-generics","title":"B\u00f6l\u00fcm 11: Generics","text":"<ol> <li>Nedir? Ne Ama\u00e7la Kullan\u0131l\u0131r</li> <li>Fonksiyonlarda Genericler</li> <li>Custom Tiplerde Generic</li> <li>Generic Fonksiyon \u00c7a\u011fr\u0131lar\u0131</li> <li>Generic Tipi struct\u2019da Kullanmak</li> <li>Generic Tipi map\u2019lerde Kullanmak</li> <li>Generic Ger\u00e7ek Hayat \u00d6rne\u011fi</li> </ol>"},{"location":"#bolum-12-reflection","title":"B\u00f6l\u00fcm 12: Reflection","text":"<ol> <li>Ne \u0130\u015fe Yarar? Faydalar\u0131 ve Zararlar\u0131</li> </ol>"},{"location":"#bolum-13-json-ile-calsmak","title":"B\u00f6l\u00fcm 13: JSON \u0130le \u00c7al\u0131\u015fmak","text":"<ol> <li>Genel Bilgi</li> <li>Encoding (Marshal)</li> <li>Decoding (Unmarshal)</li> <li><code>json:\"TAG\"</code></li> <li>Custom Decoding</li> <li>Custom Encoding</li> <li>Generic Interface</li> <li>Streaming Encoders ve Decoders</li> </ol>"},{"location":"#bolum-14-test","title":"B\u00f6l\u00fcm 14: Test","text":"<ol> <li>Test Nedir? Neden Yaz\u0131l\u0131r?</li> <li>Test Nas\u0131l \u00c7al\u0131\u015ft\u0131r\u0131l\u0131r</li> <li>Examples ve <code>godoc</code> Nedir?</li> <li>Race Detection Nedir?</li> <li>Table Driven Test Nedir?</li> <li>Sub Tests</li> <li>SetUp ve TearDown Nedir?</li> <li>Testlerin Paralel \u00c7al\u0131\u015ft\u0131r\u0131lmas\u0131?</li> <li>Code Coverage Nedir?</li> <li>Benchmarking Nedir?</li> <li>Escape Analysis</li> <li>Memory ve CPU Profiling Temelleri</li> </ol>"},{"location":"#bolum-15-concurrency","title":"B\u00f6l\u00fcm 15: Concurrency","text":"<ol> <li>Nedir? Golang\u2019in Concurrency Stratejisi Nedir?</li> <li>Goroutine Nedir?</li> <li><code>go</code> Kelimesiyle Ba\u015flayan Anonim Fonksiyonlar</li> <li>WaitGroup Nedir?</li> <li>Channels</li> <li><code>done</code> Pattern</li> <li>Deadlock</li> <li>Range Over Channels</li> <li>Buffered Channels</li> <li>Semaphore Pattern</li> <li>Fan Out Pattern</li> <li><code>select</code></li> <li>Ticker</li> <li>Worker Pattern</li> <li>Mutex Nedir?</li> <li>Context</li> </ol>"},{"location":"#bolum-16-isimlendirme-kurallar","title":"B\u00f6l\u00fcm 16: \u0130simlendirme Kurallar\u0131","text":"<ol> <li>Naming Conventions</li> <li>De\u011fi\u015fken \u0130simlendirmesi</li> <li>Fonksiyon \u0130simlendirmesi</li> <li>Method\u2019lar\u0131n \u0130simlendirmesi</li> <li>Interface\u2019lerin \u0130simlendirmesi</li> <li>Paketlerin \u0130simlendirmesi</li> </ol>"},{"location":"#bolum-17-golang-paketi-gelistirmek","title":"B\u00f6l\u00fcm 17: Golang Paketi Geli\u015ftirmek","text":"<ol> <li><code>golangci-linter</code> Kurulumu ve Konfig\u00fcrasyonu</li> <li>Go Mod\u00fcl\u00fc Anatomisi</li> <li><code>stringutils</code> Paketi</li> <li>Paketi Da\u011f\u0131tmak / Payla\u015fmak</li> </ol>"},{"location":"#bolum-18-in-memory-key-value-store","title":"B\u00f6l\u00fcm 18: In-Memory Key-Value Store","text":"<ol> <li><code>http</code> Paketini Kullanarak Rest-API Tasarlamak</li> <li>Domain Driven Design prensibini Kullanmak</li> <li>Geli\u015ftirme</li> <li>http server\u2019\u0131n Unit Testleri</li> <li>Uygulaman\u0131n Docker Container\u2019\u0131ndan \u00c7al\u0131\u015ft\u0131r\u0131lmas\u0131</li> <li>GitHub Actions ile Linter/Checker Kullan\u0131m\u0131</li> <li>A\u00e7\u0131k Kaynak Haline Getirmek</li> </ol>"},{"location":"#bonus","title":"Bonus","text":"<ol> <li>Faydal\u0131 Linkler</li> <li>kvstore</li> </ol>"},{"location":"#quiz","title":"Quiz","text":"<ol> <li>Quiz 1</li> </ol>"},{"location":"01/01-tanitim/","title":"B\u00f6l\u00fcm 01/01: Tan\u0131t\u0131m","text":"<p>Go; statik tipler kullanan, derlenen y\u00fcksek seviyeli bir programlama dilidir. Google \u00e7al\u0131\u015fanlar\u0131ndan Robert Griesemer, Rob Pike, ve  Ken Thompson taraf\u0131ndan geli\u015ftirilmi\u015ftir.</p> <p>Bir rivayete g\u00f6re; google aramalar\u0131nda <code>go</code> \u00e7ok jenerik kald\u0131\u011f\u0131 i\u00e7in; <code>golang</code> olarak da isimlendirilmi\u015ftir. <code>Go</code> ya da <code>Golang</code> asl\u0131nda ayn\u0131 anlamda kullan\u0131lm\u0131\u015ft\u0131r.</p> <p>Yaz\u0131l\u0131m stili olarak (syntax) <code>C</code> diline benzese bile, g\u00fcvenli haf\u0131za y\u00f6netimi ve kullan\u0131m\u0131na, i\u015fi biten haf\u0131zan\u0131n geri b\u0131rak\u0131lmas\u0131na (garbage collection), yap\u0131sal tiplerine ve kendine \u00f6zg\u00fc CSP-style (concurrency) e\u015f-zamanl\u0131l\u0131k yap\u0131s\u0131na kadar \u00e7ok b\u00fcy\u00fck farklar ve avantajlar sa\u011flar.</p> <p>YouTube videosunda t\u00fcm go ekibini g\u00f6rebilirsiniz.</p> <p>2007 y\u0131l\u0131nda duyurulmu\u015f, 2009 y\u0131l\u0131nda da t\u00fcm d\u00fcnyaya a\u00e7\u0131lm\u0131\u015ft\u0131r. A\u00e7\u0131k Kaynak (open source) \u015feklinde geli\u015ftirilmeye devam ediyor.</p> <p>Dili geli\u015ftirenlerin \u015f\u00f6yle bir s\u00f6z\u00fc var;</p> <p>The language is designed to build software services.</p> <p>Yani dilin as\u0131l amac\u0131 yaz\u0131l\u0131m servisleri, hatta internet servisleri geli\u015ftirmek. Cloud Native tan\u0131m\u0131yla \u00f6rt\u00fc\u015f\u00fcyor, yani cloud\u2019\u0131n dili: Go!</p> <p>Ana presibleri;</p> <ul> <li>Basitlik</li> <li>A\u00e7\u0131k\u00e7a tan\u0131mlanm\u0131\u015f talimatlar dizisi</li> <li>Statik tipler (tan\u0131ml\u0131 tipler)</li> <li>\u00dczerinde derlendi\u011fi i\u015fletim sisteminin do\u011fal dili ne ise o dile derlenme,   Bu sayede Java ve benzeri dillerdeki sanal makine (virtual machine) ihtiyac\u0131 yok</li> <li>Nesne y\u00f6nelimli de\u011fil (oop) ama tipler birbir i\u00e7ine ge\u00e7ebiliyor, miras kavram\u0131 yok</li> <li>Interface mant\u0131\u011f\u0131</li> <li>Fonksiyonlar hem tip hem de arg\u00fcman olarak kullan\u0131labilir</li> <li>Orthogonality; yani bir fonksiyon ya da i\u015flem ba\u015fka bir \u015feyi bozmadan de\u011fi\u015febiliyor</li> <li>G\u00f6m\u00fcl\u00fc olarak gelen e\u015fzamanl\u0131l\u0131k ilkelleri: Goroutines ve Channels</li> <li>Dok\u00fcman ve test \u00f6ncelikli yakla\u015f\u0131m</li> </ul>"},{"location":"01/02-proverbs/","title":"B\u00f6l\u00fcm 01/02: Proverbs","text":"<p>Go ile uygulama geli\u015ftirirken hep akl\u0131n\u0131zda olmas\u0131 gereken atas\u00f6zleri;</p> <p>https://go-proverbs.github.io/</p> <ul> <li>Don\u2019t communicate by sharing memory, share memory by communicating. *</li> <li>Concurrency is not parallelism. *</li> <li>Channels orchestrate; mutexes serialize. *</li> <li>The bigger the interface, the weaker the abstraction. *</li> <li>Make the zero value useful. *</li> <li>interface{} says nothing. *</li> <li>Gofmt\u2019s style is no one\u2019s favorite, yet gofmt is everyone\u2019s favorite. *</li> <li>A little copying is better than a little dependency. *</li> <li>Syscall must always be guarded with build tags.</li> <li>Cgo must always be guarded with build tags.</li> <li>Cgo is not Go.</li> <li>With the unsafe package there are no guarantees. *</li> <li>Clear is better than clever. *</li> <li>Reflection is never clear. *</li> <li>Errors are values. *</li> <li>Don\u2019t just check errors, handle them gracefully. *</li> <li>Design the architecture, name the components, document the details. *</li> <li>Documentation is for users. *</li> <li>Don\u2019t panic. *</li> </ul>"},{"location":"01/03-kurulum/","title":"B\u00f6l\u00fcm 01/03: Kurulum","text":"<p>Dilin son s\u00fcr\u00fcm\u00fcn\u00fc sitesinden indirip kurabilirsiniz. Kulland\u0131\u011f\u0131n\u0131z i\u015fletim sisteminin paket y\u00f6neticileri de kolayca kurman\u0131za yard\u0131mc\u0131 olur.</p> <p>Kurulum yapmadan web \u00fczerinden denemeler yapmak isterseniz;</p> <p>https://go.dev/play/</p> <p><code>brew</code> paket y\u00f6neticisi kullan\u0131yorsan\u0131z;</p> <pre><code>$ brew install go\n$ go version\n$ go env\n$ cd \"$(go env GOROOT)/src\"    # source code\n</code></pre> <p>Linux i\u00e7in;</p> <p>https://go.dev/doc/install</p> <p>\u00d6nce kaynak kodu indirin, sonra;</p> <pre><code>$ rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.20.6.linux-amd64.tar.gz\n\n# $HOME/.profile\n$ export PATH=$PATH:/usr/local/go/bin\n$ go version\n$ go env\n</code></pre>"},{"location":"01/04-vscode-kurulumu/","title":"B\u00f6l\u00fcm 01/04: VSCode Kurulumu","text":"<p>Go i\u00e7in geli\u015ftirilmi\u015f bir\u00e7ok IDE (Integrated Development Environment) var. Bunlardan biri de Visual Studio Code. Kurulumu i\u00e7in;</p> <p>https://code.visualstudio.com/download adresinden i\u015fletim sisteminize uygun olan\u0131 indirmeniz gerekiyor.</p> <p>Debian ve Ubuntu i\u00e7in;</p> <pre><code>$ sudo apt install ./&lt;file&gt;.deb\n</code></pre> <p>Daha eski Linux da\u011f\u0131t\u0131mlar\u0131 i\u00e7in;</p> <pre><code>$ sudo dpkg -i &lt;file&gt;.deb\n$ sudo apt-get install -f # Install dependencies\n</code></pre> <p>Kurulum tamamland\u0131ktan sonra vscode go ekletisini kurman\u0131z gerekiyor. Go eklentisi kurulumu tamamland\u0131ktan sonra vscode\u2019da <code>go</code> ile gerekli ayarlar\u0131 yapmak i\u00e7in user <code>settings</code>\u2019de de\u011fi\u015fiklikler yapmam\u0131z gerekiyor. Bunun i\u00e7in;</p> <pre><code>View -&gt; Command Palette -&gt; Open User Settings\n</code></pre> <p>Settings sayfas\u0131nda a\u015fa\u011f\u0131daki ayarlar\u0131 yapman\u0131z gerekiyor.</p> <pre><code> \"[go]\": {\n\"editor.insertSpaces\": false,\n\"editor.formatOnSave\": true,\n\"editor.codeActionsOnSave\": {\n\"source.organizeImports\": true\n}\n}, \"go.lintOnSave\": \"workspace\",\n\"go.lintTool\": \"golangci-lint\",\n}\n</code></pre>"},{"location":"02/01-paket-kavrami/","title":"B\u00f6l\u00fcm 02/01: Golang Uygulamas\u0131na Genel Bak\u0131\u015f","text":""},{"location":"02/01-paket-kavrami/#paket-kavram","title":"Paket Kavram\u0131","text":"<p>Go paketleri, kodu gruplama birimleri ve projenizi d\u00fczenlemenize yard\u0131mc\u0131 olur. \u201cPaket\u201d olarak ad\u0131ndan da anla\u015f\u0131laca\u011f\u0131 gibi, tek bir birim olarak bir veya daha fazla kaynak kod dosyas\u0131n\u0131 \u201cpaket\u201d halinde paketlemenizi sa\u011flar. Go paketleri, kendi veya di\u011fer paketleri kodunuzda kullanman\u0131za izin vererek yeniden kullan\u0131labilirlik sa\u011flar.</p> <p>Go i\u00e7in \u00f6zel bir dosya ve paket ad\u0131 bulunur: <code>main.go</code> ve <code>package main</code>. E\u011fer bir go projesi alt\u0131nda <code>main.go</code> dosyas\u0131 var ise mutlaka o dosyan\u0131n paket ad\u0131 da <code>main</code> olur. Bu uygulamaya giri\u015f yeridir. E\u011fer orada bir go uygulamas\u0131 var ise o uygulaman\u0131n giri\u015f kap\u0131s\u0131 <code>main.go</code> olur.</p> <p>Dizin yap\u0131s\u0131na g\u00f6re bir projede birden fazla <code>main.go</code> olabilir. Dosyan\u0131n durdu\u011fu yere g\u00f6re, sadece bir tane main paketi olur!</p> <p>\u015eimdi klasik Hello World uygulamas\u0131 yapal\u0131m:</p> <pre><code>package main // paket deklerasyonu\n\nimport \"fmt\" // koda d\u0131\u015far\u0131dan dahil edilen ba\u015fka bir paket\n\n// kodun esas k\u0131s\u0131m, \u00e7al\u0131\u015fma ilk buradan ba\u015flayacak!\nfunc main() {\nfmt.Println(\"Hello World\")\n}\n</code></pre>"},{"location":"02/01-paket-kavrami/#main-paketi","title":"<code>main</code> Paketi","text":"<pre><code>package main\n\nfunc main(){\n}\n</code></pre> <p>Program\u0131n ba\u015flad\u0131\u011f\u0131 yeri ifade eder. Her zaman <code>main</code> fonksiyonundan ile ba\u015flar. Golang mod\u00fcler bir yap\u0131ya sahip oldu\u011fu i\u00e7in farkl\u0131 farkl\u0131 fonksiyonlar\u0131 farkl\u0131 dosyalara ya da paketlere koymak m\u00fcmk\u00fcnd\u00fcr. </p>"},{"location":"02/01-paket-kavrami/#init-fonksiyonu","title":"<code>init</code> Fonksiyonu","text":"<p>T\u00fcm kaynak kod (i\u00e7inde go kodu bulunan her dosya) dosyalar\u0131n\u0131n kendine ait bir <code>init</code> fonksiyonu olabilir. Derleme esnas\u0131nda go compiler, s\u0131ras\u0131yla;</p> <ol> <li>T\u00fcm de\u011fi\u015fken/sabit tan\u0131mlamalar\u0131n\u0131 derler</li> <li>Tan\u0131mlanan\u0131n de\u011fi\u015fkenlerin/sabitleri <code>initialize</code> eder</li> <li><code>import</code> edilen t\u00fcm paketlerin devreye al\u0131r ve gereken <code>initialize</code>    i\u015flerini yapar</li> <li><code>init</code> fonksiyonunu \u00e7a\u011f\u0131r\u0131r</li> <li><code>main</code> fonksiyonunu \u00e7a\u011f\u0131r\u0131r</li> </ol> <p>https://go.dev/play/p/i_JqpCRI4nh</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nfmt.Println(\"main fonksiyonundan merhaba!\")\n}\n\nfunc init(){\nfmt.Println(\"init fonksiyonu \u00e7a\u011f\u0131r\u0131ld\u0131\")\n}\n\n// init fonksiyonu \u00e7a\u011f\u0131r\u0131ld\u0131\n// main fonksiyonundan merhaba!\n</code></pre>"},{"location":"02/01-paket-kavrami/#paket-kapsam-package-scope","title":"Paket Kapsam\u0131 (package scope)","text":"<p>Go\u2019da hi\u00e7bir \u015fey global olarak tan\u0131mlanamaz, t\u00fcm de\u011fi\u015fkenler, sabitler, fonksiyonlar mutlaka paket kapsam\u0131 i\u00e7indedir. Yani yaz\u0131lan her \u015fey mutlaka bir pakete aittir. Kod paketler i\u00e7inde ya\u015far.</p> <pre><code>package main\n\nimport \"fmt\" // fmt paketi y\u00fcklendi\n\nfunc main() {\nfmt.Println(\"Merhaba\") // fmt paketinden Println fonksiyonu \u00e7a\u011f\u0131r\u0131ld\u0131\n}\n</code></pre> <p>Fonksiyonun ad\u0131 <code>Println</code> ve ilk harfi b\u00fcy\u00fck harf <code>P</code>. Bunun sebebi, <code>fmt</code> paketindeki <code>Println</code> fonksiyonu d\u0131\u015f d\u00fcnyaya a\u00e7\u0131k, yani ba\u015fka bir paketten <code>import</code> edilip kullan\u0131labilir (bu \u00f6rnekte ba\u015fka paket bizim main paketi). Bu duruma <code>Println</code> fonksiyonun Exportable oldu\u011funu g\u00f6sterir.</p> <p>E\u011fer bir fonksiyon, de\u011fi\u015fken, sabit ya da bir tip ad\u0131 b\u00fcy\u00fck harf ile ba\u015fl\u0131yorsa bu di\u011fer paketler taraf\u0131ndan kullan\u0131ld\u0131\u011f\u0131n\u0131n i\u015faretidir.</p> <p>\u00d6rne\u011fin \u015f\u00f6yle bir proje/dizin yap\u0131s\u0131 olsa:</p> <pre><code>.\n\u251c\u2500\u2500 codeutils\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 codeutils.go\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 main.go\n</code></pre> <p>ve <code>main.go</code>:</p> <pre><code>package main\n\nimport (\n\"demo/codeutils\"\n\"fmt\"\n)\n\nfunc main() {\nfmt.Println(\"Hello World\")\ncodeutils.PrintString(\"Hello World\")\n}\n</code></pre> <p><code>codeutils.go</code> de \u015f\u00f6yle olsa;</p> <pre><code>package codeutils\n\nimport \"fmt\"\n\n// PrintString prints given string.\nfunc PrintString(s string) {\nprintString(s)\n}\n\nfunc printString(s string) {\nfmt.Println(s)\n}\n</code></pre> <p><code>PrintString</code> fonksiyonu <code>codeutils</code> paketinde bulunan Exportable bir fonksiyon diyebiliriz. Dikkat ettiyseniz <code>printString</code> ise k\u00fc\u00e7\u00fck harfle ba\u015fl\u0131yor ve sadece <code>codeutils</code> paketi i\u00e7inde kullan\u0131labilen Unexportable ya da <code>private</code> bir fonksiyon olarak tan\u0131ml\u0131. Yani <code>main.go</code> i\u00e7inden <code>codeutils.printString</code> yapsan\u0131z kodu derleyemezsiniz, hata al\u0131rs\u0131n\u0131z.</p>"},{"location":"02/02-executable-lib-run/","title":"B\u00f6l\u00fcm 02/02: Golang Uygulamas\u0131na Genel Bak\u0131\u015f","text":""},{"location":"02/02-executable-lib-run/#executable-nedir","title":"Executable Nedir?","text":"<p>\u0130ngilizce execute edilebilen yani y\u00fcr\u00fct\u00fclebilen, \u00e7al\u0131\u015ft\u0131r\u0131labilen uygulamaya executable denir. G\u00fcndelik hayatta komut sat\u0131r\u0131ndan \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131z komutlar\u0131n b\u00fcy\u00fck \u00e7o\u011funlu\u011fu (\u00f6rne\u011fin <code>ls</code>, <code>cat</code> gibi...) bu kategoriden uygulamalard\u0131r.</p> <p>Go ile bu \u015fekide, \u00fczerinde ko\u015ftu\u011fu i\u015fletim sistemine g\u00f6re \u00e7al\u0131\u015fan uygulamalar geli\u015ftirebiliriz. Yazd\u0131\u011f\u0131m\u0131z go uygulamas\u0131n\u0131 i\u015fletim sisteminden ba\u011f\u0131ms\u0131z (Linux, macOS ya da Windows) derleyebilir ve \u00e7al\u0131\u015ft\u0131rabiliriz.</p> <p>Kodu \u00e7al\u0131\u015ft\u0131rmak i\u00e7in bir ka\u00e7 farkl\u0131 y\u00f6ntem var;</p>"},{"location":"02/02-executable-lib-run/#go-run-pathtomaingo","title":"<code>go run /path/to/main.go</code>","text":"<p>\u00d6nce dosyay\u0131 derler, \u00fcretti\u011fi (build etti\u011fi) binary dosyay\u0131 i\u015fletim sisteminde gizli bir yere atar, genelde <code>/tmp/</code> alt\u0131nda, sonra oradan binary\u2019i \u00e7a\u011f\u0131rarak \u00e7al\u0131\u015ft\u0131r\u0131r.</p>"},{"location":"02/02-executable-lib-run/#go-run","title":"<code>go run .</code>","text":"<p><code>.</code> shell ortam\u0131nda current working directory yani o an i\u00e7inde buludu\u011fumuz dizin anlam\u0131ndad\u0131r, bulundu\u011fumuz yerdeki mod\u00fcl yap\u0131s\u0131na g\u00f6re uygun <code>main.go</code> dosyas\u0131n\u0131 bulur ve \u00e7al\u0131\u015ft\u0131r\u0131r. Genelde i\u00e7inde <code>go.mod</code> olan bir proje dizininde olmam\u0131z gerekir aksi halde;</p> <pre><code>$ go run .\ngo: go.mod file not found in current directory or any parent directory; see 'go help modules'\n</code></pre> <p>hata al\u0131r\u0131z.</p>"},{"location":"02/02-executable-lib-run/#go-build","title":"<code>go build</code>","text":"<p>Bulundu\u011fumuz dizin i\u00e7indeki <code>go.mod</code> yap\u0131s\u0131na g\u00f6re ilgili <code>main.go</code> dosyas\u0131n\u0131 bulur ve derler. \u00dcretti\u011fi binary\u2019i yine <code>.</code> yani current working directory alt\u0131na atar; sonra elle biz \u00e7al\u0131\u015ft\u0131r\u0131r\u0131z:</p> <pre><code>$ cd /tmp/\n$ mkdir demo\n$ cd demo\n$ go mod init demo\n$ cat &lt;&lt; EOF &gt; main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"merhaba d\u00fcnya!\")\n}\nEOF\n\n$ go build\n$ ./demo\nmerhaba d\u00fcnya!\n</code></pre> <p>Ad\u0131 <code>demo</code> olan binary / executable dosya \u00fcretildi. Peki bu dosyan\u0131n ad\u0131 neden <code>demo</code> oldu? \u00c7\u00fcnk\u00fc mod\u00fcl\u00fcm\u00fcz\u00fcn ad\u0131 <code>demo</code>. Ba\u015fka bir isim vermek i\u00e7in;</p> <ul> <li>Ya mod\u00fcl\u00fcn ad\u0131n\u0131 de\u011fi\u015fece\u011fiz</li> <li>Ya da derlerken <code>-o NAME</code> ile <code>go build -o projem</code></li> </ul> <p>\u015feklinde de\u011fi\u015ftirebiliriz.</p>"},{"location":"02/02-executable-lib-run/#go-install","title":"<code>go install</code>","text":"<p>Bu komut sayesinde, verilen paketi uzaktan ya da yerelden \u00f6nce indirip, derleyip, go kurulumundaki \u00e7al\u0131\u015ft\u0131r\u0131labilir dosyalar\u0131n oldu\u011fu yere otomatik olarak at\u0131p, i\u015fletim sistemi seviyesinde (<code>$PATH</code>) \u00e7al\u0131\u015ft\u0131rabiliriz;</p> <pre><code>$ go env GOPATH\n/Users/vigo/.local/go\n\n$ ls -al \"$(go env GOPATH)/bin\"\n$ echo $PATH\n\n$ # go install PACKAGE@TAG\n$ go install github.com/vigo/statoo/v2@latest\n#            ^                         ^\n#            +--- paket ad\u0131            +--- hangi revizyon? en son tag\u2019i indir\n\n# t\u00fcm release\u2019ler: https://github.com/vigo/statoo/releases\n\n# eski versiyon i\u00e7in:\n$ go list -m -versions github.com/vigo/statoo@latest\ngithub.com/vigo/statoo v0.1.0 v0.1.1 v0.1.2 v0.1.3 v0.2.0 v0.2.1 v0.2.2 v0.2.3 v1.0.0 v1.0.1 v1.1.0 v1.1.1 v1.1.2 v1.1.3 v1.2.0 v1.2.1 v1.2.2 v1.2.3 v1.3.0 v1.3.1 v1.4.0\n\n$ go list -m -versions github.com/vigo/statoo/v2@latest\ngithub.com/vigo/statoo/v2 v2.0.3\n\n# go install github.com/vigo/statoo@latest  # v1 familyas\u0131ndaki son s\u00fcr\u00fcm\n# go install github.com/vigo/statoo@v1.0.0  # v1.0.0\n</code></pre>"},{"location":"02/02-executable-lib-run/#library-nedir","title":"Library Nedir?","text":"<p>\u0130\u00e7inde <code>main.go</code> olma zorunlu\u011fu bulunmayan, yard\u0131mc\u0131 fonksiyon koleksiyonlar\u0131n\u0131n bulundu\u011fu \u00fc\u00e7\u00fcnc\u00fc parti kodlar\u0131 tarif ederken kullan\u0131r\u0131z. \u00d6rne\u011fin, \"acaba bu servisin bir go-sdk\u2019i ya da client\u2019\u0131 var m\u0131?\" dedi\u011fimizde asl\u0131nda ilgili servisin api\u2019\u0131n\u0131 kullanmak i\u00e7in geli\u015ftirilmi\u015f bir paketin/k\u00fct\u00fcphanenin olup olmad\u0131\u011f\u0131n\u0131 sormu\u015f oluruz.</p> <p>https://github.com/vigo/stringutils-demo</p> <p>E\u011fer projemiz i\u00e7inde <code>stringutils-demo</code> paketini kullanmak istersek, ba\u011f\u0131ml\u0131l\u0131k olarak projemiz i\u00e7ine almak i\u00e7in; projemizin ana dizininde (yani <code>go.mod</code>) dosyas\u0131n\u0131n oldu\u011fu yerde;</p> <pre><code>$ go get github.com/vigo/stringutils-demo\n</code></pre> <p>ile eklememiz yeterlidir. Paket / k\u00fct\u00fcphane konular\u0131n\u0131 ve kullan\u0131mlar\u0131n\u0131 daha ileriki b\u00f6l\u00fcmlerde detayl\u0131 \u015fekilde inceleyece\u011fiz.</p>"},{"location":"03/01-dil-kurallari/","title":"B\u00f6l\u00fcm 03/01: Dil Kurallar\u0131","text":""},{"location":"03/01-dil-kurallari/#encoding-nedir","title":"Encoding Nedir?","text":"<p>Encoding, metin karakterlerini bilgisayarlar\u0131n anlayabilece\u011fi say\u0131sal de\u011ferlere \u00e7evirme i\u015flemidir. Bu say\u0131sal de\u011ferler, metinleri depolamak, iletmek ve i\u015flemek i\u00e7in kullan\u0131l\u0131r.</p> <p>UTF-8 (Unicode Transformation Format - 8bit), Unicode karakter setini temsil etmek i\u00e7in kullan\u0131lan bir metin kodlama standard\u0131d\u0131r. UTF-8, farkl\u0131 karakterleri de\u011fi\u015fen uzunluklarda bayt dizileri olarak temsil eder.</p> <p>Temel olarak, \u0130ngilizce harfleri ve sembolleri 1 byte\u2019la temsil ederken, di\u011fer dillerdeki karakterleri daha fazla byte\u2019la ifade eder. Bu \u00f6zelli\u011fi sayesinde hem \u0130ngilizce metinleri hem de farkl\u0131 dillerdeki karakterleri ayn\u0131 kodlama alt\u0131nda destekler. Bu nedenle, g\u00fcn\u00fcm\u00fczde genellikle tercih edilen bir metin kodlama standard\u0131d\u0131r.</p>"},{"location":"03/01-dil-kurallari/#unicode-destegi","title":"Unicode Deste\u011fi","text":"<p>Go\u2019nun varsay\u0131lan karakter kodlamas\u0131 (encoding) <code>UTF-8</code>. Bu ne anlama geliyor? Siz kod yazarken de\u011fi\u015fken/sabit ya da fonksiyon ad\u0131 olarak T\u00dcRK\u00c7E karakterler bile kullanabilirsiniz:</p> <p>https://go.dev/play/p/ulIuTtHW0tf</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nkullan\u0131c\u0131Ad\u0131 := \"vigo\"\nfmt.Println(kullan\u0131c\u0131Ad\u0131) // vigo\n}\n</code></pre> <p>Bu sadece proof-of-concept yani \"evet ger\u00e7ekten de \u00e7al\u0131\u015f\u0131yor\"u g\u00f6stermek i\u00e7in yaz\u0131lm\u0131\u015f bir kod. Anadiliniz ne olursa olsun genel yaz\u0131l\u0131m prensiplerini takip edip, genelin anlayabilece\u011fi t\u00fcrden deklarasyonlar yapman\u0131z\u0131 tavsiye ediyoruz.</p> <p>Unicode kapsam\u0131ndaki t\u00fcm karakterler ve <code>_</code> karakteri go i\u00e7in bir KARAKTER tan\u0131m\u0131. <code>0</code>\u2019dan <code>9</code>\u2019a kadar say\u0131lar, Octal yani 8\u2019lik say\u0131 sistemi i\u00e7in <code>0</code>\u2019dan <code>7</code>\u2019ye say\u0131lar, Hexadecimal yani 16\u2019l\u0131k say\u0131 sistemi i\u00e7in <code>0</code>\u2019dan <code>9</code>\u2019a kadar say\u0131lar ve <code>A</code>\u2019dan <code>F</code>\u2019e kadar harfler kullan\u0131l\u0131yor.</p>"},{"location":"03/01-dil-kurallari/#anahtar-kelimeler","title":"Anahtar Kelimeler","text":"<p>Toplamda 25 tane anahtar kelime bulunur:</p> <pre><code>break        default      func         interface    select\ncase         defer        go           map          struct\nchan         else         goto         package      switch\nconst        fallthrough  if           range        type\ncontinue     for          import       return       var\n</code></pre> <p>Bunlara ek olarak;</p> <p>\u00d6ntan\u0131ml\u0131 sabitler ailesi </p> <ul> <li><code>true</code></li> <li><code>false</code></li> <li><code>iota</code></li> <li><code>nil</code></li> </ul> <p>Say\u0131sal (numeric types) tipler ailesi </p> <ul> <li><code>uint8</code> : (0-255)</li> <li><code>uint16</code> : (0-65535)</li> <li><code>uint32</code> : 32-bit\u2019lik pozitif tamsay\u0131lar (0 ile 4294967295 aras\u0131)</li> <li><code>uint64</code> : 64-bit\u2019lik pozitif tamsay\u0131lar (0 ile 18446744073709551615 aras\u0131)</li> <li><code>int8</code> : 8-bit\u2019lik (signed) tamsay\u0131lar (-128 ile 127 aras\u0131)</li> <li><code>int16</code> : 16-bit\u2019lik (signed) tamsay\u0131lar (-32768 ile 32767 aras\u0131)</li> <li><code>int32</code> : 32-bit\u2019lik (signed) tamsay\u0131lar (-2147483648 ile 2147483647 aras\u0131)</li> <li><code>int64</code> : 64-bit\u2019lik (signed) tamsay\u0131lar (-9223372036854775808 ile 9223372036854775807 aras\u0131)</li> <li><code>float32</code> : IEEE-754 uyumlu 32-bit\u2019lik ondal\u0131k say\u0131lar</li> <li><code>float64</code> : IEEE-754 uyumlu 64-bit\u2019lik ondal\u0131k say\u0131lar</li> <li><code>complex64</code> : float32 ger\u00e7ek ve sanal k\u0131s\u0131mlara sahip t\u00fcm karma\u015f\u0131k say\u0131lar\u0131n k\u00fcmesi</li> <li><code>complex128</code> : float64 ger\u00e7ek ve sanal k\u0131s\u0131mlara sahip t\u00fcm karma\u015f\u0131k say\u0131lar\u0131n k\u00fcmesi</li> <li><code>byte</code> : <code>uint8</code> i\u00e7in takma isim (alias)</li> <li><code>rune</code> : <code>int32</code> i\u00e7in takma isim (alias)</li> <li><code>any</code> : <code>interface{}</code> (empty interface) i\u00e7in takma isim (alias)</li> <li><code>uint</code> : \u00fczerinde \u00e7al\u0131\u015ft\u0131\u011f\u0131 mimariye g\u00f6re 32 ya da 64bit\u2019lik pozitif tamsay\u0131lar</li> <li><code>int</code> : \u00fczerinde \u00e7al\u0131\u015ft\u0131\u011f\u0131 mimariye g\u00f6re 32 ya da 64bit\u2019lik (signed) tamsay\u0131lar</li> <li><code>uintptr</code> : i\u015faret\u00e7i (pointer) de\u011ferinin yorumlanmam\u0131\u015f bitlerini saklamak i\u00e7in yeterince b\u00fcy\u00fck pozitif tamsay\u0131lar</li> </ul> <p>G\u00f6m\u00fcl\u00fc gelen fonksiyonlar </p> <ul> <li><code>append</code></li> <li><code>cap</code></li> <li><code>close</code></li> <li><code>complex</code></li> <li><code>copy</code></li> <li><code>delete</code></li> <li><code>imag</code></li> <li><code>len</code></li> <li><code>make</code></li> <li><code>new</code></li> <li><code>panic</code></li> <li><code>print</code></li> <li><code>println</code></li> <li><code>real</code></li> <li><code>recover</code></li> </ul> <p>Di\u011fer </p> <ul> <li><code>string</code></li> <li><code>error</code></li> </ul>"},{"location":"03/01-dil-kurallari/#operatorler","title":"Operat\u00f6rler","text":"<pre><code>+    &amp;     +=    &amp;=     &amp;&amp;    ==    !=    (    )\n-    |     -=    |=     ||    &lt;     &lt;=    [    ]\n*    ^     *=    ^=     &lt;-    &gt;     &gt;=    {    }\n/    &lt;&lt;    /=    &lt;&lt;=    ++    =     :=    ,    ;\n%    &gt;&gt;    %=    &gt;&gt;=    --    !     ...   .    :\n&amp;^          &amp;^=          ~\n</code></pre> <p>Aritmetik i\u015flemler, mant\u0131k i\u015flemleri, b\u00fcy\u00fck/k\u00fc\u00e7\u00fck kontrolleri, tek sefer (unary) i\u015flemleri, bit kayd\u0131rma, k\u0131sa de\u011fi\u015fken tan\u0131mlama, diziler ve kesitler olmak \u00fczere bir k\u0131s\u0131m operat\u00f6r karakterleri bulunur.</p>"},{"location":"03/01-dil-kurallari/#isaretciler-identifiers","title":"\u0130\u015faret\u00e7iler (Identifiers)","text":"<p>De\u011fi\u015fken, sabit ya da tip tan\u0131mlamar\u0131 yapt\u0131\u011f\u0131m\u0131z \u015feylere identifier diyoruz. Yani <code>a := 5</code> dedi\u011fimizde <code>a</code> bir i\u015faret\u00e7i yani identifier oluyor. Go\u2019daki ge\u00e7erli (valid) i\u015faret\u00e7i tan\u0131mlamar\u0131na baz\u0131 \u00f6rnekler;</p> <pre><code>a _x1\nBuExportEdilebilir\nu\u011fur\n</code></pre> <p>Say\u0131sal tan\u0131mlamalarda da;</p> <pre><code>42        // 10\u2019luk say\u0131\n0600      // 8\u2019lik say\u0131\n0xFF      // 16\u2019l\u0131k say\u0131\n0.        // Kesirli ondal\u0131kl\u0131\n1.2       // Kesirli ondal\u0131kl\u0131\n072.40    // == 72.40\n1.e+0\n011i      // == 11i\n170141183460469231731687303715884105727 // \u00e7\u0131lg\u0131n\n</code></pre> <p>\u015feklinde kullan\u0131labiliyor. Unicode yani 32-bit\u2019lik karakterler i\u00e7in <code>rune</code> kullan\u0131yoruz, bu t\u00fcr ifade \u015fekline Rune Literal (rune kal\u0131b\u0131) deniyor:</p> <pre><code>'a'\n'\u00e4'\n'\u672c'\n'\\t'\n'\\000'\n'\\007'\n'\\377'\n'\\x07'\n'\\xff'\n'\\u12e4'\n'\\U00101234'\n</code></pre>"},{"location":"03/01-dil-kurallari/#built-in-veri-tipleri","title":"Built-in Veri Tipleri","text":"<p>Standart k\u00fct\u00fcphane bir k\u0131s\u0131m haz\u0131r veri tipi ile birlikte geliyor, kabaca;</p> <ul> <li>Strings : Metinsel tipler</li> <li>Booleans : <code>true</code> / <code>false</code> mant\u0131ksal veri tipleri</li> <li>Numerics : <code>int</code> / <code>float</code> ve <code>complex</code> familyas\u0131</li> <li>Composite (Unnamed) Types (Bile\u015fik \u0130simsiz Tipler) : Array, Slice, Struct, Map</li> </ul>"},{"location":"03/01-dil-kurallari/#kod-stili","title":"Kod Stili","text":"<p>2 t\u00fcr yorum (comment) yazma stili var;</p> <ol> <li>Line Comment : <code>// bu bir yorum sat\u0131r\u0131</code> \u015feklinde</li> <li>General Comment : <code>/* bu bir yorum sat\u0131r\u0131 */</code> \u015feklinde</li> </ol> <p>Line delimeter yani kod ifadesi sat\u0131rlar\u0131 (code statements) <code>C</code>, <code>JavaScript</code> ya da <code>PHP</code> dilindeki gibi <code>;</code> ile bitmiyor, go bunu compile time (derleme an\u0131nda) kendisi ekliyor. <code>;</code> sadece inner-scope yani sadece i\u00e7 kapsam durumlar\u0131nda kullan\u0131l\u0131yor;</p> <pre><code>// short-if declaration - k\u0131sa if bildirimi - inner-scope\n// v de\u011fi\u015fkeni sadece {} i\u00e7inde ya\u015far\nif v := math.Pow(x, n); v &lt; lim {\nreturn v\n}\nprint(v) // error\n\n// i sadece {} i\u00e7inde ya\u015far\nfor i := 5; i&lt; 9; i++  {\nfmt.Println(i)\n}\nprint(i) // error\n</code></pre>"},{"location":"03/02-sabitler/","title":"B\u00f6l\u00fcm 03/02: Dil Kurallar\u0131","text":""},{"location":"03/02-sabitler/#sabitler","title":"Sabitler","text":"<p>Sabit, ad\u0131ndan da anla\u015f\u0131laca\u011f\u0131 gibi de\u011feri bir kez atanan ve de\u011fi\u015fmeyen / de\u011fi\u015femeyen demektir.</p> <p>Sabit olarak tan\u0131mlanabilir tipler;</p> <ul> <li><code>bool</code></li> <li><code>rune</code> (asl\u0131nda <code>int32</code> i\u00e7in takma ad)</li> <li><code>int</code> familyas\u0131</li> <li><code>float</code> familyas\u0131</li> <li><code>complex</code> familyas\u0131</li> <li><code>string</code></li> </ul> <p>Say\u0131sal familyadan tan\u0131mlanan sabitler Numeric Constants (Say\u0131sal Sabitler) denir. Sabiti tan\u0131mlarken <code>const</code> anahtar kelimesi kullan\u0131l\u0131r, takiben i\u015faret\u00e7isi yani identifier\u2019\u0131, tipi ve son olarak de\u011feri atan\u0131r ve bu t\u00fcr tan\u0131ma Typed Constant denir;</p> <pre><code>// const &lt;IDENTIFIER_NAME&gt; = &lt;VALUE&gt;         // Untyped Constant\n// const &lt;IDENTIFIER_NAME&gt; &lt;TYPE&gt; = &lt;VALUE&gt;  // Typed constant\n\n\nconst domain string = \"example.com\"  // \"domain\" identifier, \"string\" tipi\nconst pi float32 = 3.14\n</code></pre> <p>Tan\u0131m esnas\u0131nda tipi belirtilmeyen sabitlere Untyped Constant denir. Bu t\u00fcr durumlarda go Type Inference yani tipi/t\u00fcr\u00fc tahmin etme, tip \u00e7\u0131kar\u0131m\u0131 i\u015flemi yaparak bunu anlar;</p> <pre><code>const a = 5          // untyped integer constant\nconst b = \"vigo\"     // untyped string constant\nconst pi = 3.14      // untyped floating-point constant\nconst foo = '1'      // 49  - untyped rune constant\nconst world = \"\u4e16\u754c\"  // untyped unicode string constant\n</code></pre> <p><code>len</code> ile Iterable yani i\u00e7inde gezilebilen, yinelenebilir tiplerin boyunu (length) al\u0131r\u0131z. <code>len(\"hello\")</code> dedi\u011fimizde <code>\"hello\"</code> asl\u0131nda go i\u00e7in: Untyped String Constant olarak i\u015flenir. <code>print(1 &gt; 2)</code> ifadesinde <code>1</code> ve <code>2</code> go i\u00e7in Untyped Integer Constant durumundad\u0131r.</p>"},{"location":"03/02-sabitler/#iota","title":"<code>iota</code>","text":"<p>Sadece sabitler i\u00e7in ge\u00e7erli olup, \u201ck\u00fc\u00e7\u00fck par\u00e7a\u201d anlam\u0131ndad\u0131r. Orijini Yunan alfabesindeki 9. karakterin ad\u0131ndan gelir. As\u0131l amac\u0131 belli bir mat\u0131kta artan/azalan/de\u011fi\u015fen sabit de\u011ferler \u00fcretmektir ve ba\u015flang\u0131\u00e7 de\u011feri <code>0</code>\u2019d\u0131r:</p> <p>https://go.dev/play/p/0qOhdiyAr6V</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype Num int\n\nconst (\nS\u0131f\u0131r Num = iota * 2 // 0\u2019la ba\u015fla 2\u2019\u015fer artt\u0131r\n\u0130ki\nD\u00f6rt\nAlt\u0131\nSekiz\n)\n\nfunc main() {\nfmt.Println(\"S\u0131f\u0131r\", S\u0131f\u0131r)\nfmt.Println(\"\u0130ki\", \u0130ki)\nfmt.Println(\"D\u00f6rt\", D\u00f6rt)\nfmt.Println(\"Alt\u0131\", Alt\u0131)\nfmt.Println(\"Sekiz\", Sekiz)\n}\n// S\u0131f\u0131r 0\n// \u0130ki 2\n// D\u00f6rt 4\n// Alt\u0131 6\n// Sekiz 8\n</code></pre>"},{"location":"03/03-degiskenler/","title":"B\u00f6l\u00fcm 03/03: Dil Kurallar\u0131","text":""},{"location":"03/03-degiskenler/#degiskenler","title":"De\u011fi\u015fkenler","text":"<p>\u0130\u00e7inde de\u011fer saklayan, depolayan ve de\u011fi\u015ftirilebilir olan \u015feylerdir. Veriye ula\u015fmak i\u00e7in kullan\u0131lan referanst\u0131r. Go, de\u011fi\u015fkenin tipine g\u00f6re i\u00e7inde yazan de\u011feri alg\u0131lar. 2 t\u00fcr tan\u0131mla \u015fekli vard\u0131r;</p> <ol> <li>Long Variable Declaration : Uzun de\u011fi\u015fken tan\u0131mlama. <code>var</code> anahtar kelimesi ile kullan\u0131l\u0131r.</li> <li>Short Variable Declaration : K\u0131sa de\u011fi\u015fken tan\u0131mlama. <code>:=</code> ile kullan\u0131l\u0131r.</li> </ol> <pre><code>var x = 5       // x\u2019in de\u011feri 5 ve tipi: dynamic type int\nvar y int = 5   // y\u2019nin de\u011feri 5 ve tipi: static type int\nvar z int       // z\u2019nin de\u011feri 0 ve tipi: static type int\n\nvar i, j int = 1, 2 // i ve j\u2019nin de\u011ferleri 1 ve 2, tipi static type int\n</code></pre> <p>Ayn\u0131 sabitlerde oldu\u011fu gibi, e\u011fer tip tan\u0131m\u0131 yapmazsak go bunu kendi \u00e7\u00f6zmeye \u00e7al\u0131\u015f\u0131r. <code>var z int</code> durumunda <code>z</code>\u2019nin tipini (mimariye g\u00f6re 32bit ya da 64bit) integer olarak \u00e7\u00f6zer ve de\u011fi\u015fkeni initialize ederken hemen zero-value\u2019sunu (her tipin bir s\u0131f\u0131r de\u011feri bulunur) atar. \u00d6rnekteki durumda <code>z</code>\u2019nin zero-value\u2019su <code>0</code> olur.</p> <p>Peki <code>var s string</code> olsa <code>s</code>\u2019in de\u011feri ne olurdu? Bo\u015f string yani <code>\"\"</code>. \u00c7\u00fcnki string\u2019lerin zero-value\u2019su bo\u015f string olur. \u00d6zellikle zero-value kelimesini vurguluyoruz \u00e7\u00fcnk\u00fc ileriki konularda <code>reflection</code>\u2019a girdi\u011fimizde <code>IsZero</code> g\u00f6rece\u011fiz ve ne oldu\u011funu daha da iyi anlayaca\u011f\u0131z.</p> <p>Baz tiplerin zero-value de\u011ferleri;</p> <pre><code>var a int                // 0\nvar b float32            // 0\nvar c complex64          // (0+0i)\nvar d string             // \"\"\nvar e bool               // false\nvar f byte               // 0\nvar g []int              // [] bu i\u00e7inde integerlar\u0131n olabilece\u011fi bir array\nvar h struct{}           // {}\nvar i map[string]string  // map[]\nvar j func()             // nil\n</code></pre>"},{"location":"03/03-degiskenler/#fmt","title":"<code>fmt</code>","text":"<p>\u00d6rnekten \u00f6nce h\u0131zl\u0131ca <code>fmt</code> paketinden gelen <code>Print</code> familyas\u0131na bakal\u0131m. \u00d6rneklerde s\u0131k\u00e7a <code>fmt.Print</code>, <code>fmt.Println</code>, <code>fmt.Printf</code> g\u00f6rece\u011fiz. Ad\u0131ndan da anla\u015f\u0131ld\u0131\u011f\u0131 gibi bu fonksiyonlar, standart \u00e7\u0131kt\u0131ya (stdout) bilgi g\u00f6ndermek i\u00e7in, daha da basit bir tan\u0131mla ekrana yaz\u0131 yazd\u0131rmak i\u00e7in kulland\u0131\u011f\u0131m\u0131z fonksiyonlard\u0131r.</p>"},{"location":"03/03-degiskenler/#fmtprint","title":"<code>fmt.Print</code>","text":"<pre><code>func Print(a ...any) (n int, err error)\n</code></pre> <p>Array ve Slice konusunda variadics kavram\u0131n\u0131 i\u015flerken bu <code>...</code>\u2019y\u0131 detayl\u0131 g\u00f6rece\u011fiz ama k\u0131saca <code>Print</code> fonksiyonu <code>any</code> tipinde <code>n</code> tane parametre alabilir;</p> <pre><code>fmt.Print(\"hello\", \"world\", 1, 2, []string{\"foo\"})\n// helloworld1 2 [foo]\n</code></pre> <p><code>string</code> d\u0131\u015f\u0131ndakilerin aras\u0131na bir bo\u015fluk karakteri (space) ekler \u00e7\u0131kt\u0131ya. Sat\u0131r sonuna otomatik olarak yeni sat\u0131r <code>\\n</code> (new line) karakteri eklemez.</p> <p>Tip g\u00fcvenli\u011fi (type safety) ve tip tan\u0131mlaman\u0131n bu kadar kat\u0131 oldu\u011fu bir dilde dikkat ettiyseniz farkl\u0131 farkl\u0131 tipleri bu fonksiyona g\u00f6nderebildik.</p>"},{"location":"03/03-degiskenler/#fmtprintln","title":"<code>fmt.Println</code>","text":"<p>Neredeyse <code>Print</code> ile ayn\u0131 fakat bu kez parametreler aras\u0131na otomatik bo\u015fluk koyar ve sat\u0131r sonuna otomatik <code>\\n</code> ekler:</p> <pre><code>fmt.Println(\"hello\", \"world\", 1, 2, []string{\"foo\"})\n// hello world 1 2 [foo]\n</code></pre>"},{"location":"03/03-degiskenler/#fmtprintf","title":"<code>fmt.Printf</code>","text":"<p>\u00c7ok s\u0131k kullanaca\u011f\u0131m\u0131z, metin formatlama, yer d\u00fczenleme (string interpolation) gibi i\u015flerde bize kolayl\u0131klar sa\u011flar. <code>%&lt;VERB&gt;</code> yani <code>%</code> i\u015fareti ve fiil al\u0131r, sat\u0131r sonuna otomatik olarak yeni sat\u0131r <code>\\n</code> (new line) karakteri eklemez;</p> <pre><code>fmt.Printf(\"merhaba %s\\n\", \"d\u00fcnya\")\n// merhaba d\u00fcnya\n</code></pre> <p><code>%s</code> bir fiil\u2019dir ve the uninterpreted bytes of the string or slice yani yorumlanmam\u0131\u015f string ya da slice (liste kesiti) byte\u2019lar\u0131n\u0131 temsil eder.</p> <p>Biz \u00f6rneklerde genelde;</p> <ul> <li><code>%v</code> : de\u011feri (value)</li> <li><code>%+v</code> : struct de\u011ferlerinde alan adlar\u0131yla g\u00f6rme</li> <li><code>%#v</code> : Go-syntax representation of the value yani de\u011ferin go   taraf\u0131ndaki kod g\u00f6r\u00fcnt\u00fcs\u00fc</li> <li><code>%T</code> : Go-syntax representation of the type of the value yani de\u011ferin go   taraf\u0131ndaki tip g\u00f6r\u00fcnt\u00fcs\u00fc</li> <li><code>%d</code> : 10\u2019luk say\u0131 sistemindeki (decimal) say\u0131lar</li> </ul> <p>Varsay\u0131lan format her zaman <code>%v</code>. Daha fazla detay i\u00e7in t\u0131klay\u0131n.</p> <p>\u015eimdi bir de\u011fi\u015fken tan\u0131mlay\u0131p de\u011ferini de\u011fi\u015ftirelim;</p> <p>https://go.dev/play/p/-HD4UqpJ-8E</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar a int\nfmt.Printf(\"%d\\n\", a) // 0\n\na = 5\nfmt.Printf(\"%d\\n\", a) // 5\n\na = 100\nfmt.Printf(\"%d\\n\", a) // 100\n}\n</code></pre> <p>Dikkat ettiyseniz \u00f6nce <code>var</code> ile de\u011fi\u015fkeni tan\u0131mlad\u0131k. Bu esnada go haf\u0131zada bu de\u011fi\u015fken i\u00e7in bir alan rezerve etti. Ne kadarl\u0131k bir alan? <code>int</code>\u2019in ihtiyac\u0131 oldu\u011fu kadar:</p> <p>https://go.dev/play/p/wDuT-QE31Vv</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"unsafe\"  // bu k\u00fct\u00fcphane sayesinde `Sizeof` kullan\u0131yoruz, sonu\u00e7 byte cinsinden\n)\n\nfunc main() {\nvar a int       // a\u2019y\u0131 tan\u0131mlad\u0131k\nvar b float32\nvar c string\n\nfmt.Printf(\"%v bytes\\n\", unsafe.Sizeof(a)) // 8 bytes\nfmt.Printf(\"%v bytes\\n\", unsafe.Sizeof(b)) // 4 bytes\nfmt.Printf(\"%v bytes\\n\", unsafe.Sizeof(c)) // 16 bytes\n\na = 1000000000000000000 // tan\u0131mlad\u0131\u011f\u0131m\u0131z a\u2019y\u0131 kulland\u0131k, de\u011ferini de\u011fi\u015ftirdik.\nfmt.Printf(\"%v bytes\\n\", unsafe.Sizeof(a)) // 8 bytes\n}\n</code></pre> <p>K\u0131sa de\u011fi\u015fken tan\u0131mlaman\u0131n <code>:=</code> oldu\u011funu s\u00f6ylemi\u015ftik;</p> <p>https://go.dev/play/p/eBGbxe1ZYNl</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\na := 5\n\nfmt.Printf(\"%T\\n\", a)  // int\nfmt.Printf(\"%v\\n\", a)   // 5\n}\n</code></pre> <p>Go bizim yerimize <code>a</code>\u2019n\u0131n <code>int</code> olaca\u011f\u0131n\u0131 anlad\u0131 (type inference) ve gerekli i\u015flemi yapt\u0131. Peki <code>a</code>\u2019n\u0131n de\u011ferini de\u011fi\u015ftirmek istiyoruz;</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\na := 5\n\nfmt.Printf(\"%T\\n\", a)\nfmt.Printf(\"%v\\n\", a)\n\na := 8 // hata!! no new variables on left side of :=\n// Tekli atamalarda 2 kere tekrar edilemiyor\n\nfmt.Printf(\"%v\\n\", a)\n}\n</code></pre> <p>E\u011fer k\u0131sa \u015fekilde de\u011fi\u015fkeni tan\u0131mlam\u0131\u015fsak art\u0131k de\u011feri de\u011fi\u015ftirmek istedi\u011fimizde <code>:=</code> yerine <code>=</code> kullanmam\u0131z gerekiyor. \u00c7\u00fcnk\u00fc art\u0131k <code>a</code> tipi belli olan bir de\u011fi\u015fken:</p> <p>https://go.dev/play/p/e5iRQdQTDCC</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\na := 5\n\nfmt.Printf(\"%T\\n\", a) // \nfmt.Printf(\"%v\\n\", a) // \n\na = 8\nfmt.Printf(\"%v\\n\", a)\n}\n</code></pre> <p>K\u0131sa de\u011fi\u015fken tan\u0131mlaman\u0131n baz\u0131 k\u0131s\u0131tlar\u0131 var;</p> <ul> <li>Sadece fonksiyon i\u00e7inde \u00e7al\u0131\u015f\u0131yor</li> <li>Tekli atamalarda 2 kere tekrar edilemiyor</li> <li>\u00c7oklu atamalarda tekrar oluyor ama her seferinde de\u011feri de\u011fi\u015fiyor</li> <li>Kapsama g\u00f6re tekrar olabiliyor</li> </ul> <pre><code>package main\n\nimport \"fmt\"\n\na := 5 // error\n// non-declaration statement outside function body\n\nfunc main() {\nfmt.Printf(\"a: %v\\n\", a)\n}\n</code></pre> <p>\u00c7oklu atamalarda tekrar oluyor ama her seferinde de\u011feri de\u011fi\u015fiyor:</p> <p>https://go.dev/play/p/gjnj3Dp-UcI</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nnumber1, number2 := example1()\nfmt.Printf(\"number1: %d , number2: %d\\n\", number1, number2) // number1: 1 , number2: 2\n\nnumber1, number3 := example2()\nfmt.Printf(\"number1: %d , number3: %d\\n\", number1, number3) // number1: 100 , number3: 200\n\nnumber4, number1 := example1()\nfmt.Printf(\"number4: %d , number1: %d\\n\", number4, number1) // number4: 1 , number1: 2\n}\n\nfunc example1() (int, int) {\nreturn 1, 2\n}\n\nfunc example2() (int, int) {\nreturn 100, 200\n}\n</code></pre> <p>Kapsama g\u00f6re k\u0131s\u0131tlar (scope):</p> <p>https://go.dev/play/p/cLGZlfoSyqU</p> <pre><code>package main\n\nimport \"fmt\"\n\nvar number int = 999\n\nfunc main() {\nfmt.Printf(\"main - number: %d\\n\", number) // main - number: 999\nexample1()\n\nfmt.Printf(\"main - example1 sonras\u0131: %d\\n\", number) // main - example1 sonras\u0131: 999\n}\n\nfunc example1() {\nnumber := 1                                   // inner-scope\nfmt.Printf(\"example1 - number: %d\\n\", number) // example1 - number: 1\n\nnumber = 666                                  // inner-scope\nfmt.Printf(\"example1 - number: %d\\n\", number) // example1 - number: 666\n}\n</code></pre> <p>\u0130leriki konularda <code>if</code>, <code>for</code>, <code>switch</code> ifadelerinde bu k\u0131sa tan\u0131mlaman\u0131n \u00f6zel kullan\u0131mlar\u0131n\u0131 da g\u00f6rece\u011fiz ama h\u0131zl\u0131 bir \u00f6rnek;</p> <p>https://go.dev/play/p/1aw4ofBRm5d</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nnumber := 100\nfmt.Printf(\"number: %d\\n\", number)     // number: 100\nif number := example1(); number == 1 { // i\u00e7 kapsamda number'\u0131 1 yapt\u0131k\n// inner-scope\nfmt.Printf(\"(if) number: %d\\n\", number) // (if) number: 1\n}\nfmt.Printf(\"number halen: %d\\n\", number) // d\u0131\u015f kapsamda: number halen: 100\n}\n\nfunc example1() int {\nreturn 1\n}\n</code></pre> <p>Di\u011fer \u00e7oklu tan\u0131mlama/atama \u015fekilleri de yapmak m\u00fcmk\u00fcn;</p> <p>https://go.dev/play/p/2wHBRk4RbZr</p> <pre><code>package main\n\nimport \"fmt\"\n\nvar a, b int // a ve b int tipinde\nvar (\nx       = 1  // x dinamik tip 1\ny       = 2  // y dinamik tip 2\nabc int = 99 // abc statik tip, int 99\n)\n\nfunc main() {\na = 5\nb = 10\n\nfmt.Printf(\"a: %v\\n\", a) // a: 5\nfmt.Printf(\"b: %v\\n\", b) // b: 10\n\nfmt.Printf(\"x: %v\\n\", x) // x: 1\nfmt.Printf(\"y: %v\\n\", y) // y: 2\n\nfmt.Printf(\"abc: %v\\n\", abc) // abc: 99\n\nnum1, num2 := 101, 201         // num1\u2019e 101, num2\u2019ye 201\nfmt.Printf(\"num1: %v\\n\", num1) // num1: 101\nfmt.Printf(\"num2: %v\\n\", num2) // num2: 201\n}\n</code></pre> <p>De\u011fi\u015fken isimlendirmesinde dikkat edece\u011fimiz kurallar;</p> <ol> <li>Mutlaka harf ile ba\u015flamal\u0131</li> <li>\u0130\u00e7inde harf, say\u0131 ve <code>_</code> (underscore) olabilir ama olmasa iyi olur</li> <li><code>camelCase</code>, <code>BumpyCaps</code>, <code>mixedCase</code> \u015feklinde tan\u0131mlama yap\u0131labilir</li> <li>Anla\u015f\u0131l\u0131r olmal\u0131d\u0131r</li> </ol> <p>\u00d6rne\u011fin veritaban\u0131ndan gelen kay\u0131tlar\u0131n say\u0131s\u0131 i\u00e7in bir de\u011fi\u015fken tan\u0131mlamak gerekese; \"NUMBER OF RECORDS\" ya da \"LENGTH OF RECORDS\" ya da \"RECORDS LENGTH\" kafam\u0131zda olsa;</p> <pre><code>var lengthOfRecords int // ya da\nvar recordsLength       // ya da\nvar numRecs             // \u00e7ok tercih edilmememli\nvar recordsAmount       //\n</code></pre> <p>gibi varyasyonlar olabilir. E\u011fer imkan varsa tek bir kelime ile ifade etmek en iyi y\u00f6ntemdir. T\u00fcm bu kurallar t\u00fcm identifier\u2019lar i\u00e7in ge\u00e7erlidir. </p> <p>Nerede bir de\u011fi\u015fken kullan\u0131m\u0131 g\u00f6r\u00fcrseniz mutlaka o de\u011fi\u015fkenin de\u011ferini yani Value of\u2019unu kulland\u0131\u011f\u0131n\u0131z\u0131 unutmay\u0131n!</p>"},{"location":"03/03-degiskenler/#kapsama-durumu","title":"Kapsama Durumu","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nn, err := fmt.Println(\"merhaba\") // err deklara edildi ama kullan\u0131lmad\u0131!\nif _, err := fmt.Println(n); err != nil { // bu err ile yukar\u0131da farkl\u0131, burada inner-scope durumu var\nfmt.Println(err)\n}\n}\n</code></pre> <p><code>if</code> blo\u011fu i\u00e7indeki <code>err</code> kapsam (scope) olarak i\u015flendi bitti. Ba\u015ftaki <code>err</code> ise deklare edildi ama kullan\u0131lmad\u0131... Ancak a\u015fa\u011f\u0131daki gibi olsa derlenebilirdi:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nn, err := fmt.Println(\"merhaba\") // merhaba\nif _, err := fmt.Println(n); err != nil { // 8 - inner-scope\nfmt.Println(err)\n} // '_, err' err art\u0131k t\u00fckendi bitti\n\nfmt.Println(err) // &lt;nil&gt; bu ise ilk sat\u0131rdaki 'err'\n}\n</code></pre>"},{"location":"03/03-degiskenler/#degiskenleri-golgeleme","title":"De\u011fi\u015fkenleri G\u00f6lgeleme","text":"<p>Variable Shadowing yani bir de\u011fi\u015fkenin ba\u015fka bir de\u011fi\u015fkeni g\u00f6lgelemesidir:</p> <p>https://go.dev/play/p/typjDuCQPN8</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"os\"\n)\n\nfunc otherFunc(n int, buf []byte) {\nfmt.Println(n, buf)\n}\n\n// BadRead variable-shadowing \u00f6rne\u011fi i\u00e7in bir fonksiyon.\nfunc BadRead(f *os.File, buf []byte) error {\nvar err error // zero-value nil\n\nfor {\nn, err := f.Read(buf) // bu 'err' yukar\u0131daki 'err' de\u011fi\u015fkenini g\u00f6lgeledi\nif err != nil {\nbreak\n// f asl\u0131nda hatal\u0131 oldu\u011fu i\u00e7in 'err' nil olmayacak ve buraya girecek\n// for'dan \u00e7\u0131kacak, otherFunc \u00e7a\u011f\u0131r\u0131lmadan loop'dan \u00e7\u0131k\u0131lacak\n// bu 'err' -&gt; 'var err error' k\u0131sm\u0131n\u0131 g\u00f6lgeleyecek\n}\notherFunc(n, buf)\n}\nreturn err // her zaman nil d\u00f6necek \u00e7\u00fcnk\u00fc ilk tan\u0131mland\u0131\u011f\u0131 gibi zero-value durumunda kald\u0131\n}\n\nfunc main() {\nf, _ := os.Open(\"/tmp/fake\") // error'\u00fc yutuyoruz\nvar b []byte                 // BadRead i\u00e7in buffer\n\nif err := BadRead(f, b); err != nil { // bu k\u0131s\u0131m hata d\u00f6nmeli \u00e7\u00fcnk\u00fc /tmp/fake dosyas\u0131 yok!\npanic(err)\n}\n\nfmt.Println(\"merhaba\") // merhaba\n}\n</code></pre>"},{"location":"04/01-string/","title":"B\u00f6l\u00fcm 04/01: Veri Tipleri","text":""},{"location":"04/01-string/#strings","title":"Strings","text":"<p>\u0130\u00e7inde Unicode karakterler bulunan karakterler dizisidir. Tip tan\u0131mlamas\u0131 yaparken <code>string</code> anahtar kelimesi ile ifade edilir. 2 \u015fekilde tan\u0131mlanabilir;</p> <ol> <li>\u00c7ift T\u0131rnak i\u00e7inde: <code>\"merhaba\"</code></li> <li>Back-tick <code>`</code> i\u00e7inde: <code>`merhaba`</code> (Raw String)</li> </ol> <p>https://go.dev/play/p/CqjxRuGy1ki</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar username string = \"vigo\"\nemail := \"foo@bar.com\"\nvar password string\n\nfmt.Println(\"username\", username) // username vigo\nfmt.Println(\"email\", email)       // email foo@bar.com\nfmt.Println(\"password\", password) // password\n}\n</code></pre> <p>Keza;</p> <p>https://go.dev/play/p/5LIGjBHkVD9</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\njsonRaw := `{\"success\": true}`\n\nfmt.Println(\"jsonRaw\", jsonRaw) // jsonRaw {\"success\": true}\nfmt.Printf(\"%T\\n\", jsonRaw)     // string\n}\n</code></pre> <p>Raw String\u2019lerde back-slash yani <code>\\</code> i\u015flenmez. String\u2019in saf halini ta\u015f\u0131r. \u00c7ift t\u0131rnak i\u00e7inde yazd\u0131klar\u0131m\u0131za da Interpreted String denir ve bu durumda back-slash ve di\u011fer g\u00f6r\u00fcnmeyen karakterler <code>\\r\\n\\t</code> gibi hepsi i\u015flenir.</p> <pre><code>`abc`                // \"abc\"\n\n`\\n\n\\n`                  // \"\\\\n\\n\\\\n\"\n\n\"\\n\"\n\n\"\\\"\"                 // `\"`\n\n\"Hello, world!\\n\"\n\n\"\u65e5\u672c\u8a9e\"\n\n\"\\u65e5\u672c\\U00008a9e\"\n\n// hepsi ayn\u0131 \u00e7\u0131kt\u0131y\u0131 verir...\n\"\u65e5\u672c\u8a9e\"                                 // Unicode text girdi, \u00e7\u0131kt\u0131: \u65e5\u672c\u8a9e\n`\u65e5\u672c\u8a9e`                                 // Unicode raw girdi, \u00e7\u0131kt\u0131: \u65e5\u672c\u8a9e\n\"\\u65e5\\u672c\\u8a9e\"                    // Unicode girdi, \u00e7\u0131kt\u0131: \u65e5\u672c\u8a9e\n\"\\U000065e5\\U0000672c\\U00008a9e\"        // Unicode girdi, \u00e7\u0131kt\u0131: \u65e5\u672c\u8a9e\n\"\\xe6\\x97\\xa5\\xe6\\x9c\\xac\\xe8\\xaa\\x9e\"  // bytes girdi, \u00e7\u0131kt\u0131: \u65e5\u672c\u8a9e\n</code></pre> <p>Unicode deste\u011fi oldu\u011fu i\u00e7in a\u015fa\u011f\u0131daki gibi kod \u00e7al\u0131\u015f\u0131r;</p> <pre><code>message := \"Hava 42\\u00B0 derece!\"   // \\u00B0 = \u00b0\nfmt.Println(message)                 // Hava 42\u00b0 derece!\n</code></pre> <p>\u015eunu tekrar hat\u0131rlayal\u0131m:</p> <ul> <li><code>byte</code> asl\u0131nda <code>uint8</code> (alias)</li> <li><code>rune</code> asl\u0131nda <code>int32</code> (alias)</li> </ul> <p>https://go.dev/play/p/chFT6db0pbJ</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\ns := \"message\"\n\nname := \"u\u011fur\"\n\nfmt.Println(s[0], s[1]) // 109 101\n\nfmt.Println(name[0], name[1], name[2], name[3], name[4]) // 117 196 159 117 114\n// name neden 5 tane karaktere sahip? 4 de\u011fil mi?\n\nfmt.Printf(\"%T %[1]v\\n\", name)         // string u\u011fur\nfmt.Printf(\"%T %[1]v\\n\", []rune(name)) // []int32 [117 287 117 114] - 287 ?\nfmt.Printf(\"%T %[1]v\\n\", []byte(name)) // []uint8 [117 196 159 117 114]\n}\n</code></pre> <p>Unicode deste\u011fi oldu\u011fu i\u00e7in asl\u0131nda <code>\u011f</code> byte olarak iki karekterden olu\u015fuyor: <code>196</code> ve <code>159</code>. Bu de\u011ferlik onluk (decimal) de\u011ferleri. Default olarak Unicode oldu\u011fundan asl\u0131nda karakter dizisindeki her eleman i\u00e7in <code>-2147483648</code> ile <code>2147483647</code> aras\u0131 bir de\u011fer olabiliyor. Bu bak\u0131mdan <code>[]int32</code> slice\u2019\u0131ndaki <code>287</code> say\u0131s\u0131 <code>\u011f</code> yi ifade ediyor.</p> <p>E\u011fer kod i\u00e7inde string uzunlu\u011fu ile ilgili bir i\u015f yapacaksan\u0131z bunu hep  hat\u0131rlay\u0131n</p> <p>String\u2019ler immutable yani de\u011feri de\u011fi\u015ftirilemez karakterler serisi / koleksiyonudur. Bu ne anlama geliyor?</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nname := \"u\u011fur\"\n\nfmt.Printf(\"%v %[1]T\", name[0]) // 117 uint8\n\nname[0] = 'x' // cannot assign to name[0] (value of type byte)\n}\n</code></pre> <p>Neticede bir koleksiyon oldu\u011fu i\u00e7in indeks numaras\u0131 ile (slice konusunda g\u00f6rece\u011fiz) i\u00e7indeki karakterlere eri\u015filebilir:</p> <p>https://go.dev/play/p/qg19JixH5bJ</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nmessage := \"Hava 42\\u00B0 derece!\"\n\nfmt.Println(message)\n\nfor index := range message {\n// %c : karakter\n// %d : digit/say\u0131\n// %x : hexadecimal/16'l\u0131k sistem\nfmt.Printf(\"%c | %d | $%x\\n\", message[index], message[index], message[index])\n}\n}\n\n// H | 72 | $48\n// a | 97 | $61\n// v | 118 | $76\n// a | 97 | $61\n//   | 32 | $20\n// 4 | 52 | $34\n// 2 | 50 | $32\n// \u00c2 | 194 | $c2\n//   | 32 | $20\n// d | 100 | $64\n// e | 101 | $65\n// r | 114 | $72\n// e | 101 | $65\n// c | 99 | $63\n// e | 101 | $65\n// ! | 33 | $21\n</code></pre> <p>Yine slice konusunda i\u015fleyece\u011fimiz kesme/bi\u00e7me i\u015flerini de yapabiliriz:</p> <p>https://go.dev/play/p/pcfKTcOLsXd</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\ns := \"hello world\"\n//    0123456789x\n\nfmt.Println(s)      // hello world\nfmt.Println(s[:5])  // hello - 0'dan 5'e kadar, 5 hari\u00e7\nfmt.Println(s[6:])  // world - 6'dan sona kadar\nfmt.Println(s[2:5]) // llo   - 2'den 5'e kadar, 5 hari\u00e7\n\n// fmt.Println(s[:-1]) invalid slice index -1 (index must be non-negative)\n}\n</code></pre> <p>String Concatenation yani metinleri birbirleriyle toplamak da m\u00fcmk\u00fcn;</p> <p>https://go.dev/play/p/vIectChuJKs</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nhello := \"Hello\"\nworld := \"World\"\n\nmessage := hello + \" \" + world\nfmt.Printf(\"%s\\n\", message) // Hello World\n}\n</code></pre>"},{"location":"04/02-bool/","title":"B\u00f6l\u00fcm 04/01: Veri Tipleri","text":""},{"location":"04/02-bool/#booleans","title":"Booleans","text":"<p><code>true</code> ve <code>false</code> de\u011ferleri i\u00e7in kullan\u0131l\u0131r. <code>1 bit integer</code> olarak ifade edilir.</p> <p>https://go.dev/play/p/I7zJoDNQDpI</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar result bool\n\nfmt.Printf(\"%t\\n\", result) // false, initial value\n\nif 2 &gt; 1 {\nresult = true // evet, 2 b\u00fcy\u00fckt\u00fcr 1\n}\n\nfmt.Printf(\"%v\\n\", result) // value\u2019su: true\nfmt.Printf(\"%t\\n\", result) // boolean olarak value\u2019su: true\n}\n</code></pre> <p>\u00d6zetle <code>true</code> ve <code>false</code> asl\u0131nda birer sabittir. Mant\u0131ksal kar\u015f\u0131la\u015ft\u0131rma yapmak i\u00e7in <code>&amp;&amp;</code> ve <code>||</code> kullan\u0131l\u0131r. E\u015fitlik i\u00e7in <code>==</code>, e\u015fit de\u011fildir i\u00e7in <code>!=</code>, olumsuzluk yani NOT i\u00e7in <code>!</code> kullan\u0131l\u0131r;</p> <p>https://go.dev/play/p/8JYEBnj86FU</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nfmt.Printf(\"true &amp;&amp; true -&gt; %t\\n\", true &amp;&amp; true)\nfmt.Printf(\"true &amp;&amp; false -&gt; %t\\n\", true &amp;&amp; false)\nfmt.Printf(\"false &amp;&amp; false -&gt; %t\\n\", false &amp;&amp; false)\nfmt.Printf(\"false &amp;&amp; true -&gt; %t\\n\", false &amp;&amp; true)\n\nfmt.Printf(\"true || true -&gt; %t\\n\", true || true)\nfmt.Printf(\"true || false -&gt; %t\\n\", true || false)\nfmt.Printf(\"false || false -&gt; %t\\n\", false || false)\nfmt.Printf(\"false || true -&gt; %t\\n\", false || true)\n\nfmt.Printf(\"!true -&gt; %t\\n\", !true)\nfmt.Printf(\"!false -&gt; %t\\n\", !false)\n}\n</code></pre>"},{"location":"04/03-numerics/","title":"B\u00f6l\u00fcm 04/03: Veri Tipleri","text":""},{"location":"04/03-numerics/#numerics","title":"Numerics","text":"<p>G\u00fcndelik hayatta kulland\u0131\u011f\u0131m\u0131z tam say\u0131lar yani Integers ve ondal\u0131kl\u0131 say\u0131lar yani Floats olmak \u00fczere iki ana grup mevcut. Say\u0131n\u0131n ka\u00e7 bitlik alan kaplad\u0131\u011f\u0131n\u0131 sonundaki ekten anlayabiliriz. <code>int8</code> 8-bit, <code>int64</code> 64-bit anlam\u0131ndad\u0131r.</p> <p>Ba\u015f\u0131na eklenen <code>u</code> o say\u0131n\u0131n unsigned integer yani sadece pozitif tam say\u0131 olabilece\u011fini s\u00f6yler bize.</p> Tip A\u00e7\u0131klama <code>int8</code> <code>-128</code> ile <code>127</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>int16</code> <code>-32768</code> ile <code>32767</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>int32</code> <code>-2147483648</code> ile <code>2147483647</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>int64</code> <code>-9223372036854775808</code> ile <code>9223372036854775807</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>uint8</code> <code>0</code> ile <code>255</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>uint16</code> <code>0</code> ile <code>65535</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>uint32</code> <code>0</code> ile <code>4294967295</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>uint64</code> <code>0</code> ile <code>18446744073709551615</code> aras\u0131nda de\u011fer ta\u015f\u0131r. <code>float32</code> 32-bit ondal\u0131k say\u0131lar, <code>-3.4E+38</code> ile <code>+3.4E+38</code> aras\u0131 <code>float64</code> 64-bit ondal\u0131k say\u0131lar, <code>-1.7E+308</code> ile <code>+1.7E+308</code> aras\u0131 <code>complex64</code> <code>float32</code> tipinde ger\u00e7ek say\u0131 ve hayali say\u0131: <code>1.0 + 7i</code> <code>complex128</code> <code>float64</code> tipinde ger\u00e7ek say\u0131 ve hayali say\u0131: <code>1.0 + 7i</code> <code>byte</code> <code>uint8</code> i\u00e7in takma ad <code>rune</code> Karater ifade etmek i\u00e7in <code>int32</code>\u2019ye takma ad <code>int</code> En az 32-bit\u2019lik (64-bit de olabilir) negatif/pozitif say\u0131 ifade etmek i\u00e7in. Dikkat! bu <code>int32</code> de\u011fil! <code>uint</code> En az 32-bit\u2019lik (64-bit de olabilir) pozitif say\u0131 ifade etmek i\u00e7in. Dikkat! bu <code>uint32</code> de\u011fil! <code>uintptr</code> Haf\u0131za adres i\u015faret\u00e7ilerini saklamak i\u00e7in (memory address pointers) <p><code>complex64</code> ve <code>complex128</code> tipleri asl\u0131nda t\u00fcmle\u015fik gelen <code>complex</code> fonksiyonu ile bu t\u00fcr say\u0131lar\u0131 \u00fcretir. Bu fonksiyonun imzas\u0131na bakt\u0131\u011f\u0131m\u0131zda;</p> <pre><code>func complex(r, i FloatType) ComplexType\n</code></pre> <p>2 tane <code>r</code> ve <code>i</code> de\u011fi\u015fkenine atanm\u0131\u015f <code>FloatType</code> tipinde girdi al\u0131p geriye <code>ComplexType</code> d\u00f6ner:</p> <p>https://go.dev/play/p/K7WFE2TwbYt</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nc1 := complex(5, 7) // ister fonksiyon ile\nc2 := 1 + 3i        // ister direkt yazarak\n\nfmt.Printf(\"%v\\n\", c1) // (5+7i)\nfmt.Printf(\"%v\\n\", c2) // (1+3i)\n}\n</code></pre> <p>Go, tan\u0131mlanan de\u011fi\u015fkenlerin tipi konusunda \u00e7ok kat\u0131d\u0131r. Yani say\u0131sal oldu\u011funu d\u00fc\u015f\u00fcnd\u00fc\u011f\u00fcn\u00fcz iki de\u011feri kafan\u0131za g\u00f6re i\u015fleyemezsiniz. <code>int</code> tipindeki bir say\u0131 ile <code>float32</code> tipindeki say\u0131y\u0131 toplamak i\u00e7in tip d\u00f6n\u00fc\u015ft\u00fcrmesi (Type Conversion) yapmak gerekiyor ve bu iki farkl\u0131 t\u00fcr\u00fcn toplam\u0131n\u0131n hangi tipte sonu\u00e7 vermesi gerekiyorsa o t\u00fcrden i\u015flem yapmak gerekiyor:</p> <p>https://go.dev/play/p/RiUrmoOWbwA</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\na := 32\n\n// argument reuse tekni\u011fi!\nfmt.Printf(\"a: %v (%[1]T)\\n\", a) // a: 32 (int)\n\nb := 1.1\nfmt.Printf(\"b: %v (%[1]T)\\n\", b) // b: 1.1 (float64)\n\nsum1 := a + int(b)\nfmt.Printf(\"sum1: %v (%[1]T)\\n\", sum1) // sum1: 33 (int)\n\nsum2 := float64(a) + b\nfmt.Printf(\"sum2: %v (%[1]T)\\n\", sum2) // sum2: 33.1 (float64)\n}\n</code></pre>"},{"location":"04/04-collections/","title":"B\u00f6l\u00fcm 04/04: Veri Tipleri / Koleksiyonlar","text":"<p>https://go.dev/blog/slices</p> <p>Composite Types yani birle\u015fik tipler olarak adland\u0131r\u0131lan ailedendir. Array ve Slice birbirleriyle karde\u015f iki kavramd\u0131r, aralar\u0131nda ufak ama \u00f6nemli bir fark bulunur!</p>"},{"location":"04/04-collections/#array","title":"Array","text":"<p>\u0130\u00e7inde ayn\u0131 tipte elemanlar\u0131n oldu\u011fu, boyutunun belli oldu\u011fu koleksiyona array yani dizi deniyor. Bir dizi i\u00e7inde say\u0131sal ya da sadece metinsel elemanlar olabiliyor. <code>Python</code> ya da <code>Ruby</code>\u2019de bir dizi i\u00e7indeki elemanlar\u0131n tipleri farkl\u0131 olabiliyordu ama go\u2019da sadece tek tip oluyor. (Generics haricinde...)</p> <p>Bir diziyi tan\u0131mlamak i\u00e7in <code>[adet]Tip</code> \u015feklinde bir ifade kullan\u0131yoruz.</p> <p><code>var a [3]int</code> dedi\u011fimizde <code>a</code> bir dizi ve boyu <code>3</code>. \u0130\u00e7indeki elemanlar\u0131n tipi de <code>int</code> demi\u015f oluyoruz;</p> <p>https://go.dev/play/p/WpeGUrzosN4</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar a [3]int\n\nfmt.Printf(\"%v %[1]T\\n\", a) // [0 0 0] [3]int\n\n}\n</code></pre> <p>Elemanlar\u0131n tipi <code>int</code> oldu\u011fu i\u00e7in ve <code>int</code>\u2019in default initializer\u2019\u0131 yani zero-value\u2019su <code>0</code> oldu\u011fu i\u00e7in <code>%v</code> bize <code>[0 0 0]</code> d\u00f6nd\u00fc. Yani i\u00e7inde 3 adet <code>0</code> olan bir dizi.</p> <p>Array\u2019ler ayn\u0131 di\u011fer dillerdeki gibi zero-index-based yani s\u0131f\u0131rdan ba\u015flayan s\u0131rayla eri\u015filebilir haldedirler:</p> <p>https://go.dev/play/p/vqIXPaUwZz9</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar a [3]int\n\nfmt.Printf(\"%v %[1]T\\n\", a) // [0 0 0] [3]int\n\na[0] = 1\na[1] = 2\na[2] = 3\n\nfmt.Printf(\"%v\\n\", a) // [1 2 3]\n}\n</code></pre> <p>Dizinin boyunu \u0130ngilizce length kelimesinin k\u0131saltmas\u0131 olan <code>len</code> ile al\u0131yoruz, hatta t\u00fcm koleksiyonlar i\u00e7in <code>len</code> kullan\u0131yoruz;</p> <p>https://go.dev/play/p/RX2okvf6U9c</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar x [5]float64            // [0  0  0  0  0]\n\nx[0] = 98                   // [98 0  0  0  0]\nx[1] = 22                   // [98 22 0  0  0]\nx[2] = 31                   // [98 22 31 0  0]\nx[3] = 91                   // [98 22 31 91 0]\nx[4] = 7                    // [98 22 31 91 7]\n\nfmt.Printf(\"%v\\n\", len(x)) // 5\n}\n</code></pre> <p>K\u0131sa-yol (short-hand declaration) ile array tan\u0131mlamak i\u00e7in;</p> <p>https://go.dev/play/p/BLSDUBtiy6n</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\na := [3]int{10, 20, 30} // short-hand declaration\n\nfmt.Printf(\"%T %[1]v\\n\", a) // [3]int [10 20 30]\n}\n</code></pre> <p>E\u011fer tan\u0131mlayaca\u011f\u0131m\u0131z array\u2019in boyunu go derleyicisinin bulmas\u0131n\u0131 istiyorsak; <code>[...]</code> kullan\u0131yoruz:</p> <p>https://go.dev/play/p/WvbDaRXYLaF</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\na := [...]int{10, 20, 30}\n\nfmt.Printf(\"%T %[1]v\\n\", a) // [3]int [10 20 30]\n}\n</code></pre> <p>Array\u2019ler kopyalan\u0131r!</p> <p>\u00d6rnekteki <code>fruits</code> ve <code>otherFruits</code> ba\u015fka ba\u015fka array\u2019lerdir:</p> <p>https://go.dev/play/p/tqRKm7-ygDe</p> <pre><code>package main\n\nimport \"fmt\"\n\nvar fruits = [...]string{\"apple\", \"melon\"}\n\nfunc main() {\notherFruits := fruits\n\notherFruits[0] = \"banana\"\n\nfmt.Println(\"otherFruits\", otherFruits, len(otherFruits), cap(otherFruits))\n// otherFruits [banana melon] 2 2\n\nfmt.Println(\"fruits\", fruits, len(fruits), cap(fruits))\n// fruits [apple melon] 2 2\n\n// &amp; ile de\u011fi\u015fkenin haf\u0131zadaki i\u015faret (point) etti\u011fi yeri al\u0131r\u0131z.\nfmt.Printf(\"fruits: %p\\n\", &amp;fruits)           // fruits: 0x10276d3e0\nfmt.Printf(\"otherFruits: %p\\n\", &amp;otherFruits) // otherFruits: 0x14000060020\n}\n</code></pre>"},{"location":"04/04-collections/#slice","title":"Slice","text":"<p>Slice asl\u0131nda dinamik, \u00f6l\u00e7eklenebilir (scalable) array\u2019dir. Array\u2019in sabit bir boyu (length\u2019i) olurken, slice\u2019\u0131n olmayabilir. Bu da bize esneklik sa\u011flar. Asl\u0131nda array\u2019in bir par\u00e7as\u0131n\u0131 tan\u0131mlar/ifade eder.</p> <p>Profesyonel hayatta geli\u015ftirme yaparken neredeyse sadece Slice\u2019lar\u0131 kullan\u0131r\u0131z!</p> <p>https://go.dev/play/p/o_Pw7VXiqA-</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar users []string // bo\u015f slice tan\u0131m\u0131, len=0\n\nfmt.Println(\"users\", users, len(users))                      // users [] 0\nfmt.Printf(\"users: %v || %#[1]v || %d\\n\", users, len(users)) // users: [] || []string(nil) || 0\n\nadmins := []string{\"vigo\", \"erhan\"} // 2 eleman\u0131 olan slice\n\nfmt.Println(\"admins\", admins, len(admins)) // admins [vigo erhan] 2\nfmt.Printf(\n\"admins: %v || %#[1]v || %d\\n\",\nadmins,\nlen(admins),\n) // admins: [vigo erhan] || []string{\"vigo\", \"erhan\"} || 2\n}\n</code></pre> <p>Slice\u2019\u0131n sonuna eleman eklemek i\u00e7in <code>append</code> kullan\u0131r\u0131z:</p> <p>https://go.dev/play/p/tNxkiH_56ON</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc main() {\nusers := []string{\"erhan\", \"vigo\"}\nusers = append(users, \"turbo\", \"max\", \"move\") // append multiple\n\nfmt.Printf(\"%T\\n\", users) // []string\nfmt.Printf(\"%v\\n\", users) // [erhan vigo turbo max move]\n}\n</code></pre> <p>Slice i\u00e7ine \u00f6zelle\u015ftirilmi\u015f tip ekleyelim:</p> <p>https://go.dev/play/p/K9-tLrBWkjt</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user string // type definition, custom type\n\ntype users []user // type definition, custom type\n\nfunc main() {\nvar ourUsers users\n\nourUsers = append(ourUsers, user(\"vigo\"))\nourUsers = append(ourUsers, user(\"erhan\"))\n\nfmt.Printf(\"%#v\\n\", ourUsers) // main.users{\"vigo\", \"erhan\"}\nfmt.Println(len(ourUsers))    // 2\n\nourUsers[0] = user(\"lego\")\nfmt.Printf(\"%#v\\n\", ourUsers) // main.users{\"lego\", \"erhan\"}\n}\n</code></pre> <p>Slice pointer (i\u015faret\u00e7i) kullan\u0131r, array gibi kopya yapmaz ve i\u00e7eride 3 \u015fey saklar;</p> <ol> <li>pointer: *element</li> <li>length: <code>int</code></li> <li>capacity: <code>int</code></li> </ol> <p><code>make</code> fonksiyonu ile slice tan\u0131mlar ve haf\u0131zaya yerle\u015ftiririz (preallocate). <code>s := make([]byte, 5)</code> dedi\u011fimizde haf\u0131zada durum \u015fu \u015fekildedir;</p> <pre><code>[]byte\n\n+---+\npointer   |   |---------&gt; [5]byte\n+---+           +---+---+---+---+---+\nlength    | 5 |           | 0 | 0 | 0 | 0 | 0 |\n+---+           +---+---+---+---+---+\ncapacity  | 5 |\n+---+\n</code></pre> <p>E\u011fer bu <code>nil</code> slice olursa; yani <code>var s []byte</code>:</p> <pre><code>[]byte\n\n          +-----+\npointer   | nil |\n          +-----+\nlength    |  0  |\n          +-----+\ncapacity  |  0  |\n          +-----+\n</code></pre> <p>\u0130\u015faret (point) etti\u011fi bir \u015fey, bir adres yok, dolay\u0131s\u0131yla <code>nil</code>:</p> <pre><code>var s []byte\nlen(s) // 0\ncap(s) // 0\nfor range s // iterates 0 times\ns[i] // panic: index out of range\n</code></pre> <p><code>var s []string</code> dedi\u011fimizde elimizdeki slice nil slice\u2019d\u0131r ve <code>nil</code> slice\u2019a <code>append</code> yani ekleme yap\u0131labilir.</p> <p>E\u011fer slice initialize edilirken kapasite de\u011feri verilmemi\u015fse, varsay\u0131lan (default) kapasite slice\u2019\u0131n length\u2019i kadar olur:</p> <p>https://go.dev/play/p/hzNeqh1nxv8</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nslice1 := make([]int, 5) // len: 5, default cap =&gt; 5\nslice2 := make([]int, 2) // len: 2, default cap =&gt; 2\n\nfmt.Printf(\"slice1, len: %d, cap: %d\\n\", len(slice1), cap(slice1)) // slice1, len: 5, cap: 5\nfmt.Printf(\"slice2, len: %d, cap: %d\\n\", len(slice2), cap(slice2)) // slice2, len: 2, cap: 2\n\nfmt.Println() // bo\u015f sat\u0131r\n\nslice1 = append(slice1, 1)                                         // 1 eleman ekle, kapasiteyi a\u015f, ek alan ekle\nfmt.Printf(\"slice1, len: %d, cap: %d\\n\", len(slice1), cap(slice1)) // slice1, len: 6, cap: 1\n\nslice2 = append(slice2, 1)                                         // 1 eleman ekle, kapasiteyi a\u015f, ek alan ekle\nfmt.Printf(\"slice2, len: %d, cap: %d\\n\", len(slice2), cap(slice2)) // slice2, len: 3, cap: 4\n\nfmt.Println() // bo\u015f sat\u0131r\n\n// kapasite varsay\u0131lan uzunlu\u011fa g\u00f6re b\u00fcy\u00fcr\n\nslice3 := make([]string, 0, 4)                                     // len: 0, default cap =&gt; 4\nfmt.Printf(\"slice3, len: %d, cap: %d\\n\", len(slice3), cap(slice3)) // slice3, len: 0, cap: 4\n\nslice3 = append(slice3, \"1 daha\")\nfmt.Printf(\"slice3, len: %d, cap: %d\\n\", len(slice3), cap(slice3)) // slice3, len: 1, cap: 4\n\nslice3 = append(slice3, \"2 daha\")\nfmt.Printf(\"slice3, len: %d, cap: %d\\n\", len(slice3), cap(slice3)) // slice3, len: 2, cap: 4\n\nslice3 = append(slice3, \"3 daha\")\nfmt.Printf(\"slice3, len: %d, cap: %d\\n\", len(slice3), cap(slice3)) // slice3, len: 3, cap: 4\n\nslice3 = append(slice3, \"4 daha\")\nfmt.Printf(\"slice3, len: %d, cap: %d\\n\", len(slice3), cap(slice3)) // slice3, len: 4, cap: 4\n\n// g\u00fcm! kapasiteyi artt\u0131r, ta\u015ft\u0131k \u00e7\u00fcnk\u00fc!\nslice3 = append(slice3, \"more 5, overflow!\")\nfmt.Printf(\"slice3, len: %d, cap: %d\\n\", len(slice3), cap(slice3)) // slice3, len: 5, cap: 8\n\n// slice3[100] = \"foo\" // panic: runtime error: index out of range [100] with length 5\n}\n</code></pre> <p>Kapasite, altta yatan array\u2019e ya da slice\u2019a (underlying) g\u00f6re de\u011fi\u015fir. Slice\u2019dan ba\u015fka bir slice \u00e7\u0131kartabiliriz. Yeni slice\u2019\u0131n kapasiteside kulland\u0131\u011f\u0131 slice\u2019\u0131n kapasitesi ile, altaki slice\u2019\u0131n i\u015faret (point) etti\u011fi yerdeki kapasiteden kalanla orant\u0131l\u0131:</p> <pre><code>users := []string{\"erhan\", \"vigo\", \"turbo\", \"max\", \"move\"}\n\n+---+\npointer   |   |---------&gt; [5]string\n+---+           +-------+------+-------+-----+------+\nlength    | 5 |           | erhan | vigo | turbo | max | move |\n+---+           +-------+------+-------+-----+------+\ncapacity  | 5 |\n+---+\n\n---\n\nuserSlice1 := users[1:2] // 0 ba\u015flang\u0131\u00e7, 1\u2019den al, 2\u2019ye kadar, 2 hari\u00e7\n\n+---+\npointer   |   |-----------------------+\n          |   |                       \u2193 \n+---+           +-------+------+-------+-----+------+\nlength    | 1 |           |       | vigo | ..... | ... | .... |\n+---+           +-------+------+-------+-----+------+\ncapacity  | 4 |\n+---+\n\n---\n\nuserSlice2 := users[4:] // 0 ba\u015flang\u0131\u00e7, 4\u2019ten al, sona kadar, son dahil\n\n+---+\npointer   |   |--------------------------------------------+\n          |   |                                            \u2193 \n+---+           +-------+------+-------+-----+------+\nlength    | 1 |           |       |      |       |     | move |\n+---+           +-------+------+-------+-----+------+\ncapacity  | 1 |\n+---+\n</code></pre> <p>Kod olarak g\u00f6relim:</p> <p>https://go.dev/play/p/BN-Lr0i0180</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n//  0       1        2       3      4\n// \"erhan\", \"vigo\", \"turbo\", \"max\", \"move\"\nusers := []string{\"erhan\", \"vigo\", \"turbo\", \"max\", \"move\"}\nfmt.Printf(\"users - [:] - len: %v, cap: %v\\n\", len(users), cap(users))\n// users - len: 5, cap: 5\n\nuserSlice1 := users[1:2]\n//  0       1        2       3      4\n// \"erhan\", *\"vigo\"*, \"turbo\", \"max\", \"move\"\n//             x    ,    x   ,   x  ,   x\n// 1'den itibaren 2'ye kadar, 2 hari\u00e7\nfmt.Printf(\"userSlice1 - [1:2] - len: %v, cap: %v\\n\", len(userSlice1), cap(userSlice1))\n// userSlice1 - [1:2] - len: 1, cap: 4\n\nuserSlice2 := users[4:]\n//  0       1        2       3      4\n// \"erhan\", \"vigo\", \"turbo\", \"max\", *\"move\"*\n//                                ,    x\n// 4'ten itibaren sona kadar, son dahil\nfmt.Printf(\"userSlice2 - [4:] - len: %v, cap: %v\\n\", len(userSlice2), cap(userSlice2))\n// userSlice2 - [4:] - len: 1, cap: 1\n}\n</code></pre> <p>Keza slicelar referans tiplerdir:</p> <p>https://go.dev/play/p/YK1bjGumMEL</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc addOne(s []int) {\nfmt.Printf(\"s haf\u0131za adresi: %p\\n\", s) // s haf\u0131za adresi: 0x14000020180\nfor i := range s {\ns[i]++ // index i'deki eleman\u0131n de\u011ferini 1 artt\u0131r\n}\n}\n\nfunc main() {\nnumbers := []int{1, 2, 3}\nfmt.Println(\"numbers - ba\u015flang\u0131\u00e7 de\u011feri\", numbers) // numbers - ba\u015flang\u0131\u00e7 de\u011feri [1 2 3]\n\naddOne(numbers)\nfmt.Println(\"numbers - addOne sonras\u0131\", numbers)     // numbers - addOne sonras\u0131 [2 3 4]\nfmt.Printf(\"numbers - haf\u0131za adresi: %p\\n\", numbers) // numbers - haf\u0131za adresi: 0x14000020180\n}\n</code></pre> <p>Ba\u015fka bir \u00f6rnek:</p> <p>https://go.dev/play/p/yCEF399Sx7q</p> <pre><code>package main\n\nimport \"fmt\"\n\n// setZeroByIndex sadece demo ama\u00e7l\u0131 bir fonksiyon.\n// olmayan index kontrol\u00fc yap\u0131lmam\u0131\u015ft\u0131r.\nfunc setZeroByIndex(s []int, i int) {\nfmt.Printf(\"s haf\u0131za adresi: %p\\n\", s) // s haf\u0131za adresi: 0x14000020150\ns[i] = 0\n}\n\nfunc main() {\nnumbers := []int{1, 2, 3}\nfmt.Println(\"numbers - ba\u015flang\u0131\u00e7 de\u011feri\", numbers) // numbers - ba\u015flang\u0131\u00e7 de\u011feri [1 2 3]\n\nsetZeroByIndex(numbers, 0)\nfmt.Println(\"numbers - setZeroByIndex 0 sonras\u0131\", numbers) // numbers - setZeroByIndex 0 sonras\u0131 [0 2 3]\nfmt.Printf(\"numbers - haf\u0131za adresi: %p\\n\", numbers)       // numbers - haf\u0131za adresi: 0x14000020150\n}\n</code></pre> <p>E\u011fer <code>append</code> kullan\u0131l\u0131rsa, slice de\u011fi\u015fir, kopya \u00e7\u0131kar\u0131l\u0131r, art\u0131k yeni bir slice olur:</p> <p>https://go.dev/play/p/PNysfmeb1vy</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc appendOne(s []int) {\nfmt.Printf(\"s haf\u0131za adresi: %p\\n\", s)          // s haf\u0131za adresi: 0x140000ac000\ns = append(s, 1)                                // bu s art\u0131k ba\u015fka bir slice\nfmt.Printf(\"s haf\u0131za adresi (append): %p\\n\", s) // s haf\u0131za adresi (append): 0x140000b2000\n}\n\nfunc main() {\nnumbers := []int{1, 2, 3}\nfmt.Println(\"numbers - ba\u015flang\u0131\u00e7 de\u011feri\", numbers) // numbers - ba\u015flang\u0131\u00e7 de\u011feri [1 2 3]\n\nappendOne(numbers)\nfmt.Println(\"numbers - appendOne sonras\u0131\", numbers)  // numbers - appendOne sonras\u0131 [1 2 3]\nfmt.Printf(\"numbers - haf\u0131za adresi: %p\\n\", numbers) // numbers - haf\u0131za adresi: 0x140000ac000\n}\n</code></pre> <p>Three-index slicing ile yeni bir slice \u00e7\u0131kart\u0131rken <code>[start:end:capacity]</code> belirtebiliriz:</p> <p>https://go.dev/play/p/-_dH6Cyvp39</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc main() {\nusers := []string{\"Foo\", \"Bar\", \"Baz\"}\nuserSlice := users[1:2]               // 1'den ba\u015fla (Bar), 2'ye kadar, 2 hari\u00e7\nuserSliceWithCapacity := users[0:1:1] // 0'dan ba\u015fla (Foo) 1'e kadar, 1 hari\u00e7, kapasite 1 olsun\n\nfmt.Printf(\"len: %v cap: %v\\n\", len(users), cap(users))                                 // len: 3 cap: 3\nfmt.Printf(\"len: %v cap: %v\\n\", len(userSlice), cap(userSlice))                         // len: 1 cap: 2\nfmt.Printf(\"len: %v cap: %v\\n\", len(userSliceWithCapacity), cap(userSliceWithCapacity)) // len: 1 cap: 1\n}\n</code></pre> <p>Son olarak unutmamam\u0131z gereken bir konu; fonksiyona arg\u00fcman olarak slice g\u00f6ndermek gerekirse;</p> <ul> <li>Pointer\u2019m\u0131 yollamal\u0131?</li> <li>Direk slice\u2019\u0131 m\u0131 yollamal\u0131?</li> </ul> <pre><code>func checkUsers(users []string)   // ?\n\nfunc checkUsers(users *[]string)  // ?\n</code></pre> <p>B\u00fcy\u00fck \u00e7o\u011funlukla (\u00f6rnekteki gibi ise) direk slice\u2019\u0131 yollar\u0131z. Baz\u0131 durumlarda pointer to slice g\u00f6ndeririz (gob, json, xml decoding, unmarshal gibi.)</p>"},{"location":"04/05-struct-annotations/","title":"B\u00f6l\u00fcm 04/05: Veri Tipleri","text":""},{"location":"04/05-struct-annotations/#struct-annotations","title":"Struct Annotations","text":"<p><code>struct</code> alanlar\u0131na tak\u0131lan meta bilgi alanlar\u0131na <code>tag</code> deniyor. Bu bilginin eklenmesi i\u015fine de annotation yani not alma i\u015flemi deniyor. Bu ek bilgiyi struct\u2019larla \u00e7al\u0131\u015f\u0131rken kullan\u0131yoruz. Struct field\u2019lar\u0131 ile ilgili ek i\u015flemler yapaca\u011f\u0131m\u0131z zaman bu tag\u2019leri kullan\u0131yoruz.</p> <p>Tag; backtick ` karakterleri aras\u0131nda tan\u0131mlan\u0131yor ve  <code>key1:\"value1\" key2:\"value2\"</code> \u015feklinde N tane tag alabiliyor:</p> <pre><code>type S struct {\nField fieldtype `key1:\"value1\" key2:\"value2\"`\n}\n</code></pre> <p>Nerelerde i\u015fimize yarar ?</p> <ul> <li>Encoding/Decoding i\u015flemlerinde; <code>json.Marshal</code> / <code>json.Unmarshal</code> gibi...</li> <li>Field validation (do\u011frulama) i\u015flemlerinde; alan bo\u015f olamaz\u2019\u0131 kontrol   ederken...</li> <li>Veritaban\u0131 i\u015flerinde; database field type definition/validation...</li> </ul>"},{"location":"04/05-struct-annotations/#custom-tag","title":"Custom Tag","text":"<p>\u015eimdi kendimize ait bir tag yapal\u0131m. Bu tag\u2019e sahip olan string alanlar\u0131 otomatik olarak i\u00e7indeki yazan de\u011fere g\u00f6re upper/lower case haline d\u00f6n\u00fc\u015fs\u00fcn.</p> <p>https://go.dev/play/p/J3QLYdSjXtb</p> <p>\u00d6rnek kod</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"reflect\"\n\"strings\"\n)\n\n// User holds user model data.\ntype User struct {\nFirstName string `case:\"upper\"`\nLastName  string `case:\"lower\"`\nAge       int    `case:\"lower\"` // won't affect\n}\n\n// Set sets case tag declarations.\n// \"case\" tag is only operational for strings!\nfunc (u *User) Set() {\nv := reflect.Indirect(reflect.ValueOf(u))\nt := v.Type()\n\nfor i := 0; i &lt; v.NumField(); i++ {\nfield := v.Field(i)\nif !field.CanSet() {\ncontinue\n}\n\nk := field.Type().Kind()\nif k == reflect.String {\ntagCase, ok := t.Field(i).Tag.Lookup(\"case\")\nif !ok {\ncontinue\n}\n\nswitch tagCase {\ncase \"upper\":\nif field.String() != \"\" {\nfield.SetString(strings.ToUpper(field.String()))\n}\ncase \"lower\":\nif field.String() != \"\" {\nfield.SetString(strings.ToLower(field.String()))\n}\n}\n}\n}\n}\n\nfunc main() {\nu1 := User{\nFirstName: \"U\u011fur\",\nLastName:  \"\u00d6zy\u0131lmazel\",\nAge:       51,\n}\n\nfmt.Printf(\"%+v\\n\", u1) // {FirstName:U\u011fur LastName:\u00d6zy\u0131lmazel Age:49}\n\nu1.Set()\nfmt.Println(u1.FirstName) // U\u011eUR\nfmt.Println(u1.LastName)  // \u00f6zy\u0131lmazel\nfmt.Println(u1.Age)       // 51\n}\n</code></pre> <p><code>struct</code>\u2019a ekledi\u011fimiz <code>Set</code> method\u2019u ile tan\u0131mlanan alanlar\u0131n field\u2019lar\u0131nda modifikasyon yap\u0131yoruz. \u00d6nceki derslerden hat\u0131rlayaca\u011f\u0131n\u0131z gibi, method asl\u0131nda bir Pointer Receiver : <code>func (u *User) Set()</code>.</p> <p>\u00d6nce de\u011fer analizi yap\u0131yoruz, sonra tipi buluyoruz. T\u00fcm field\u2019lar\u0131n i\u00e7inde dola\u015f\u0131p tipi <code>string</code>\u2019e uygun olan alan\u0131 bulup tag\u2019ine bak\u0131yoruz. Tag de\u011feri upper ya da lower ise gerekli i\u015flemi yap\u0131p field\u2019\u0131n value\u2019sunu de\u011fi\u015ftiriyoruz.</p>"},{"location":"04/05-struct-annotations/#validation-dogrulama","title":"Validation (Do\u011frulama)","text":"<p>https://github.com/isacikgoz/defaults</p> <p>https://go.dev/play/p/-b7GxOVnxjX</p> <p>\u00d6rnek kod</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"log\"\n\n\"github.com/isacikgoz/defaults\"\n)\n\n// User holds basic user information.\ntype User struct {\nName     string `validate:\"notempty\"`\nEmail    string `validate:\"email\"`\nHomepage string `validate:\"url\"      default:\"https://vbyazilim.com\"`\n}\n\nfunc main() {\nvar u User\n\n// set defaults\nif err := defaults.Set(&amp;u); err != nil {\nlog.Fatal(err)\n}\n\nfmt.Printf(\"%+v\\n\", u) // {Name: Email: Homepage:https://vbyazilim.com}\n\nu.Name = \"U\u011fur \u00d6zy\u0131lmazel\"\nu.Email = \"ugur@fake.com\"\n// u.Email = \"\"\n// u.Homepage = \"\"\n// u.Homepage = \"foooo\"\n\nif err := defaults.Validate(&amp;u); err != nil {\nlog.Fatal(err)\n}\n}\n</code></pre> <p>Daha kapsaml\u0131 do\u011frulamalar yapmak i\u00e7in genelde;</p> <p>https://github.com/go-playground/validator</p> <p>k\u00fct\u00fcphanesini kullan\u0131yoruz.</p>"},{"location":"04/05-struct/","title":"B\u00f6l\u00fcm 04/05: Veri Tipleri","text":""},{"location":"04/05-struct/#structs","title":"Structs","text":"<p>Array ve Slice gibi Struct\u2019da composite types ailesinden bir tiptir.</p> <p>Structure yani yap\u0131 kelimesinin k\u0131salt\u0131lm\u0131\u015f halidir <code>struct</code>. Yap\u0131sal veri saklaman\u0131n en k\u0131sa ve basit y\u00f6ntemidir. \u0130\u00e7inde alanlardan olu\u015fan koleksiyonlar tutar. Bence go\u2019nun en \u00f6nemli iki konusundan biridir.</p> <p>Konuyu anlamak i\u00e7in <code>struct</code> tipini, veritaban\u0131ndaki tablo gibi d\u00fc\u015f\u00fcnebilirsiniz. \u00d6rne\u011fin kullan\u0131c\u0131lar\u0131 saklad\u0131\u011f\u0131m\u0131z bir tablo olsa. Kullan\u0131c\u0131n\u0131n ad\u0131, soyad\u0131, e-posta adresi, \u015fifresi ve ya\u015f\u0131 olsa;</p> <pre><code>type user struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}\n</code></pre> <p>Bu durumda <code>user</code>\u2019\u0131n alanlar\u0131;</p> <ul> <li><code>firstName</code>: Tipi <code>string</code></li> <li><code>lastName</code>: Tipi <code>string</code></li> <li><code>email</code>: Tipi <code>string</code></li> <li><code>password</code>: Tipi <code>string</code></li> <li><code>age</code>: Tipi <code>int</code></li> </ul> <p>Go\u2019da tip tan\u0131m\u0131 yapmad\u0131\u011f\u0131m\u0131z neredeyse hi\u00e7 bir yer yok. Alanlar\u0131n ad\u0131 oldu\u011fu gibi tipi de olmak zorunda. E\u011fer tip tan\u0131m\u0131 varsa, tiplerin zero-value\u2019lar\u0131 da var. Yani <code>firstName</code> alan\u0131n\u0131n ba\u015flang\u0131\u00e7 (initial) de\u011feri bo\u015f string yani <code>\"\"</code>.</p> <p>Alan adlar\u0131n\u0131 gruplamak da m\u00fcmk\u00fcn;</p> <pre><code>type user struct {\nfirstName, lastName, email, password string\nage                                  int\n}\n</code></pre> <p>Ger\u00e7ek d\u00fcnyada genelde her \u015feyi a\u00e7\u0131k a\u00e7\u0131k yazmak ve g\u00f6rmek istiyoruz, bu bak\u0131mdan gruplama stilini pek de kullanm\u0131yoruz.</p> <p><code>type user struct</code> go a\u00e7\u0131s\u0131ndan Named Structure yani ismi olan bir yap\u0131. Ayn\u0131 mant\u0131kla ismi olmayan yap\u0131lar yani Anonymous Structure da m\u00fcmk\u00fcn. \u015eimdi her ikisini de kullanan \u00f6rne\u011fe bakal\u0131m:</p> <p>https://go.dev/play/p/mQbUP-GG40Q</p> <pre><code>package main\n\nimport \"fmt\"\n\nvar user struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}\n\nfunc main() {\nuser1 := user\nuser1.firstName = \"U\u011fur\"\nuser1.lastName = \"\u00d6zy\u0131lmazel\"\nuser1.email = \"vigo@xxx.com\"\nuser1.password = \"1234\"\nuser1.age = 51\n\nuser2 := user\nuser2.firstName = \"Erhan\"\nuser2.lastName = \"Akp\u0131nar\"\nuser2.email = \"erhan@xxx.com\"\nuser2.password = \"1234\"\nuser2.age = 38\n\n// anonymous struct\nuser3 := struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}{\nfirstName: \"Ezel\",\nlastName:  \"\u00d6zy\u0131lmazel\",\nemail:     \"ezel@yyy.com\",\npassword:  \"1234\",\nage:       12,\n}\n\n// anonymous struct\nuser4 := struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}{\n\"Ali\", // kod okunakl\u0131\u011f\u0131 a\u00e7\u0131s\u0131ndan iyi de\u011fil\n\"Desidero\",\n\"alide@me.com\",\n\"1234\",\n77,\n}\n\nfmt.Printf(\"user1.firstName: %s\\n\", user1.firstName) // U\u011fur\nfmt.Printf(\"user2.firstName: %s\\n\", user2.firstName) // Erhan\nfmt.Printf(\"user3.firstName: %s\\n\", user3.firstName) // Ezel\nfmt.Printf(\"user4.firstName: %s\\n\", user4.firstName) // Ali\n}\n</code></pre> <p>Tekrar zero-value olay\u0131n\u0131 hat\u0131rlayal\u0131m:</p> <p>https://go.dev/play/p/o0NIIV0ss1P</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nfirstName string // string\u2019lerin zero-value\u2019su yani \"\"\nlastName  string // string\u2019lerin zero-value\u2019su yani \"\"\nemail     string // string\u2019lerin zero-value\u2019su yani \"\"\npassword  string // string\u2019lerin zero-value\u2019su yani \"\"\nage       int    // int\u2019lerin zero-value\u2019su yani 0\n}\n\nfunc main() {\n\nuser1 := user{} // bo\u015f yap\u0131\n\nfmt.Printf(\"%v\\n\", user1)  // {    0}\nfmt.Printf(\"%+v\\n\", user1) // {firstName: lastName: email: password: age:0}\n}\n</code></pre> <p>Atama esnas\u0131nda baz\u0131 alanlara de\u011fer atay\u0131p baz\u0131 alanlar\u0131 pas ge\u00e7ebiliriz, bu durumda pas ge\u00e7ilenler yine zero-value\u2019lar\u0131n\u0131 al\u0131r:</p> <p>https://go.dev/play/p/qNkYB9_A5cr</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}\n\nfunc main() {\n\nuser1 := user{\nfirstName: \"U\u011fur\",\nlastName:  \"\u00d6zy\u0131lmazel\",\n}\nuser2 := user{firstName: \"Ezel\"}\nuser3 := user{age: 11}\n\nfmt.Printf(\"%+v\\n\", user1) // {firstName:U\u011fur lastName:\u00d6zy\u0131lmazel email: password: age:0}\nfmt.Printf(\"%+v\\n\", user2) // {firstName:Ezel lastName: email: password: age:0}\nfmt.Printf(\"%+v\\n\", user3) // {firstName: lastName: email: password: age:11}\n}\n</code></pre> <p>Bo\u015f bir struct tan\u0131m\u0131 yap\u0131p i\u00e7ini sonradan da doldurabiliriz:</p> <p>https://go.dev/play/p/KOP80WwJaYZ</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}\n\nfunc main() {\n\nvar user1 user // user1, user tipinde bir de\u011fi\u015fken\n\nuser1.firstName = \"U\u011fur\"\nuser1.lastName = \"\u00d6zy\u0131lmazel\"\n\nfmt.Printf(\"%+v\\n\", user1) // {firstName:U\u011fur lastName:\u00d6zy\u0131lmazel email: password: age:0}\n}\n</code></pre> <p>Keza struct\u2019\u0131 <code>new</code> anahtar kelimesiyle initialize edip, haf\u0131zada yer rezervasyonu yapabiliriz. <code>new</code> ile tan\u0131mlad\u0131\u011f\u0131m\u0131z zaman bize pointer d\u00f6ner (haf\u0131za adresi) ve initialize oldu\u011fu i\u00e7in haf\u0131zada yer kaplam\u0131\u015f (allocation yapm\u0131\u015f) oluruz ve zero-value\u2019u atam\u0131\u015f oluruz:</p> <p>https://go.dev/play/p/sU6WL_9oK2Y</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}\n\nfunc main() {\nuser1 := new(user) // haf\u0131zay\u0131 user tipi i\u00e7in gereken yer kadar rezerve et\nuser2 := user{}\n\nfmt.Printf(\"user1: %T\\n\", user1) // user1: *main.user (pointer geldi)\nfmt.Printf(\"user2: %T\\n\", user2) // user2: main.user\n\nfmt.Printf(\"%v\\n\", user1) // &amp;{    0}\nfmt.Printf(\"%v\\n\", user2) // {    0}\n\nuser1.firstName = \"U\u011fur\"\nuser2.firstName = \"Ezel\"\n\nfmt.Printf(\"%s\\n\", user1.firstName) // U\u011fur\nfmt.Printf(\"%s\\n\", user2.firstName) // Ezel\n\nfmt.Printf(\"%v\\n\", *user1) // {U\u011fur    0} * ile \"value of\", dereferencing\n}\n</code></pre> <p>Dikkat ettiyseniz <code>fmt.Printf(\"user1: %T\\n\", user1)</code> ile <code>user1</code>\u2019in tipini yazd\u0131rd\u0131\u011f\u0131m\u0131zda bize <code>*main.user</code> geldi. Haf\u0131zada ayr\u0131lan adresi i\u015faret eden, yani pointer\u2019\u0131 d\u00f6nd\u00fc. Pointer konusunu ileride i\u015fleyece\u011fiz ama h\u0131zl\u0131ca ge\u00e7mek gerekirse;</p> Sembol A\u00e7\u0131klamas\u0131 <code>*</code> value of : yani de\u011feri, <code>C</code>\u2019deki dereference i\u015flemi <code>&amp;</code> address of: yani haf\u0131zadaki hexadecimal adresi <p>Go bize explicit dereference yani <code>(*user1).firstName</code> yaparak eri\u015fmek yerine direkt olarak <code>user1.firstName</code> \u015feklinde eri\u015fmeye imkan sa\u011flar;</p> <p><code>new</code> sadece <code>struct</code> i\u00e7in de\u011fil t\u00fcm concrete type\u2019lar i\u00e7in ge\u00e7erlidir:</p> <p>https://go.dev/play/p/0K26qhK2VjD</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype myInt int\n\ntype intPool []myInt\n\ntype runner interface {\nRun() error\n}\n\nfunc main() {\na := new(int)\nb := new(string)\nc := new(bool)\nd := new(float64)\ne := new(myInt)\nf := new(intPool)\ng := new(map[string]string)\nh := new([]byte)\n\ni := new(runner)\n\nfmt.Printf(\"a, type: %T value: %[1]v *value: %v\\n\", a, *a)\n// a, type: *int value: 0x1400001a100 *value: 0\n\nfmt.Printf(\"b, type: %T value: %[1]v *value: %v\\n\", b, *b)\n// b, type: *string value: 0x14000010250 *value:\n\nfmt.Printf(\"c, type: %T value: %[1]v *value: %v\\n\", c, *c)\n// c, type: *bool value: 0x1400001a108 *value: false\n\nfmt.Printf(\"d, type: %T value: %[1]v *value: %v\\n\", d, *d)\n// d, type: *float64 value: 0x1400001a110 *value: 0\n\nfmt.Printf(\"e, type: %T value: %[1]v *value: %v\\n\", e, *e)\n// e, type: *main.myInt value: 0x1400001a118 *value: 0\n\nfmt.Printf(\"f, type: %T value: %[1]v *value: %v\\n\", f, *f)\n// f, type: *main.intPool value: &amp;[] *value: []\n\nfmt.Printf(\"g, type: %T value: %[1]v *value: %v\\n\", g, *g)\n// g, type: *map[string]string value: &amp;map[] *value: map[]\n\nfmt.Printf(\"h ([]byte), type: %T value: %[1]v *value: %v\\n\", h, *h)\n// h ([]byte), type: *[]uint8 value: &amp;[] *value: []\n\nfmt.Printf(\"i (interface), type: %T value: %[1]v *value: %v\\n\", i, *i)\n// i (interface), type: *main.runner value: 0x14000010260 *value: &lt;nil&gt;\n}\n</code></pre> <p>Explicit dereference (a\u00e7\u0131k) \u00f6rne\u011fi;</p> <p>https://go.dev/play/p/DlUMpQN2b40</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nfirstName string\nlastName  string\nemail     string\npassword  string\nage       int\n}\n\nfunc main() {\n\nuser1 := new(user)\nuser1.firstName = \"U\u011fur\"\n\nfmt.Printf(\"%s\\n\", (*user1).firstName) // U\u011fur\nfmt.Printf(\"%s\\n\", user1.firstName)    // U\u011fur\n\nfmt.Println(user1.firstName == (*user1).firstName) // true\n}\n</code></pre> <p>Hem <code>new(user)</code> hem de <code>&amp;user{}</code> ayn\u0131 i\u015fi yaparlar, haf\u0131zada \"zero user\" allocation yaparlar ve rezerve edilen haf\u0131zan\u0131n adresini (pointer\u2019\u0131n\u0131) d\u00f6nerler. </p> <p><code>new</code> t\u00fcm tipler i\u00e7in kullan\u0131labilir; <code>new(int)</code> gibi ama <code>&amp;TYPE</code> sadece struct i\u00e7in ge\u00e7erlidir.</p> <p>Struct i\u00e7inde anonim alanlar yapmak da m\u00fcmk\u00fcn;</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nstring\nint\n}\n\nfunc main() {\nuser1 := user{\"U\u011fur \u00d6zy\u0131lmazel\", 46}\nfmt.Printf(\"%+v\\n\", user1) // {string:U\u011fur \u00d6zy\u0131lmazel int:46}\n}\n</code></pre> <p>Peki bu anonim yap\u0131n\u0131n alanlar\u0131na (field\u2019lar\u0131na) nas\u0131l eri\u015fece\u011fiz ? Do\u011fal olarak alan adlar\u0131 belirtilen tip ad\u0131 oluyor:</p> <p>https://go.dev/play/p/vjpd0v0UY9o</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nstring\nint\n}\n\nfunc main() {\nvar user1 user\n\nuser1.string = \"U\u011fur \u00d6zy\u0131lmazel\"\nuser1.int = 46\n\nfmt.Printf(\"%+v\\n\", user1) // {string:U\u011fur \u00d6zy\u0131lmazel int:46}\n\nfmt.Printf(\"%s\\n\", user1.string) // U\u011fur \u00d6zy\u0131lmazel\nfmt.Printf(\"%d\\n\", user1.int)    // 46\n}\n</code></pre> <p>Bu \u00f6rnek sadece proof-of-concept yani \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 g\u00f6stermek i\u00e7in, g\u00fcndelik hayatta hi\u00e7 de iyi bir pratik de\u011fil. Unutmay\u0131n ki iki tane ayn\u0131 anonim alan olamaz:</p> <pre><code>type user struct {\nstring\nstring\nint\nint\n}\n\n// derlemez! duplicate field!\n</code></pre> <p>\u0130\u00e7-i\u00e7e ge\u00e7mi\u015f, yani Nested Structures yapmak da m\u00fcmk\u00fcn:</p> <p>https://go.dev/play/p/Mhlg79fGGbH</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype person struct {\nname    string\nage     int\naddress address\n}\n\ntype address struct {\ncity, country string\n}\n\nfunc main() {\np1 := person{}\np1.name = \"U\u011fur \u00d6zy\u0131lmazel\"\np1.age = 46\np1.address = address{\ncity:    \"\u0130stanbul\",\ncountry: \"T\u00fcrkiye\",\n}\n\nfmt.Printf(\"%+v\\n\", p1) // {name:U\u011fur \u00d6zy\u0131lmazel age:46 address:{city:\u0130stanbul country:T\u00fcrkiye}}\n\nfmt.Printf(\"city: %s\\n\", p1.address.city)       // city: \u0130stanbul\nfmt.Printf(\"country: %s\\n\", p1.address.country) // country: T\u00fcrkiye\n}\n</code></pre> <p>\u0130\u00e7-i\u00e7e struct\u2019lar\u0131n g\u00fczel bir \u00f6zelli\u011fi de Promoted Fields yani <code>p1.address.city</code> yerine, <code>p1.city</code> \u015feklinde eri\u015fmek m\u00fcmk\u00fcn, sadece k\u00fc\u00e7\u00fck bir de\u011fi\u015fiklik yaparak;</p> <p>https://go.dev/play/p/OxoWXMYMzgQ</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype person struct {\nname    string\nage     int\naddress // address address eski haliydi\n}\n\ntype address struct {\ncity, country string\n}\n\nfunc main() {\np1 := person{}\np1.name = \"U\u011fur \u00d6zy\u0131lmazel\"\np1.age = 46\np1.address = address{\ncity:    \"\u0130stanbul\",\ncountry: \"T\u00fcrkiye\",\n}\n\nfmt.Printf(\"%+v\\n\", p1) // {name:U\u011fur \u00d6zy\u0131lmazel age:46 address:{city:\u0130stanbul country:T\u00fcrkiye}}\n\nfmt.Printf(\"city: %s\\n\", p1.city)       // city: \u0130stanbul\nfmt.Printf(\"country: %s\\n\", p1.country) // country: T\u00fcrkiye\n}\n</code></pre> <p>Anonim struct\u2019a ait olan alanlar Promoted Fields oluyor! E\u011fer promoted field ad\u0131, i\u00e7ine g\u00f6m\u00fcld\u00fc\u011f\u00fc struct\u2019\u0131n i\u00e7indeki bir field ile \u00e7ak\u0131\u015f\u0131rsa, promotion suya d\u00fc\u015fer :)</p> <p>https://go.dev/play/p/ch8zh16UpcP</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype person struct {\nname string\nage  int\ncity string\naddress\n}\n\ntype address struct {\ncity, country string\n}\n\nfunc main() {\np1 := person{}\np1.name = \"U\u011fur \u00d6zy\u0131lmazel\"\np1.age = 46\np1.city = \"New York\"\np1.address = address{\ncity:    \"\u0130stanbul\",\ncountry: \"T\u00fcrkiye\",\n}\n\nfmt.Printf(\"%+v\\n\", p1) // {name:U\u011fur \u00d6zy\u0131lmazel age:46 address:{city:\u0130stanbul country:T\u00fcrkiye}}\n\nfmt.Printf(\"city (promoted): %s\\n\", p1.city) // city: New York\nfmt.Printf(\"city: %s\\n\", p1.address.city)    // city: \u0130stanbul\nfmt.Printf(\"country: %s\\n\", p1.country)      // country: T\u00fcrkiye\n}\n</code></pre> <p>Promote edilen field\u2019lara kolay eri\u015fim olmas\u0131na ra\u011fmen, yeni bir kopya (instance) \u00e7\u0131kar\u0131laca\u011f\u0131 zaman, a\u00e7\u0131k a\u00e7\u0131k g\u00f6m\u00fcl\u00fc struct ve alanlar\u0131n\u0131 yazmak gerekir. Yani <code>p1.city</code> ile ula\u015f\u0131r\u0131z ama <code>p1.city = ...</code> \u015feklinde bir ifade yazamay\u0131z.</p> <p>Peki bir \u015fekilde bu alanlar\u0131n baz\u0131lar\u0131n\u0131 eri\u015fime a\u00e7mak kapamak gerekse? </p> <p>Nesne y\u00f6nelimli dillerin s\u0131n\u0131f konusunda bahsi \u00e7ok\u00e7a ge\u00e7en public/private access control yani s\u0131n\u0131f\u0131n d\u0131\u015f\u0131ndan ya da i\u00e7inde eri\u015filenler... Unutmayal\u0131m ki go\u2019da s\u0131n\u0131f kavram\u0131 yok, composition yani birle\u015fme/kompozisyon mant\u0131\u011f\u0131 var.</p> <p>Dersin ba\u015f\u0131nda <code>fmt.Println</code> fonksiyonundan bahsederken Exportable kavram\u0131na hafif\u00e7e dokunmu\u015ftuk. Go, de\u011fi\u015fken/sabit/fonksiyon/alan gibi her ne tan\u0131ml\u0131yorsan\u0131z, e\u011fer B\u00fcy\u00fck harfle ba\u015flam\u0131\u015fsa bu d\u0131\u015far\u0131dan eri\u015filebilir anlam\u0131na geliyordu.</p> <p>\u00d6rne\u011fin <code>import \"fmt\"</code> diyoruz ve <code>fmt.Println(\"Hello\")</code> dedi\u011fimizde, ad\u0131 <code>fmt</code> olan bir paketi yani ilk sat\u0131r\u0131nda <code>package fmt</code> yazan paketi i\u00e7eri al\u0131yoruz ve <code>Println</code>\u2019\u0131n <code>P</code>\u2019si b\u00fcy\u00fck oldu\u011fu i\u00e7in bu fonksiyonu \u00e7a\u011f\u0131rabiliyoruz.</p> <p>E\u011fer biz <code>person</code> diye bir paket yap\u0131yor olsayd\u0131k;</p> <pre><code>package person\n\n// Person represents the Person model\ntype Person struct {\nFirstName string // Exportable\nLastName  string // Exportable\nsecret    string // Unexportable (private)\n}\n</code></pre> <p>ve ba\u015fka bir paketten <code>person</code> paketini <code>import</code> edip kullansak, \u00f6rnek kod;</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access/person\"\n)\n\nfunc main() {\np := person.Person{} // bo\u015f bir kopya (instance)\n\np.FirstName = \"U\u011fur\"\np.LastName = \"\u00d6zy\u0131lmazel\"\n\nfmt.Printf(\"p: %#v\\n\", p) // p: person.Person{FirstName:\"U\u011fur\", LastName:\"\u00d6zy\u0131lmazel\", secret:\"\"}\n\nfmt.Println(p.secret) // p.secret undefined (type person.Person has no field or method secret)\n}\n</code></pre> <p><code>p.secret</code> d\u0131\u015f d\u00fcnyadan eri\u015fime kapal\u0131. <code>secret</code> sadece i\u00e7eriden eri\u015filen bir \u015fey. Bu bak\u0131mdan <code>person</code> paketi i\u00e7inde hem bu <code>secret</code> field\u2019\u0131na atama yapan hem de <code>secret</code>\u2019a eri\u015fmeyi sa\u011flacak bir Getter ve Setter metotlar\u0131na ihtiyac\u0131m\u0131z olacak; \u00f6rnek kod;</p> <p><code>person.go</code></p> <pre><code>package person\n\n// Person represents the Person model.\ntype Person struct {\nFirstName string // Exportable\nLastName  string // Exportable\nsecret    string // Unexportable (private)\n}\n\n// Secret returns private secret field.\nfunc (u Person) Secret() string {\nreturn u.secret\n}\n\n// SetSecret sets private secret value.\nfunc (u *Person) SetSecret(s string) {\nu.secret = s\n}\n</code></pre> <p><code>main.go</code></p> <pre><code>package main\n\nimport (\n\"fmt\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access-getter/person\"\n)\n\nfunc main() {\np := person.Person{} // bo\u015f bir kopya (instance)\n\np.FirstName = \"U\u011fur\"\np.LastName = \"\u00d6zy\u0131lmazel\"\n\nfmt.Printf(\"%+v\\n\", p) // {FirstName:U\u011fur LastName:\u00d6zy\u0131lmazel secret:}\n\np.SetSecret(\"&lt;secret&gt;\")\n\nfmt.Printf(\"%+v\\n\", p)  // {FirstName:U\u011fur LastName:\u00d6zy\u0131lmazel secret:&lt;secret&gt;}\nfmt.Println(p.Secret()) // &lt;secret&gt;\n}\n</code></pre> <p>Struct\u2019lar value type olduklar\u0131 i\u00e7in kar\u015f\u0131la\u015ft\u0131r\u0131labilirler (comparable):</p> <p>https://go.dev/play/p/v8KG2KFp6Xl</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype person struct {\nname string\n}\n\nfunc main() {\np1 := person{\"U\u011fur\"}\np2 := person{\"U\u011fur\"}\n\nfmt.Printf(\"%v\\n\", p1)       // U\u011fur\nfmt.Printf(\"%v\\n\", p2)       // U\u011fur\nfmt.Printf(\"%v\\n\", p1 == p2) // true\n}\n</code></pre> <p>Bu kar\u015f\u0131la\u015ft\u0131rma i\u00e7in alanlar\u0131n tipine de ba\u011fl\u0131d\u0131r, e\u011fer alan tipleri comparable de\u011filse kar\u015f\u0131la\u015ft\u0131rma yap\u0131lamaz:</p> <p>https://go.dev/play/p/vNOLwgPPhnJ</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\ntype image struct {\ndata map[int]int\n}\n\nfunc main() {\nimage1 := image{data: map[int]int{0: 155}}\nimage2 := image{data: map[int]int{0: 155}}\n\nif image1 == image2 {\nfmt.Println(\"image1 and image2 are equal\")\n}\n}\n// invalid operation: image1 == image2 \n// (struct containing map[int]int cannot be compared)\n</code></pre> <p>Son olarak, struct tasarlarken haf\u0131zada kaplayaca\u011f\u0131 yeri de d\u00fc\u015f\u00fcnmemiz gerekebilir. Alanlar\u0131n tiplerinin kaplad\u0131\u011f\u0131 yere g\u00f6re k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe g\u00f6re s\u0131ralama yapmak iyi bir pratiktir:</p> <p>https://go.dev/play/p/Ab2qYHxklau</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"unsafe\"\n)\n\ntype bad struct {\nfield1 bool    // bool -&gt; 1 byte, padding y\u00fcz\u00fcnden 8 byte yedi\nfield2 int64   // int64 -&gt; 8 byte\nfield3 bool    // bool -&gt; 1 byte, padding y\u00fcz\u00fcnden 8 byte yedi\nfield4 float64 // float64 -&gt; 8 byte\n\n// asl\u0131nda 18 byte'l\u0131k yer kaplamas\u0131 laz\u0131mken;\n// 7 + 7 = 14 byte daha geldi\n// 32 byte oldu\n}\n\ntype good struct {\nfield2 int64   // int64 -&gt; 8 byte\nfield4 float64 // int64 -&gt; 8 byte\nfield1 bool    // bool -&gt; 1 byte\nfield3 bool    // bool -&gt; 1 byte\n\n// asl\u0131nda 18 byte'l\u0131k yer kaplamas\u0131 laz\u0131mken;\n// bool'lar\u0131 8'in i\u00e7ine s\u0131\u011fd\u0131rd\u0131 (1+1=2), padding'i sa\u011flamak i\u00e7in 6 byte ekledi\n// 24 byte oldu\n}\n\nfunc main() {\nfmt.Println(unsafe.Sizeof(bad{}), \"bytes\")  // 32 bytes\nfmt.Println(unsafe.Sizeof(good{}), \"bytes\") // 24 bytes\n}\n</code></pre> <p>Her alan i\u00e7in minimum <code>8 byte</code>\u2019l\u0131k blok (chunk) rezerve ediyor. Yetmezse bir 8 daha ekliyor (slice capacity gibi d\u00fc\u015f\u00fcn\u00fcn) e\u011fer 8\u2019den az gelirse 8\u2019e tamaml\u0131yor, buna da padding deniyor.</p> <p>Struct alanlar\u0131n\u0131n ya da bir tipin haf\u0131zada ka\u00e7 byte harcad\u0131\u011f\u0131n\u0131 <code>unsafe</code> paketini kullanarak bulabilirsiniz:</p> <p>https://go.dev/play/p/1LtOv0__law</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"unsafe\"\n)\n\ntype user struct {\nemail    string\nisActive bool\n}\n\nfunc main() {\nvar a []int\nvar b string\n\nu := user{} // yeni bir user instance\n\nfmt.Println(unsafe.Sizeof(a))          // 24 byte\nfmt.Println(unsafe.Sizeof(b))          // 16 byte\nfmt.Println(unsafe.Sizeof(u.isActive)) // 1 byte\n}\n</code></pre> <p>Go bu i\u015fi kolay \u00e7\u00f6zmek i\u00e7in bir tool yay\u0131nlad\u0131: <code>fieldalignment</code></p> <pre><code>go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest\n</code></pre> <p>Kurulumu yapt\u0131ktan sonra, e\u011fitim projesi alt\u0131ndan;</p> <pre><code>$ cd /path/to/maoyyk2023-golang-101-kursu/\n$ fieldalignment src/04/05-struct-field-alignment/main.go\nmain.go:6:10: struct of size 56 could be 48\n</code></pre> <p>Dosyan\u0131n \u00fczerine yazarak otomatik d\u00fczeltme yapmak i\u00e7in;</p> <pre><code>$ fieldalignment -fix src/04/05-struct-field-alignment/main.go  # main.go dosyas\u0131n\u0131 de\u011fi\u015ftirir\n</code></pre> <p>\u015eu struct:</p> <pre><code>type Bad struct {\nField1 bool    // 1 (+7) = 8\nField2 int64   // 8\nField3 bool    // 1 (+7) = 8\nField4 float64 // 8\nField5 []bool  // 24\n// 8 + 8 + 8 + 24 = 56\n}\n</code></pre> <p>D\u00fczenleme sonras\u0131;</p> <pre><code>type Bad struct {\nField5 []bool  // 24\nField2 int64   // 8\nField4 float64 // 8\nField1 bool    // 1 + 1 = 2 (+6) = 8\nField3 bool    // ----^\n// 24 + 8 + 8 + 8 = 48\n}\n</code></pre> <p>\u015feklini ald\u0131. Konu ile ilgili \u015firket blogumuzda bir makale de yay\u0131nlam\u0131\u015ft\u0131k.</p>"},{"location":"04/05-struct/#empty-struct","title":"Empty Struct","text":"<p><code>0</code> byte yer tutan bo\u015f bir struct:</p> <p>https://go.dev/play/p/2b4hMxnuXRM</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"unsafe\"\n)\n\nfunc main() {\na := struct{}{}\n\nfmt.Println(a)                // {}\nfmt.Println(unsafe.Sizeof(a)) // 0\n}\n</code></pre> <p>Nerelerde kullan\u0131r\u0131z?</p> <ul> <li>Concurrency konusunda <code>channel</code> kullan\u0131m\u0131nda</li> <li>Map\u2019de value olarak</li> </ul>"},{"location":"04/06-pointer/","title":"B\u00f6l\u00fcm 04/06: Veri Tipleri","text":""},{"location":"04/06-pointer/#pointer-kavram-anlam-pointer-semantics","title":"Pointer Kavram\u0131 / Anlam\u0131 (Pointer Semantics)","text":"<p>De\u011fi\u015fkenler konusunu i\u015flerken;</p> <p>Nerede bir de\u011fi\u015fken kullan\u0131m\u0131 g\u00f6r\u00fcrseniz mutlaka o de\u011fi\u015fkenin de\u011ferini yani   Value of\u2019unu kulland\u0131\u011f\u0131n\u0131z\u0131 unutmay\u0131n!</p> <p>demi\u015ftik. Biraz daha detaya girersek, go\u2019da bir fonksiyona ge\u00e7ilen arg\u00fcman / parametre mutlaka kopyalanarak g\u00f6nderiliyor;</p> <pre><code>func foo(s string){ ... }\n\nh := \"hello\" foo(h) // &lt;- h\u2019nin bir kopyas\u0131 foo\u2019ya gider.\n</code></pre> <p>Bu konunun terminolojideki ad\u0131 Pass by Value\u2019d\u00fcr. Daha da iyi ispatlamak i\u00e7in k\u00fc\u00e7\u00fck bir \u00f6rnek:</p> <p>https://go.dev/play/p/ahKlWbzPsTU</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc increment(n int) {\nfmt.Println(\"increment\", \"gelen n\", n, \"memory adresi:\", &amp;n)\n// increment gelen n 10 memory adresi: 0x140000a4030\n\nn++\n\nfmt.Println(\"increment\", \"artt\u0131ktan sonra n\", n)\n// increment artt\u0131ktan sonra n 11\n}\n\nfunc main() {\nnum := 10\nfmt.Println(\"num:\", num, \"memory adresi:\", &amp;num)\n// num: 10 memory adresi: 0x1400011a020\n\nincrement(num) // num'\u0131n kopyas\u0131 g\u00f6nderilir\nfmt.Println(\"num:\", num, \"memory adresi:\", &amp;num)\n// num: 10 memory adresi: 0x1400011a020\n}\n</code></pre> <p><code>increment</code> fonksiyonuna <code>num</code>\u2019\u0131 yollad\u0131k, i\u00e7eride de\u011ferin, <code>1</code> artt\u0131rd\u0131k ama <code>num</code> de\u011fi\u015fmedi, \u00e7\u00fcnk\u00fc <code>num</code>\u2019\u0131n kendisi de\u011fil de\u011feri g\u00f6nderildi fonksiyona. Zaten <code>increment</code> fonksiyonu i\u00e7indeki <code>n</code>\u2019in haf\u0131zafaki yeri <code>0x140000a4030</code>, bizim parametre olarak g\u00f6nderdi\u011fimizinki <code>0x1400011a020</code> e\u015fit de\u011filler.</p> <p>Peki, ger\u00e7ekten <code>num</code>\u2019\u0131n de\u011ferini de\u011fi\u015ftirmek zorunda olsak? Fonksiyona <code>num</code>\u2019\u0131n de\u011feri yerine haf\u0131zada durdu\u011fu adresi yollasak? fonksiyon direk haf\u0131zadaki de\u011feri okusa, artt\u0131rsa ve geri yerine yerle\u015ftirse?</p> <p>https://go.dev/play/p/axJq-pjSBza</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc increment(n *int) {\nfmt.Println(\"increment\", \"gelen n\", *n, \"memory adresi:\", n)\n// increment gelen n 10 memory adresi: 0x1400009c010\n\n*n++ // * ile dereferencing yani adresin i\u00e7inde de\u011feri al\n\n/*\n    num := *n // haf\u0131zdan de\u011feri al, ata\n    num++     // bir artt\u0131r\n    *n = num  // haf\u0131zada de\u011ferin durdu\u011fu yerin i\u00e7in num'\u0131 yerle\u015ftir\n    */\n\nfmt.Println(\"increment\", \"artt\u0131ktan sonra n\", *n)\n// increment artt\u0131ktan sonra n 11\n}\n\nfunc main() {\nnum := 10\nfmt.Println(\"num:\", num, \"memory adresi:\", &amp;num)\n// num: 10 memory adresi: 0x1400009c010\n\nincrement(&amp;num) // num'\u0131n haf\u0131zadaki yeri (adresi) g\u00f6nderilir\nfmt.Println(\"num:\", num, \"memory adresi:\", &amp;num)\n// num: 11 memory adresi: 0x1400009c010\n}\n</code></pre> <p>Peki <code>pointer</code> (i\u015faret\u00e7i demek istiyorum ama identifier ile kar\u0131\u015fmas\u0131n diye pointer\u2019la devam ediyorum) ne i\u015fimize yarayacak? Art\u0131lar\u0131 ve eksileri ne?</p> <p>En dikkat edilmesi gereken konu defererencing. \u00c7\u00fcnk\u00fc pointer kabul eden bir fonksiyona arg\u00fcman olarak <code>nil</code> g\u00f6nderebiliriz. E\u011fer pointer bekledi\u011fimiz durumda \"acaba gelen de\u011fer ger\u00e7ekten bir adresi i\u015faret ediyor mu?\" diye bakmazsak uygulamam\u0131z hata verir:</p> <pre><code>invalid memory address or nil pointer dereference\n</code></pre> <p>Hatta \u00f6rnekteki fonksiyonu bak\u0131n nas\u0131l patlat\u0131yoruz:</p> <p>https://go.dev/play/p/q8zupdpeVBb</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc increment(n *int) {\nfmt.Println(\"increment\", \"gelen n\", *n, \"memory adresi:\", n)\n\n*n++ // * ile dereferencing yani adresin i\u00e7inde de\u011feri al\n\nfmt.Println(\"increment\", \"artt\u0131ktan sonra n\", *n)\n}\n\nfunc main() {\nnum := 10\nfmt.Println(\"num:\", num, \"memory adresi:\", &amp;num)\n\nincrement(nil)\n}\n\n// num: 10 memory adresi: 0x1400011a020\n// panic: runtime error: invalid memory address or nil pointer dereference\n// [signal SIGSEGV: segmentation violation code=0x2 addr=0x0 pc=0x10288fc00]\n//\n// goroutine 1 [running]:\n// main.increment(0x0)\n//  untitled:6 +0x60\n// main.main()\n//  untitled:17 +0xcc\n// exit status 2\n</code></pre> <p>Peki ne yapmam\u0131z laz\u0131md\u0131?</p> <p>https://go.dev/play/p/z_S8aPmdBlB</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"log\"\n)\n\nfunc increment(n *int) error {\nif n == nil {\nreturn fmt.Errorf(\"n nil geldi\")\n}\nfmt.Println(\"increment\", \"gelen n\", *n, \"memory adresi:\", n)\n\n*n++ // * ile dereferencing yani adresin i\u00e7inde de\u011feri al\n\nfmt.Println(\"increment\", \"artt\u0131ktan sonra n\", *n)\nreturn nil\n}\n\nfunc main() {\nnum := 10\nfmt.Println(\"num:\", num, \"memory adresi:\", &amp;num)\n\nif err := increment(nil); err != nil {\nlog.Fatal(err)\n}\n}\n// num: 10 memory adresi: 0x1400001a100\n// 2023/08/06 10:43:18 n nil geldi\n// exit status 1\n</code></pre> <p>E\u011fer gelen de\u011fer pointer\u2019sa ve dereferencing yapacaksak mutlaka <code>nil</code> kontrol\u00fc   yapmam\u0131z laz\u0131m</p> <p>Peki nerelerde bu pointer kullan\u0131m\u0131 yapar\u0131z? Elimizde b\u00fcy\u00fck veriler varsa ve bunu bir fonksiyona ge\u00e7memiz gerekiyorsa, o kocaman veriyi fonksiyona ge\u00e7mek yerine verinin haf\u0131zadaki adresini pas ediyoruz. Neticede o veri haf\u0131zada bir yere yerle\u015fti. Veritaban\u0131ndan gelen sorguda 500 kay\u0131t d\u00f6n\u00fcyor, her kay\u0131t 10 kilobyte olsa yakla\u015f\u0131k 5 Megabyte veri var haf\u0131zada. Bunu pass by value olarak yollarsak bir 5 Megabyte daha harcamak yerine, haf\u0131zadaki adresini veriyoruz.</p> <p>JSON konusunda da kullan\u0131m \u015fekillerini g\u00f6rece\u011fiz. Unutmayal\u0131m;</p> <ul> <li>E\u011fer haf\u0131zadaki veriyi payla\u015facaksak (database \u00f6rne\u011findeki gibi) kullanal\u0131m</li> <li>Opsiyonel arg\u00fcman (e\u011fer nil gelirse pas ge\u00e7) almak gerekirse kullanal\u0131m</li> <li><code>*</code> operat\u00f6r\u00fc ile adresin i\u00e7indeki de\u011feri al\u0131r\u0131z</li> <li>De\u011fi\u015fkeni bir kutu gibi d\u00fc\u015f\u00fcn\u00fcp, kutunun i\u00e7indeki \u015fey value of, kutunun   durdu\u011fu yer de address of</li> </ul> <p>Pointer konusu taaaa 1984\u2019deki Commodore 64\u2019te bile var. Commodore 64\u2019\u00fcn metin ekran haf\u0131za adresi <code>$0400</code>\u2019den ba\u015fl\u0131yor. Bunu <code>&amp;memory</code> gibi d\u00fc\u015f\u00fcn\u00fcn, de\u011feri haf\u0131za adresi. <code>$0400</code>\u2019\u00fcn i\u00e7inde bulunan value\u2019lar\u0131 monit\u00f6r program\u0131 yard\u0131m\u0131yla de\u011fi\u015ftiriyoruz yani <code>*memory =</code> gibi...</p> <p></p>"},{"location":"04/07-struct-methods-receivers/","title":"B\u00f6l\u00fcm 04/07: Veri Tipleri","text":""},{"location":"04/07-struct-methods-receivers/#struct-methods-ve-receivers","title":"Struct Methods ve Receivers","text":"<p>\u015eimdi daireyi ifade eden bir <code>struct</code>\u2019\u0131m\u0131z olsun, alanlar\u0131 da <code>x</code> ve <code>y</code> koordinatlar\u0131 ile yar\u0131\u00e7ap\u0131 <code>r</code> olsun;</p> <pre><code>type Circle struct {\nx, y, r float64\n}\n</code></pre> <p>Dairenin alan\u0131n\u0131 bulmak i\u00e7in <code>\ud835\udfb9 * r * r</code> yapmam\u0131z gerekiyor. Bunun i\u00e7in bir fonksiyon yazaca\u011f\u0131z, arg\u00fcman olarak <code>Circle</code> tipinde bir girdi alacak, bize sonucu d\u00f6necek;</p> <p>https://go.dev/play/p/tYc_W5HX2ei</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"math\"\n)\n\ntype Circle struct {\nx, y, r float64\n}\n\nfunc area(c Circle) float64 {\nreturn math.Pi * c.r * c.r\n}\n\nfunc main() {\ncircle := Circle{0, 0, 5}\nresult := area(circle)\n\nfmt.Printf(\"%v\\n\", result) // 78.53981633974483\n}\n</code></pre> <p>Halbuki bu i\u015flemi, <code>Circle</code> struct\u2019\u0131na bir method olarak takabilseydik?</p> <p>https://go.dev/play/p/LKuNk71sl6v</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"math\"\n)\n\ntype Circle struct {\nx, y, r float64\n}\n\nfunc (c Circle) area() float64 {\nreturn math.Pi * c.r * c.r\n}\n\nfunc main() {\ncircle := Circle{0, 0, 5}\nresult := circle.area()\n\nfmt.Printf(\"%v\\n\", result) // 78.53981633974483\n}\n</code></pre> <p><code>area()</code>, <code>Circle</code> struct\u2019\u0131na ait metot (method) oluyor. <code>(c Circle)</code> ise al\u0131c\u0131 (receiver) oluyor. <code>Circle</code>\u2019\u0131n kendisine <code>c</code> \u00fczerinden eri\u015fiyoruz. <code>area()</code> sadece i\u00e7eriden veri okudu\u011fu i\u00e7in, yani read-only oldu\u011fu i\u00e7in value receiver oluyor.</p> <p>E\u011fer <code>Circle</code>\u2019\u0131n alanlar\u0131n\u0131n de\u011ferlerinde de\u011fi\u015fiklik yapmak gerekseydi, \u00f6rne\u011fin yar\u0131 \u00e7ap\u0131 2 kat\u0131na \u00e7\u0131karan bir i\u015f gerekseydi, o zaman yazma i\u015flemi de yapmam\u0131z gerekecekti, bu durumda pointer receiver kullanmam\u0131z gerekiyor:</p> <p>https://go.dev/play/p/YKFDt2wJnJX</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"math\"\n)\n\ntype Circle struct {\nx, y, r float64\n}\n\nfunc (c Circle) area() float64 {\nreturn math.Pi * c.r * c.r\n}\n\nfunc (c *Circle) rDoubler() {\nc.r *= 2\n}\n\nfunc main() {\ncircle := Circle{0, 0, 5}\nresult := circle.area()\nfmt.Printf(\"%v\\n\", result) // 78.53981633974483\n\ncircle.rDoubler()\nfmt.Println(circle.area()) // 314.1592653589793\n}\n</code></pre> <ul> <li>E\u011fer struct\u2019a ait alanlarda (field/property) de\u011fi\u015fiklik yapacaksak pointer receiver</li> <li>Sadece de\u011fer okuyup i\u015flem yapacaksak value receiever</li> <li>E\u011ferki sadece bir metot pointer receiver bile olacaksa t\u00fcm metotlar\u0131 pointer receiver olarak   tan\u0131mlamak</li> </ul> <p>iyi pratiklerdendir. \u0130yi bir go struct metotlar\u0131nda tek tip receiver olur.</p>"},{"location":"04/08-map/","title":"B\u00f6l\u00fcm 04/08: Veri Tipleri","text":"<p>https://go.dev/blog/maps</p>"},{"location":"04/08-map/#map","title":"Map","text":"<p><code>key=value</code> \u00e7iftleri \u015feklinde i\u00e7inde veri tuttu\u011fumuz, key ekleme, \u00e7\u0131kartma ve silme yapabildi\u011fimiz bir veri tipidir. Python\u2019daki <code>dict</code> ya da Ruby\u2019deki <code>Hash</code> ya da Php\u2019deki <code>Associative Array</code> gibi d\u00fc\u015f\u00fcn\u00fclebilir. Key \u00fczerinden value\u2019ya ula\u015fmak <code>O(1)</code> karma\u015f\u0131kl\u0131\u011f\u0131ndad\u0131r (complexity) yani \u00e7ok h\u0131zl\u0131d\u0131r.</p> <ul> <li>Hash table algoritmas\u0131n\u0131 kullan\u0131r.</li> <li>Ekleme, \u00e7\u0131kartma (silme), okuma <code>O(1)</code> karma\u015f\u0131kl\u0131\u011f\u0131ndad\u0131r. Sadece ekleme   i\u015flemi amortized karma\u015f\u0131kl\u0131k algoritmas\u0131 kullan\u0131r.</li> <li>Key/Value \u00e7iftleri s\u0131ralanmadan (un-ordered) \u015fekilde tutulur</li> <li>Key\u2019ler e\u015fsizdir (unique), bir map\u2019te ayn\u0131 key\u2019den sadece bir tane olur</li> <li><code>make</code> fonksiyonu ile map literal (map kal\u0131b\u0131) \u00fcretilir, haf\u0131zaya   yerle\u015ftirilir, initialize olur</li> <li>map\u2019lerin initialize de\u011feri <code>nil</code> olur, <code>nil</code> olan map\u2019e key eklenemez!</li> <li><code>len</code> bize key/value \u00e7iftinin uzunlu\u011funu verir</li> <li>map <code>nil</code> mi diye bak\u0131labilir</li> <li>map\u2019leri birbiriyle k\u0131yaslamak i\u00e7in <code>reflection.DeepEqual</code> fonksiyonu kullan\u0131l\u0131r.</li> </ul> <p>https://go.dev/play/p/X7zOWsYTuyA</p> <pre><code>package main\n\nimport \"fmt\"\n\nvar m map[string]int // nil map, key\u2019i string, value\u2019su int...\n\nfunc main() {\nfmt.Println(m, len(m)) // map[] 0\n// m[\"foo\"] = 5 // panic: assignment to entry in nil map\n\nm = make(map[string]int)\nm[\"foo\"] = 5\nfmt.Println(m, len(m)) // map[foo:5] 1\n}\n</code></pre> <p><code>map</code> alan fonksiyona <code>nil</code> ge\u00e7ebiliriz, key var m\u0131? yok mu ? bakabiliriz:</p> <p>https://go.dev/play/p/difVbLWsdCr</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype myMap map[string]string // key: string, value: string\n\nfunc printMap(m myMap) {\nfmt.Printf(\"%+v\\n\", m)\n}\n\nfunc main() {\nprintMap(nil) // map[]\n\nm := myMap{\n\"username\": \"vigo\",\n}\n\nprintMap(m)                // map[username:vigo]\nfmt.Println(m[\"username\"]) // vigo\nfmt.Println(m[\"foo\"])      //\n\nval, ok := m[\"foo\"]\nfmt.Println(\"ok\", ok)   // ok false\nfmt.Println(\"val\", val) // val\n}\n</code></pre> <p>Ekleme, \u00e7\u0131karma ve hatal\u0131 i\u015flemler \u00f6rne\u011fi:</p> <p>https://go.dev/play/p/YhkzsWMBGBI</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nm1 := map[string]int{\n\"ocak\":  1,\n\"\u015fubat\": 2,\n}\n\nvar m2 map[string]int\nm2 = make(map[string]int)\nm2[\"ocak\"] = 1\nm2[\"\u015fubat\"] = 2\n\nfmt.Println(m1) // map[ocak:1 \u015fubat:2]\nfmt.Println(m2) // map[ocak:1 \u015fubat:2]\n\n// fmt.Println(m1 == m2)\n// error:\n// invalid operation: m1 == m2 (map can only be compared to nil)\n\nm1[\"mart\"] = 3\nm2[\"mart\"] = 3\n\nfmt.Println(m1) // map[mart:3 ocak:1 \u015fubat:2]\nfmt.Println(m2) // map[mart:3 ocak:1 \u015fubat:2]\n\ndelete(m1, \"mart\") // mart key'ini sil\nfmt.Println(m1)    // map[ocak:1 \u015fubat:2]\n\nfor k, v := range m2 {\nfmt.Println(\"key\", k, \"-&gt;\", v)\n}\n// key ocak -&gt; 1\n// key \u015fubat -&gt; 2\n// key mart -&gt; 3\n\n// m1[\"mart\"] = \"ok\"\n// error\n// cannot use \"ok\" (untyped string constant) as int value in assignment\n\n// m1[1] = \"ocak\"\n// error\n// cannot use 1 (untyped int constant) as string value in map index\n// cannot use \"ocak\" (untyped string constant) as int value in assignment\n}\n</code></pre> <p>Ayn\u0131 Array ve Slice\u2019daki gibi kapasite kavram\u0131 <code>map</code> i\u00e7inde var;</p> <p>https://go.dev/play/p/7azH9ymAbvS</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"unsafe\"\n)\n\nfunc main() {\nm1 := make(map[string]int, 10) // Preallocate, 10 tane yer ay\u0131r\nfmt.Printf(\"%#v\\n\", m1)        // map[string]int{}\n\nfmt.Println(len(m1))           // 0\nfmt.Println(unsafe.Sizeof(m1)) // 8 byte\n\nm2 := make(map[string]int)\nfmt.Println(unsafe.Sizeof(m2)) // 8 byte\n}\n</code></pre> <p>Kar\u015f\u0131la\u015ft\u0131rma;</p> <p>https://go.dev/play/p/_XIw23G6bPq</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"reflect\"\n)\n\nfunc main() {\nm1 := make(map[string]int, 10) // Preallocate, 10 tane yer ay\u0131r\nm2 := make(map[string]int)\n\nm1[\"foo\"] = 1\nm2[\"foo\"] = 1\n\nfmt.Println(m1 == nil) // false\nfmt.Println(m2 == nil) // false\n\nfmt.Println(reflect.DeepEqual(m1, m2)) // true\n}\n</code></pre> <p><code>map</code> otomatik olarak referans tipindedir (by ref) ayn\u0131 pointer ve slice\u2019lar gibi:</p> <p>https://go.dev/play/p/VZz6a3Sn_QE</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype myMap map[string]string\n\nfunc modifyMap(m myMap) {\nm[\"foo\"] = \"modified\"\n}\n\nfunc main() {\nvar m myMap\nm = make(myMap)\nm[\"foo\"] = \"bar\"\n\nfmt.Printf(\"initial: %v, memory: %[1]p\\n\", m)\n// initial: map[foo:bar], memory: 0x14000074180\n\nfmt.Println(\"foo:\", m[\"foo\"])\n// foo: bar\nmodifyMap(m)\n\nfmt.Printf(\"modified: %v, memory: %[1]p\\n\", m)\n// modified: map[foo:modified], memory: 0x14000074180\n\nfmt.Println(\"foo:\", m[\"foo\"])\n// foo: modified\n}\n</code></pre> <p>Bazen <code>map</code>\u2019in sadece <code>key</code> k\u0131sm\u0131 bize laz\u0131m olur, <code>value</code> ile i\u015fimiz yoktur. Bu durumda value yerine \u00f6yle bir \u015fey koymal\u0131y\u0131z ki <code>0 byte</code> yer kaplas\u0131n? Bu durumda <code>empty struct</code> tam da arad\u0131\u011f\u0131m\u0131z \u015feydir:</p> <p>https://go.dev/play/p/EUmDBlchY5b</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n// elimizde 100_000 tane isim var\n// acaba d\u0131\u015far\u0131dan gelen isim bizimde var m\u0131?\nm := map[string]struct{}{\n\"u\u011fur\":  {},\n\"erhan\": {},\n\"turbo\": {},\n\"vigo\":  {},\n}\n\nfmt.Println(m)\n// map[erhan:{} turbo:{} u\u011fur:{} vigo:{}]\n\n// u\u011fur var m\u0131?\nif _, ok := m[\"u\u011fur\"]; ok {\nfmt.Println(\"u\u011fur tan\u0131d\u0131\u011f\u0131m\u0131z biri\")\n// u\u011fur tan\u0131d\u0131\u011f\u0131m\u0131z biri\n}\n}\n</code></pre>"},{"location":"04/09-tip-donusturmek/","title":"B\u00f6l\u00fcm 04/09: Veri Tipleri","text":""},{"location":"04/09-tip-donusturmek/#tip-donusturmek","title":"Tip D\u00f6n\u00fc\u015ft\u00fcrmek","text":"<p>Type Conversion yani tipleri birbirine d\u00f6n\u00fc\u015ft\u00fcrmek. Ayn\u0131 familyadan t\u00fcreyen tipleri \u00e7evirmek daha kolayken, alakas\u0131z tipleri aras\u0131nda \u00e7evirmek bazen m\u00fcmk\u00fcn de\u011fil. <code>int</code>\u2019i <code>float64</code>\u2019e \u00e7evirmek kolay;</p> <pre><code>var i int = 42\nvar f float64 = float64(i)\n</code></pre> <p>Dikkat ettiyseniz asl\u0131nda tip i\u015faret\u00e7isi (type identifier) olan <code>float64</code> ayn\u0131 bir fonksiyon gibi \u00e7a\u011f\u0131r\u0131labiliyor. \u00d6rnekteki <code>f</code>\u2019i <code>uint</code>\u2019e de \u00e7evirsek;</p> <pre><code>var i int = 42\nvar f float64 = float64(i)\nvar u uint = uint(f)\n\n// ayn\u0131 i\u015fi bu \u015fekilde de yapabiliriz:\ni := 42\nf := float64(i)\nu := uint(f)\n</code></pre> <p>Peki, elimizde say\u0131sal bir de\u011fer var bunu metinsel (string) de\u011fere \u00e7evirmek istiyoruz:</p> <p>https://go.dev/play/p/gZ3Xjujw8UN</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"strconv\"\n)\n\nfunc main() {\ni := 5\n\nvar s string\n\ns = strconv.Itoa(i)          // Integer to Ascii\nfmt.Printf(\"%v, %[1]T\\n\", s) // 5, string\n\n// asl\u0131nda strconv.Itoa bir k\u0131sa yol\ns = strconv.FormatInt(int64(i), 10)\nfmt.Printf(\"%v, %[1]T\\n\", s) // 5, string\n}\n</code></pre> <p>Peki string\u2019i say\u0131ya nas\u0131l \u00e7evirece\u011fiz?</p> <p>https://go.dev/play/p/-1r2gsSTf1i</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"log\"\n\"strconv\"\n)\n\nfunc main() {\ns := \"5\"\nvar i int\n\nn, err := strconv.Atoi(s) // Ascii to integer\nif err != nil {\nlog.Fatal(err) // error'\u00fc ekrana yaz va os.Exit(1)\n}\n\ni = n\nfmt.Printf(\"%v, %[1]T\\n\", i) // 5, int\nfmt.Printf(\"%d, %[1]T\\n\", i) // 5, int\n\n// asl\u0131nda strconv.Atoi bir k\u0131sa yol\n\nii, err := strconv.ParseInt(s, 10, 0)\nif err != nil {\nlog.Fatal(err) // error'\u00fc ekrana yaz va os.Exit(1)\n}\ni = int(ii)\nfmt.Printf(\"%v, %[1]T\\n\", i) // 5, int\nfmt.Printf(\"%d, %[1]T\\n\", i) // 5, int\n}\n</code></pre>"},{"location":"04/09-tip-donusturmek/#type-alias","title":"Type Alias","text":"<p>Kendi olu\u015fturdu\u011fumuz tipler asl\u0131nda varolan (built-in gelen) tiplere bir t\u00fcr k\u0131sa yol. Kod i\u00e7inde uygun tip kontrolleri yapmak, daha az kod yazmak i\u00e7in kullan\u0131l\u0131r:</p> <p>https://go.dev/play/p/pkVgdra5tQQ</p> <pre><code>package main\n\nimport \"fmt\"\n\n// myString'in alt\u0131nda yatan tip built-in string\ntype myString string\n\nfunc greet(s myString) {\nfmt.Println(\"greet:\", s)\n}\n\nfunc main() {\ns := myString(\"hello\")\nss := \"hello\"\n\nfmt.Printf(\"%s, %[1]T\\n\", s)  // hello, main.myString\nfmt.Printf(\"%s, %[1]T\\n\", ss) // hello, string\n\n// fmt.Println(s == ss)\n// error\n// invalid operation: s == ss (mismatched types myString and string)\n\ngreet(s) // greet: hello\n\n// greet(ss)\n// error\n// annot use ss (variable of type string) as myString value in argument to greet\n\n// ss'i yani d\u00fcz string'i myString tipine \u00e7evirdik\ngreet(myString(ss)) // greet: hello\n\nfmt.Println(string(s) == ss)   // true\nfmt.Println(s == myString(ss)) // true\n}\n</code></pre>"},{"location":"05/01-fonksiyonlar/","title":"B\u00f6l\u00fcm 05/01: Fonksiyonlar","text":"<p>Konular i\u00e7inde bu noktaya gelene kadar kabaca fonksiyonlar\u0131 kulland\u0131k. Hem kendimiz yazd\u0131k hem de built-in paket\u2019lerden gelen (<code>fmt.Println</code> gibi) pek \u00e7ok fonksiyonu da \u00e7a\u011f\u0131rd\u0131k.</p> <p>Belirli bir i\u015flevi yerine getiren ve \u00e7a\u011fr\u0131ld\u0131\u011f\u0131nda belirli bir i\u015flemi ger\u00e7ekle\u015ftiren, s\u0131kl\u0131kla \u00e7a\u011f\u0131rana geri sonu\u00e7/sonu\u00e7lar d\u00f6nen kod bloklar\u0131d\u0131r fonksiyonlar. Go\u2019daki fonksiyonlar\u0131n karakteristik \u00f6zellikleri neler?</p> <ul> <li>first class citizen yani fonksiyon tip olabilir, ba\u015fka bir fonksiyona   arg\u00fcman olarak ge\u00e7ilebilir.</li> <li>Anonim olabilirler (closures)</li> <li>Slice ya da Map\u2019in eleman\u0131, key\u2019i value\u2019su olabilirler</li> <li>Bir struct\u2019\u0131n alan\u0131 (field\u2019\u0131) olabilirler</li> <li>Channel\u2019larda send/receive parametresi olabilirler</li> <li>Fonksiyon i\u00e7inde anonim fonksiyonlar olabilir</li> <li>Sadece paket kapsam\u0131nda ya\u015farlar (package scope)</li> </ul>"},{"location":"05/01-fonksiyonlar/#signature","title":"Signature","text":"<p>Fonksiyon imzas\u0131 (function signature) denen \u015fey a\u015fa\u011f\u0131dakiler gibidir:</p> <pre><code>func Do(a string, b int) string {}           // function signature\nfunc Done(x string, y int) (a string) {}     // function signature\n</code></pre>"},{"location":"05/01-fonksiyonlar/#argumanlar","title":"Arg\u00fcmanlar","text":"<p>Fonksiyonlar arg\u00fcmanlar\u0131 (by default) pass by value ile al\u0131rlar. E\u011fer fonksiyon arg\u00fcmanlar\u0131 pointer olarak al\u0131rsa bu durumda pass by reference olurlar.</p> <p>Fonksiyonun ald\u0131\u011f\u0131 ve d\u00f6nd\u00fc\u011f\u00fc parametreler, go\u2019nun type safety yakla\u015f\u0131m\u0131ndan dolay\u0131, mutlaka tan\u0131ml\u0131 tipler olmal\u0131. Yani di\u011fer dinamik dillerdeki (python, ruby, javascript) gibi fonksiyon kafas\u0131na g\u00f6re tipi belli olmayan bir arg\u00fcman alamaz. Son y\u0131llarda g\u00fcvenli tip tan\u0131m\u0131 ruby, python, javascript gibi dillerede gelmeye ba\u015flad\u0131.</p> <p>Otomatik olarak pass by value olarak giden tipler:</p> <ul> <li>say\u0131sallar (numerics)</li> <li>bool</li> <li>array\u2019ler</li> <li>struct\u2019lar</li> </ul> <p>pass by reference olanlar;</p> <ul> <li>pointer</li> <li>string\u2019ler (immutable)</li> <li>slice\u2019lar</li> <li>map\u2019ler</li> <li>channel\u2019lar</li> </ul> <p>Variadics ile, yani N tane arg\u00fcman ge\u00e7me/alma i\u015fleri <code>...</code> ile olur:</p> <p>https://go.dev/play/p/YPbLB5nstXZ</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc greet(names ...string) {\nfor _, name := range names {\nfmt.Println(\"hello\", name, \"!\")\n}\n}\n\nfunc main() {\ngreet(\"vigo\") // hello vigo !\n\ngreet(\"vigo\", \"erhan\")\n// hello vigo !\n// hello erhan !\n\nusers := []string{\"turbo\", \"max\", \"move\"}\ngreet(users...)\n// hello turbo !\n// hello max !\n// hello move !\n}\n</code></pre> <p><code>func greet(names ...string)</code> N tane string al\u0131r, bu <code>names</code>\u2019e atan\u0131r, <code>names</code> art\u0131k bir string slice yani <code>[]string</code> olur. <code>greet(users...)</code> bu durumda da sona eklenen <code>...</code> ile verilen slice fonksiyona <code>greet(users[0], users[1], users[2], ...)</code> gibi pas edilir.</p>"},{"location":"05/01-fonksiyonlar/#return-values","title":"Return Values","text":"<p>Fonksiyon duruma g\u00f6re;</p> <ul> <li>hi\u00e7bir \u015fey d\u00f6nmeye bilir.</li> <li>bir sonu\u00e7 d\u00f6nebilir.</li> <li>N tane sonu\u00e7 d\u00f6nebilir.</li> </ul> <p>Error konusunda da de\u011finece\u011fiz ama s\u0131ras\u0131 gelmi\u015fken bahsedelim, go\u2019da fonksiyon genelde d\u00f6nmesi gereken \u015feyi ve hatay\u0131 d\u00f6ner. Hata (error) go\u2019da \u00f6nemli bir konudur, hatta;</p> <p>Errors are values</p> <p>yani error de bi de\u011ferdir, bu bak\u0131mdan da i\u015flenmesi gerekir. Early exit yakla\u015f\u0131m\u0131yla, fonksiyon hata d\u00f6nd\u00fc\u011f\u00fc an ya exit (\u00e7\u0131k\u0131\u015f) yap\u0131l\u0131r ya da o hata ciddi bir \u015fekilde de\u011ferlendirilir. Kodun ak\u0131\u015f\u0131 hemen kesilmelidir.</p> <p>Bu bak\u0131mdan, go\u2019nun kaynak koduna da bakt\u0131\u011f\u0131n\u0131zda, neredeyse t\u00fcm paket fonksiyonlar\u0131 geriye sonu\u00e7 + error d\u00f6ner:</p> <pre><code>func Print(a ...any) (n int, err error)\nfunc Printf(format string, a ...any) (n int, err error)\nfunc Println(a ...any) (n int, err error)\n\n// ve dahas\u0131\n</code></pre> <p>Hemen bir \u00f6rnek yapal\u0131m:</p> <p>https://go.dev/play/p/O-5Cuz4k0Dp</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"log\"\n)\n\ntype users map[string]struct{}\n\nfunc greetFromMap(u users, name string) (string, error) {\nif _, ok := u[name]; !ok {\nreturn \"\", fmt.Errorf(\"%s not found in map\", name)\n}\nreturn \"hello \" + name, nil\n}\n\nfunc main() {\nu := users{\n\"vigo\": {},\n}\n\ng, err := greetFromMap(u, \"vigo\")\nif err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(g) // hello vigo\n\ng, err = greetFromMap(u, \"lego\")\nif err != nil {\nlog.Fatal(err)\n// 2023/08/06 13:15:10 lego not found in map\n// exit status 1\n}\n\nfmt.Println(g)\n}\n</code></pre>"},{"location":"05/01-fonksiyonlar/#naked-returns-ya-da-named-returns","title":"Naked Returns ya da Named Returns","text":"<p>\u0130yi bir pratik olmamakla birlikte, bazen ismilendirilmi\u015f (named) ya da \u00e7\u0131plak (naked) geri d\u00f6n\u00fc\u015f de\u011ferleri kullan\u0131labilir (return values). Bu tam olarak ne demek? Hemen \u00f6rne\u011fe bakal\u0131m:</p> <p>https://go.dev/play/p/L1CVHUT19VY</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc sum(a, b int) (result int) {\nresult = a + b // buradaki result, (result int)'deki result\nreturn         // geri d\u00f6nen \u015fey ne? aaa pardon (result int)'deki result\n}\n\nfunc main() {\nfmt.Println(sum(1, 2)) // 3\n}\n</code></pre> <p>Fonksiyon imzas\u0131na bak\u0131nca <code>func sum(a, b int) (result int)</code> \u015funu anl\u0131yoruz; Go, fonksiyonu i\u015flemeye ba\u015flarken <code>result</code> diye <code>int</code> tipinde bir de\u011fi\u015fken atamas\u0131 yapacak, sonra bu fonksiyonun i\u00e7inde bir yerlerde (function body) birisi <code>result</code>\u2019\u0131 set edecek (de\u011fer atayacak) en sonda da o atanan de\u011fer geri d\u00f6necek (return).</p> <p>\u0130mza esnas\u0131nda atanan <code>result</code> art\u0131k isimlendirilmi\u015f yani named oluyor. Fonksiyonun sonunda neyin d\u00f6nd\u00fc\u011f\u00fc bilinmeyen <code>return</code> ifadesi de naked oluyor. Fonksiyonun ne d\u00f6nd\u00fc\u011f\u00fcn\u00fc anlamak i\u00e7in s\u00fcrekli imzaya bak\u0131p takip etmek gerekiyor.</p> <p>Konu ile ilgili g\u00fczel bir makale.</p>"},{"location":"05/01-fonksiyonlar/#recursivity","title":"Recursivity","text":"<p>T\u00fcrk\u00e7eye \u00e7evirmeye \u00e7al\u0131\u015f\u0131nca \u00d6zyineleme, \u00d6zyinelemeli fonksiyonlar gibi bir \u00e7eviri buldum internette. Kendi kendini \u00e7a\u011f\u0131rabilme durumuna Recursivity deniyor. Bu t\u00fcr fonksiyonlar da do\u011fal olarak Recursive Functions oluyorlar.</p> <p>Go bu durumu destekliyor; en kli\u015fe \u00f6rnekle devam edelim; fakt\u00f6riyel hesab\u0131:</p> <p>https://go.dev/play/p/l6pS9__0mXp</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc fact(n int) int {\nif n == 0 {\nreturn 1\n}\nreturn n * fact(n-1) // kendini \u00e7a\u011f\u0131rd\u0131.\n}\n\nfunc main() {\nfmt.Println(fact(3)) // 6\n}\n</code></pre>"},{"location":"05/01-fonksiyonlar/#closure","title":"Closure","text":"<p>Bir fonksiyon i\u00e7indeki ba\u015fka bir fonksiyonun, d\u0131\u015far\u0131daki yerel de\u011fi\u015fkenleri de kullanmas\u0131, kendi tan\u0131mland\u0131\u011f\u0131 kapsam\u0131n d\u0131\u015f\u0131ndaki de\u011fi\u015fkenlere eri\u015febilme yetene\u011fi yani closes over yapmas\u0131 durumudur. \u0130\u00e7erideki fonksiyon d\u0131\u015far\u0131daki de\u011fi\u015fkenleri referans olarak al\u0131p kullan\u0131r.</p> <p>https://go.dev/play/p/TT0gtxq6L7U</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc fib() func() int {\na, b := 0, 1\n\n// bu fonksiyon a ve b yi kullanabilir\nreturn func() int {\na, b = b, a+b\nreturn b\n}\n}\n\nfunc main() {\nf := fib()\n\nfor x := f(); x &lt; 100; x = f() {\nfmt.Println(x)\n}\n}\n\n// 1\n// 2\n// 3\n// 5\n// 8\n// 13\n// 21\n// 34\n// 55\n// 89\n</code></pre> <p>Ba\u015fka bir \u00f6rnek;</p> <p>https://go.dev/play/p/gn6O1adOQF-</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc scope() func() int {\nouter_var := 2\nfoo := func() int { return outer_var } // 2\nreturn foo                             // foo fonksiyon olarak d\u00f6nd\u00fc, birinin \u00e7a\u011f\u0131rmas\u0131 laz\u0131m, \u00e7a\u011f\u0131rana 2 d\u00f6ner\n}\n\nfunc main() {\n// asl\u0131nda \"add\" isimli bir fonksiyon tan\u0131m\u0131\nadd := func(a, b int) int {\nreturn a + b\n}\n\nfmt.Println(add(3, 4)) // 7\n\nsc := scope()\n// geriye fonksiyon d\u00f6ner,\n// bu fonksiyon da geriye int d\u00f6ner\n\nfmt.Println(sc()) // 2\n}\n</code></pre>"},{"location":"05/01-fonksiyonlar/#anonim-fonksiyonlar","title":"Anonim Fonksiyonlar","text":"<p>Ad\u0131, imzas\u0131 olmayan fonksiyonlar anonim fonksiyonlard\u0131r:</p> <pre><code>// anonim fonksiyon\nfunc() {\nfmt.Println(\"anonymous\")\n}()\n</code></pre> <p>Vur-ka\u00e7 (fire and forget) durumlar\u0131nda, h\u0131zl\u0131ca \u00e7al\u0131\u015ft\u0131r\u0131p \u00e7\u00f6pe ataca\u011f\u0131m\u0131z fonksiyonlara ihtiya\u00e7 duydu\u011fumuzda, go routine\u2019lerle \u00e7al\u0131\u015f\u0131rken s\u0131kl\u0131kla bu t\u00fcr ifadelere kullanaca\u011f\u0131z.</p>"},{"location":"05/01-fonksiyonlar/#tip-ya-da-arguman-olarak-fonksiyon","title":"Tip ya da Arg\u00fcman olarak Fonksiyon","text":"<p>Birinci s\u0131n\u0131f vatanda\u015f oldu\u011fu i\u00e7in, fonksiyonlar\u0131 type definition mant\u0131\u011f\u0131nda kullanabiliyoruz:</p> <p>https://go.dev/play/p/tiNguGxxvNW</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype GreeterFunc func(string) string\n\nfunc greet(f GreeterFunc, name string) string {\nreturn f(name)\n}\n\nfunc main() {\nfunc1 := func(name string) string {\nreturn \"func1 - \" + name\n}\n\nfunc2 := func(name string) string {\nreturn \"func2 - \" + name\n}\n\nfmt.Println(greet(func1, \"vigo\"))  // func1 - vigo\nfmt.Println(greet(func2, \"erhan\")) // func2 - erhan\n}\n</code></pre> <p><code>greet</code> fonksiyonuna <code>string</code> al\u0131p, <code>string</code> d\u00f6nen herhangi bir fonksiyonu parametre olarak ge\u00e7ebiliriz. <code>type GreeterFunc func(string) string</code> art\u0131k <code>GreeterFunc</code> diye bir type\u2019\u0131m\u0131z var, tipi ne? bir fonksiyon, nas\u0131l bir fonksiyon? <code>string</code> al\u0131p, <code>string</code> d\u00f6nen bir fonksiyon.</p>"},{"location":"05/01-fonksiyonlar/#defer","title":"Defer","text":"<p>Defer kelimesi; tehir etmek geciktirmek anlam\u0131ndad\u0131r. Go\u2019da da ayn\u0131 mant\u0131kla \u00e7al\u0131\u015f\u0131r, Fonksiyon i\u015fini bitirip geri d\u00f6nmeden \u00f6nce (return etmeden \u00f6nce) <code>defer</code> edilenleri \u00e7al\u0131\u015ft\u0131r\u0131r ve \u00e7\u0131kar.</p> <p>https://go.dev/play/p/kAYIa_7Qm0U</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc greet(n string) {\ndefer func() {\nfmt.Println(\"exit - greet\") // 2. exit - greet\n}()\n\nfmt.Println(\"hello \", n)\n}\n\nfunc main() {\ndefer func() {\nfmt.Println(\"exit - main\") // 4. exit - main\n}()\n\ngreet(\"vigo\") // 1. hello  vigo\n\nfmt.Println(\"after greet\") // 3. after greet\n}\n</code></pre> <p><code>defer</code> bize pek \u00e7ok durumda esneklik sa\u011flar. Bir dosya a\u00e7t\u0131k, sonra otomatik kapatmak istiyoruz:</p> <p>https://go.dev/play/p/rHwN9oMOBa-</p> <pre><code>package main\n\nimport (\n\"log\"\n\"os\"\n)\n\nfunc createTempFile() {\nf, err := os.Create(\"/tmp/foo.txt\") // dosyay\u0131 olu\u015ftur\nif err != nil {\nlog.Fatal(err)\n}\n\ndefer f.Close() // fonksiyondan \u00e7\u0131karken dosyay\u0131 kapat!\n}\n\nfunc main() {\ncreateTempFile()\n}\n</code></pre> <p><code>createTempFile</code> exit (return) etmeden \u00f6nce file\u2019\u0131 kapatacakt\u0131r. <code>defer</code> \u00e7a\u011f\u0131r\u0131lana kadar <code>os.Create</code> i\u015flemini bekler. </p> <p><code>defer</code> kullan\u0131rken dikkat edilmesi gereken husus \u015fu; kapsam i\u00e7indeki de\u011fi\u015fkenlerin de\u011ferleri kopyalan\u0131r, bu da bazen yanl\u0131\u015f sonu\u00e7 almam\u0131za neden olur:</p> <p>https://go.dev/play/p/TUsycKzYeDP</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\na := 1\ndefer fmt.Println(\"defer a\", a) // a'n\u0131n de\u011feri 1 kopyaland\u0131\n\na = 100             // a art\u0131k 100\nfmt.Println(\"a\", a) // a 1000\n// e\u011fer defer a = 100'den sonra tan\u0131mlansayd\u0131\n// defer fmt.Println(\"defer a\", a) // 100\n}\n\n// a 100\n// defer a 1\n</code></pre> <p>Fonksiyon <code>return</code> etmeden \u00f6nce <code>inner-scope</code> yani fonksiyon kapsam\u0131 i\u00e7inde bir de\u011fi\u015fkeni de bozabilir:</p> <p>https://go.dev/play/p/Hpbsy_WGRT0</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc do() (a int) {\n// a -&gt; named return\n// \u015fu an allocate edildi, zero-value ald\u0131: 0\n\ndefer func() { a = 100 }() // en son \u00e7al\u0131\u015f\u0131r ve 100 d\u00f6ner\n\na = 1  // a'n\u0131n de\u011feri de\u011fi\u015fti; 1 oldu\nreturn // naked return;\n// defer en son \u00e7al\u0131\u015ft\u0131\u011f\u0131 i\u00e7in a\u2019y\u0131 bozar...\n}\n\nfunc main() {\nfmt.Println(do()) // 100\n}\n</code></pre>"},{"location":"06/01-durum-koontrolleri-if/","title":"B\u00f6l\u00fcm 06/01: Durum Kontrolleri","text":"<p>Go kodu, \u00e7al\u0131\u015f\u0131rken, kod yukar\u0131dan a\u015fa\u011f\u0131 (top to bottom) do\u011fru \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r. Buna sequential execution ya da lineer execution denir.</p> <p>Belli durumlarda ise kontrol yap\u0131lar\u0131 devreye girer ve durum kontrolleri yap\u0131ld\u0131ktan sonra, ilgili durumun sonucuna g\u00f6re hareket edilir.</p> <p>Baz\u0131 durumlarda tekrar eden d\u00f6ng\u00fcler olur (for loops) yine d\u00f6ng\u00fcn\u00fcn biti\u015fine ya da sonsuzlu\u011fa gidi\u015fine g\u00f6re \u00e7al\u0131\u015ft\u0131r\u0131lacak k\u0131s\u0131mlar devreye al\u0131n\u0131r.</p>"},{"location":"06/01-durum-koontrolleri-if/#if-else-else-if","title":"<code>if</code>, <code>else</code>, <code>else if</code>","text":"<p>E\u011fer verilen <code>&lt;CONDITION&gt;</code> (durum) -&gt; <code>true</code> ise; ya da <code>false</code> ise kod ak\u0131\u015f\u0131n\u0131n gidi\u015fat\u0131 belirlenir:</p> <pre><code>// true\nif &lt;CONDITION&gt; {\n...\n}\n\n// false\nif !&lt;CONDITION&gt; {\n...\n}\n</code></pre> <p>E\u011fer <code>&lt;CONDITION&gt;</code> -&gt; <code>true</code> ise \u015funu yap, de\u011filse bunu yap:</p> <pre><code>if &lt;CONDITION&gt; {\n...\n} else {\n....\n}\n</code></pre> <p>E\u011fer <code>&lt;CONDITION&gt;</code> -&gt; <code>A</code> ise \u015funu, e\u011fer <code>&lt;CONDITION&gt;</code> -&gt; <code>B</code> ise bunu, hi\u00e7biri ise \u015funu yap:</p> <pre><code>if &lt;CONDITION&gt; == &lt;A&gt; {\n...\n} else if &lt;CONDITION&gt; == &lt;B&gt;  {\n....\n} else {\n....\n}\n</code></pre>"},{"location":"06/01-durum-koontrolleri-if/#short-if","title":"Short If","text":"<p>Short variable declaration (k\u0131sa de\u011fi\u015fken tan\u0131m\u0131) gibi short if declaration yani k\u0131sa <code>if</code> tan\u0131m\u0131 da yapmak m\u00fcmk\u00fcnd\u00fcr;</p> <pre><code>if &lt;IDENTIFIER&gt; := &lt;FUNCTION-RESULT()&gt;; &lt;IDENTIFIER&gt; != &lt;COMPARE&gt; {\n...\n}\n\n// if err is not nil?\nif err := result(); err != nil { // err sadece {} aras\u0131nda ya\u015far\nlog.Fatal(err.Error())\n}\n// fmt.Println(err) olamaz! hata al\u0131r\u0131z, err diye bir \u015fey yok!\n</code></pre> <p>K\u0131sa tan\u0131mda asl\u0131nda on-the-fly yani o anda bir de\u011fi\u015fken tan\u0131mlamas\u0131 da yapm\u0131\u015f oluyoruz. \u00d6mr\u00fc sadece <code>{}</code> aras\u0131nda ge\u00e7erli olan, initializer dedi\u011fimiz \u015fey. Hatta;</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n// x'i on-the-fly initialize et!\nif x := 100; x == 1001 {\nfmt.Println(\"bu m\u00fcmk\u00fcn de\u011fil!\")\n}\n}\n</code></pre>"},{"location":"06/02-durum-koontrolleri-switch/","title":"B\u00f6l\u00fcm 06/02: Durum Kontrolleri","text":""},{"location":"06/02-durum-koontrolleri-switch/#switch-case-ifadeleri","title":"Switch / Case \u0130fadeleri","text":"<p>Genelde birden fazla \u015feyi <code>if</code>, <code>else</code> ile kontrol etmek yerine <code>switch</code>, <code>case</code> ifadelerini kullan\u0131r\u0131z:</p> <p>https://go.dev/play/p/ghfE9nunfBE</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\noperatingSystem := \"darwin\"\n\nswitch operatingSystem {\ncase \"darwin\":\nfmt.Println(\"Mac OS Hipster\")\n// otomatik olarak case'den \u00e7\u0131kar,\n// durumlar\u0131n birbirine ge\u00e7i\u015fi (fallthrough) varsay\u0131lan olarak kapal\u0131d\u0131r.\ncase \"linux\":\nfmt.Println(\"Linux Geek\")\ndefault:\n// Windows, BSD, ...\nfmt.Println(\"Other\")\n}\n}\n\n// Mac OS Hipster\n</code></pre> <p>ayn\u0131 kodu <code>if</code> ile yazsak:</p> <p>https://go.dev/play/p/yTltrjoqQ66</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\noperatingSystem := \"darwin\"\n\nif operatingSystem == \"darwin\" {\nfmt.Println(\"Mac OS Hipster\")\n} else if operatingSystem == \"linux\" {\nfmt.Println(\"Linux Geek\")\n} else {\n// Windows, BSD, ...\nfmt.Println(\"Other\")\n}\n}\n</code></pre> <p><code>switch</code> deklarasyonu esnas\u0131nda identifier initialization da yap\u0131labilir;</p> <p>https://go.dev/play/p/5Nja9VW1bBx</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"runtime\"\n)\n\nfunc main() {\nswitch os := runtime.GOOS; os {\ncase \"darwin\":\nfmt.Println(\"Mac OS Hipster, your os is\", os)\n// Mac OS Hipster, your os is darwin\ncase \"linux\":\nfmt.Println(\"Linux Geek, your os is\", os)\ndefault:\nfmt.Println(\"Other:\", os)\n}\n// fmt.Println(\"os was\", os)\n// undefined: os\n}\n</code></pre> <p><code>switch os := runtime.GOOS; os {</code> bu noktada <code>os</code> diye bir de\u011fi\u015fken tan\u0131mlad\u0131k, ve <code>switch</code>, <code>case</code> i\u00e7inde kulland\u0131k, \u00f6mr\u00fc k\u0131sa; <code>switch</code> bitiminde art\u0131k <code>os</code> diye bir \u015fey yok. Kapsam\u0131 (scope) limitli.</p> <p>,<code>case</code> i\u00e7inde \u00e7oklu se\u00e7im ya da pas ge\u00e7me i\u015flemi de yap\u0131labilir:</p> <p>https://go.dev/play/p/2yFN0SshvNy</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"runtime\"\n)\n\nfunc main() {\nswitch os := runtime.GOOS; os {\ncase \"darwin\":\nfmt.Println(\"Mac OS Hipster, your os is\", os)\ncase \"commodore\", \"amiga\":\n// not possible!\ncase \"linux\":\nfmt.Println(\"Linux Geek, your os is\", os)\ndefault:\nfmt.Println(\"Other:\", os)\n}\n}\n</code></pre> <p><code>case</code> i\u00e7inde ek kontrol de yap\u0131labilir:</p> <p>https://go.dev/play/p/naDSdGOF3kn</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nnumber := 42\nswitch {\ncase number &lt; 42:\nfmt.Println(\"k\u00fc\u00e7\u00fck\")\ncase number == 42:\nfmt.Println(\"e\u015fit\")\ncase number &gt; 42:\nfmt.Println(\"b\u00fcy\u00fck\")\n}\n}\n// e\u015fit\n</code></pre>"},{"location":"06/03-label-break-goto/","title":"B\u00f6l\u00fcm 06/03: Durum Kontrolleri","text":""},{"location":"06/03-label-break-goto/#label-kullanm","title":"Label Kullan\u0131m\u0131","text":"<p>Kodun ak\u0131\u015f\u0131 i\u00e7inde, ayn\u0131 makine dilindeki <code>jmp</code> (jump) gibi, bir yerden bir yere z\u0131plamak m\u00fcmk\u00fcn:</p> <p>https://go.dev/play/p/LKOJu0advHS</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nswitchStatement:\nswitch 1 {\ncase 1:\nfmt.Println(\"1\") // 1\nfor i := 0; i &lt; 5; i++ {\nbreak switchStatement // daha ilk harekette switchStatement'dan \u00e7\u0131kar ve fmt.Println(\"3\") k\u0131sm\u0131na gider\n}\nfmt.Println(\"2\")\ncase 2:\ndefault:\nfmt.Println(\"default case...\")\n}\nfmt.Println(\"3\") // 3\n}\n\n// 1\n// 3\n</code></pre>"},{"location":"06/03-label-break-goto/#goto-kullanm","title":"<code>goto</code> Kullan\u0131m\u0131","text":"<p>Bilgisayar programlama dillerinin atas\u0131 olan B.A.S.I.C\u2019de oldu\u011fu gibi, belli bir durum oldu\u011funda kodun i\u00e7inde ba\u015fka bir yere gitmeyi sa\u011flar:</p> <p>https://go.dev/play/p/fPIMNugFU-S</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\ni := 0\nStart:\nfmt.Println(i)\nif i &gt; 2 {\ngoto End\n} else {\ni += 1\ngoto Start\n}\nEnd:\n}\n\n// 0\n// 1\n// 2\n// 3\n</code></pre>"},{"location":"07/01-dongu/","title":"B\u00f6l\u00fcm 07/01: D\u00f6ng\u00fcler","text":"<p>D\u00f6ng\u00fc ve iterasyon i\u015fleri i\u00e7in go\u2019da tek bir komut var o da <code>for</code>. Di\u011fer dillerdeki gibi <code>Do - While</code> gibi \u015feyler yok. Otomatik olarak tekrar edilecek \u015feyler i\u00e7in <code>for</code> d\u00f6ng\u00fcs\u00fc kullan\u0131r\u0131z.</p>"},{"location":"07/01-dongu/#c-style","title":"<code>C</code>-Style","text":"<p><code>JavaScript</code> ile u\u011fra\u015fanlar\u0131n yak\u0131ndan tan\u0131d\u0131\u011f\u0131, <code>C</code>\u2019deki d\u00f6ng\u00fc yap\u0131s\u0131 go\u2019da da var, buna explicit control (a\u00e7\u0131k, belirgin) denir:</p> <pre><code>// i sadece {} i\u00e7inde ya\u015far, kapsam (scope)\nfor i := 0; i &lt; 10; i++ {\n// yap\u0131lacak i\u015fler\n}\n</code></pre> <p>\u00dc\u00e7 a\u015famal\u0131 i\u015flem;</p> <ol> <li>initialize; <code>i := 0</code></li> <li>check; <code>i &lt; 10</code></li> <li>augmentation; <code>i++</code> (artt\u0131r, ya da eksilt)</li> </ol>"},{"location":"07/01-dongu/#range","title":"<code>range</code>","text":"<p>\u00d6nceki b\u00f6l\u00fcmlerde de g\u00f6rm\u00fc\u015ft\u00fck, <code>range</code> neredeyse en \u00e7ok kullanaca\u011f\u0131m\u0131z d\u00f6ng\u00fc \u015feklidir. Bu stile implicit control (dahili, gizli) denir. Ranging over yani nelerin i\u00e7inde bu iterasyonlar\u0131 yapabiliriz?</p> <ul> <li>Koleksiyonlar; (Array, Slice, String)</li> <li><code>map</code></li> <li>Channel</li> </ul> <p>\u00d6rne\u011fe bakal\u0131m, index, index + value, blank identifer+value kullan\u0131mlar\u0131:</p> <p>https://go.dev/play/p/BvDqmQzoECi</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nusers := []string{\"vigo\", \"lego\", \"turbo\"} // slice\n\n// ilk de\u011fer her zaman slice'\u0131n index'i\nfor i := range users {\nfmt.Println(\"index\", i)\n}\n// index 0\n// index 1\n// index 2\n\n// index, element durumu;\n// ilk de\u011fer her zaman slice'\u0131n index'i\n// di\u011fer de\u011fer koleksiyondaki element'in o index'deki de\u011feri\nfor i, user := range users {\nfmt.Println(i, user)\n}\n// 0 vigo\n// 1 lego\n// 2 turbo\n\n// blank identifer kullan\u0131m\u0131, ilk de\u011feri yutuyoruz\n// di\u011fer de\u011fer koleksiyondaki element'in o index'deki de\u011feri\nfor _, user := range users {\nfmt.Println(user)\n}\n// vigo\n// lego\n// turbo\n}\n</code></pre> <p><code>_</code> blank identifier ile de\u011feri yutuyoruz, bunu compile time\u2019de g\u00f6rme, kullanma diyoruz. Keza <code>_</code> i\u00e7in untyped, reusable variable placeholder da denir.</p> <p><code>map</code> konusunda de\u011finmi\u015ftik; <code>map</code>\u2019de de <code>range</code> iterasyon yap\u0131yoruz:</p> <p>https://go.dev/play/p/kgj16srGhGx</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nusers := map[string]string{\n\"vigo\":  \"user\",\n\"turbo\": \"admin\",\n\"lego\":  \"superadmin\",\n}\n\n// ilk de\u011fer key\nfor user := range users {\nfmt.Println(user, users[user])\n// key, value\n}\n// vigo user\n// turbo admin\n// lego superadmin\n\n// ilk de\u011fer key\n// sonraki de\u011fer value\nfor user, level := range users {\nfmt.Println(user, level)\n}\n// vigo user\n// turbo admin\n// lego superadmin\n}\n</code></pre> <p>Sonsuz d\u00f6ng\u00fc i\u00e7in;</p> <pre><code>// kontrol durumu yok (omit the condition) ~ while (true) durumu\nfor {\n// yap\u0131lacak i\u015f\n}\n</code></pre>"},{"location":"07/01-dongu/#break-ve-continue","title":"<code>break</code> ve <code>continue</code>","text":"<p>D\u00f6ng\u00fcy\u00fc k\u0131r\u0131p \u00e7\u0131kmak i\u00e7in <code>break</code> kullan\u0131r\u0131z, <code>Do-While</code> bezeri bir d\u00f6ng\u00fc;</p> <p>https://go.dev/play/p/MyM4CYviApA</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\ni := 0\nfor {\nfmt.Println(\"i\", i)\ni++\nif i &gt; 5 {\nbreak\n}\n}\nfmt.Println(\"i'nin son de\u011feri\", i)\n// i for-loop'dan \u00f6nce initialize edildi\u011fi i\u00e7in\n// bu noktada eri\u015filebilir...\n}\n\n// i 0\n// i 1\n// i 2\n// i 3\n// i 4\n// i 5\n// i'nin son de\u011feri 6\n</code></pre> <p>D\u00f6ng\u00fc esnas\u0131nda belli durumlar\u0131 pas ge\u00e7mek i\u00e7in, bir sonraki iterasyona ge\u00e7mek i\u00e7in <code>continue</code> kullan\u0131r\u0131z:</p> <p>https://go.dev/play/p/y3DkERb_t-n</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nfor i := 0; i &lt; 4; i++ {\n// e\u011fer i 2'ye e\u015fitse sonraki iterasyona ge\u00e7\nif i == 2 {\ncontinue\n}\nfmt.Println(i)\n}\n}\n// 0\n// 1\n// 3\n</code></pre>"},{"location":"07/01-dongu/#for-ve-kosul","title":"<code>for</code> ve Ko\u015ful","text":"<p><code>for</code> tan\u0131m\u0131 yaparken ko\u015ful da verebiliriz:</p> <p>https://go.dev/play/p/cDFY7r5b2rA</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nsum := 1\n\n// bu d\u00f6ng\u00fc, sum 6'dan k\u00fc\u00e7\u00fck oldu\u011fu s\u00fcrece \u00e7al\u0131\u015f\u0131r\nfor sum &lt; 6 {\nfmt.Println(sum)\nsum += sum\n}\nfmt.Println(sum)\n}\n// 1\n// 2 (1+1)\n// 4 (2+2)\n// 8 (4+4)\n</code></pre>"},{"location":"07/01-dongu/#label-kullanm","title":"Label Kullan\u0131m\u0131","text":"<p>Ayn\u0131 <code>switch</code>, <code>case</code>\u2019de oldu\u011fu gibi, belli bir durum/ko\u015fulda \u00e7\u0131k\u0131\u015f yapaca\u011f\u0131m\u0131z yeri g\u00f6sterebiliriz:</p> <p>https://go.dev/play/p/hUziRABXmit</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nouter: // label, en d\u0131\u015f katman\nfor i := 0; i &lt; 10; i++ {\nfor j := 0; j &lt; 3; j++ {\nfmt.Println(i, j)\nif j == 2 {\nbreak outer // loop'tan komple \u00e7\u0131k\n}\n}\n}\n}\n\n// 0 0\n// 0 1\n// 0 2\n</code></pre>"},{"location":"08/01-interface/","title":"B\u00f6l\u00fcm 08/01: <code>interface</code>","text":"<p>Go\u2019nun en \u00f6nemli konular\u0131 nedir diye sorsan\u0131z cevap olarak iki konu var derim:</p> <ol> <li>Interface</li> <li>Concurrency</li> </ol> <p>Bir i\u015fin nas\u0131l yap\u0131laca\u011f\u0131n\u0131, bir davran\u0131\u015f\u0131 belirleyen \u015feydir <code>interface</code>. Yazd\u0131\u011f\u0131m\u0131z kodu test edebilmek i\u00e7in <code>interface</code>\u2019lere ihtiya\u00e7 duyar\u0131z.</p> <p>Hemen k\u00fc\u00e7\u00fck bir \u00f6rnek yapal\u0131m. type definition konusunu g\u00f6rd\u00fck;</p> <pre><code>package main\n\nimport \"fmt\"\n\n// Status represents custom status.\ntype Status string\n\n// Custom status codes.\nconst (\nStatusOK    Status = \"OK\"\nStatusERROR Status = \"ERROR\"\n)\n\nfunc main() {\nfmt.Println(StatusOK) // OK\n}\n</code></pre> <p><code>fmt.Print</code> familyas\u0131, verilen \u015feyi print edece\u011fi zaman \u015funa bakar, acaba gelen arg\u00fcman\u0131n tipi, <code>Stringer</code> <code>interface</code>\u2019ini satisfy ediyor mu? Yani; pas edilen tip ne ise, <code>Stringer</code>\u2019da tan\u0131mlanan davran\u0131\u015flardan <code>String()</code> metotuna sahip mi?</p> <pre><code>type Stringer interface {\nString() string\n}\n</code></pre> <p>Herhangi bir tipin <code>Stringer</code>\u2019\u0131 tatmin edebilmesi i\u00e7in, mutlaka <code>String()</code> diye bir metotu olmal\u0131 ver geriye <code>string</code> d\u00f6nmeli. Davran\u0131\u015ftan kastedilen \u015fey bu. Bu bak\u0131mdan <code>interface</code> tan\u0131m\u0131 yap\u0131l\u0131rken mutlaka ilgili <code>interface</code>\u2019in ad\u0131 <code>er</code> eki ile biter (\u0130ngilizce).</p> <pre><code>type error interface {\nError() string\n}\n</code></pre> <p>Her kim ki <code>Error()</code> diye metotu olup geriye <code>string</code> d\u00f6ner, o art\u0131k <code>error</code> olarak kullan\u0131labilir.</p> <pre><code>type Reader interface {\nRead(p []byte) (n int, err error)\n}\n\ntype Writer interface {\nWrite(p []byte) (n int, err error)\n}\n</code></pre> <p>\u00d6rne\u011fe geri d\u00f6nelim, \u015fimdi bizim tipimiz de <code>Stringer</code>\u2019\u0131 tatmin etsin;</p> <p>https://go.dev/play/p/Qxkj_AxtdbA</p> <pre><code>package main\n\nimport \"fmt\"\n\n// Status represents custom status.\ntype Status string\n\nfunc (o Status) String() string {\nreturn \"Status is: \" + string(o)\n}\n\n// Custom status codes.\nconst (\nStatusOK    Status = \"OK\"\nStatusERROR Status = \"ERROR\"\n)\n\nfunc main() {\nfmt.Println(StatusOK) // Status is: OK\n}\n</code></pre>"},{"location":"08/01-interface/#empty-interface","title":"Empty Interface","text":"<p>Rob Pike ne demi\u015fti?</p> <p>Empty interface (interface{}) says nothing</p> <p><code>Reader</code> diye bir <code>interface</code> ismi duydu\u011fumuzda akl\u0131m\u0131za \u015fu gelmeli:</p> <p>Hmmm, demek ki <code>Read</code> diye bir metotu var</p> <p>ya da <code>ReadCloser</code> diye bir <code>interface</code> ismi duydu\u011fumuzda;</p> <p>Kesin <code>Read</code> ve <code>Close</code> diye metotlar\u0131 var</p> <p>Go gelene\u011fi olarak, <code>FooBarer</code> -&gt; <code>ReadCloser</code>, <code>WriteCloser</code> gibi ifade edilir. Birazdan g\u00f6rece\u011fiz, ayn\u0131 struct\u2019lar gibi <code>interface</code>\u2019lerde bir biri i\u00e7ine g\u00f6m\u00fclebiliyor:</p> <pre><code>// FooBarBazer :)\ntype ReadSeekCloser interface {\nReader\nSeeker\nCloser\n}\n</code></pre> <p>Dolay\u0131s\u0131yla, <code>Reader</code> \u015fu \u015fekilde olsa;</p> <pre><code>type Reader interface {}\n</code></pre> <p>Bundan ne anlar\u0131z? Hi\u00e7bir metotu olmayan, bo\u015f bir interface! Bize s\u00f6yledi\u011fi bir \u015fey var m\u0131? bir metot? davran\u0131\u015f? yok... Peki hemen \u015fu soru gelmeli, acaba hangi tipler bu interface\u2019i tatmin (satisfy) edebilir? Cevap t\u00fcm tipler, sonradan tan\u0131ml\u0131 tipler, her \u015fey! Neden? Bu interface\u2019in bize sundu\u011fu, bizim implemente etmemiz (geli\u015ftirmemzi, yazmam\u0131z) gereken hi\u00e7 bir metotu yok!</p> <p>Bo\u015f <code>interface</code> somut bir tip de\u011fildir (concrete type)</p> <p>Go versiyon <code>1.18</code> ile hayat\u0131m\u0131za <code>any</code> diye bir tip girdi, asl\u0131nda;</p> <pre><code>type any = interface{}\n</code></pre> <p>empty interface i\u00e7in syntactic sugar (yani k\u00fc\u00e7\u00fck bir kolayl\u0131k, g\u00fczellik); istersek halen <code>interface{}</code> \u015feklinde de kullanabiliriz.</p> <p>\u015eimdi <code>any</code> ve <code>interface{}</code> kullanarak <code>greet</code> fonksiyonunu tekrar yazal\u0131m:</p> <p>https://go.dev/play/p/86jGL4zv6_T</p> <pre><code>package main\n\nimport \"fmt\"\n\n// t asl\u0131nda tipsiz :) ne gelirse onun i\u00e7in sorun yok\nfunc greet(t interface{}) string {\nreturn fmt.Sprintf(\"merhaba! %v\", t) // t'in value presentation'\u0131\n}\n\n// t asl\u0131nda tipsiz :) ne gelirse onun i\u00e7in sorun yok\nfunc greetAny(t any) string {\nreturn fmt.Sprintf(\"any - merhaba! %v\", t)\n}\n\nfunc main() {\nfmt.Println(greet(\"hello\")) // string\n// merhaba! hello\n\nfmt.Println(greet(1)) // integer\n// merhaba! 1\n\nfmt.Println(greet(3.14)) // float\n// merhaba! 3.14\n\nu := struct {\nname string\n}{\n\"vigo\",\n}\nfmt.Println(greet(u)) // anonymous struct\n// merhaba! {vigo}\n\nfmt.Println(greet([]string{\"hello\"})) // string slice\n// merhaba! [hello]\n\nfmt.Println(greet(nil)) // nil\n// merhaba! &lt;nil&gt;\n\nfmt.Println(greetAny(\"hello\")) // string\n// any - merhaba! hello\n\nfmt.Println(greetAny(1)) // integer\n// any - merhaba! 1\n\nfmt.Println(greetAny(3.14)) // float\n// any - merhaba! 3.14\n\nu2 := struct {\nname string\n}{\n\"vigo\",\n}\nfmt.Println(greetAny(u2)) // anonymous struct\n// any - merhaba! {vigo}\n\nfmt.Println(greetAny([]string{\"hello\"})) // string slice\n// any - merhaba! [hello]\n\nfmt.Println(greetAny(nil)) // nil\n// any - merhaba! &lt;nil&gt;\n}\n</code></pre> <p>\u015eimdi ak\u0131llarda \u015fu soru var:</p> <p>Madem b\u00f6yle bir \u015fans\u0131m\u0131z var, neden s\u00fcrekli tip tan\u0131ml\u0131yoruz?</p> <p>Asl\u0131nda ufak bir hile yap\u0131yoruz. <code>fmt.Sprintf</code> i\u00e7eride <code>reflect</code> paketini kullanarak bir dizi kontroller yap\u0131yor, acaba gelen arg\u00fcman <code>string</code>\u2019e benziyor mu? ya da <code>integer</code>\u2019a uygun mu? bir s\u00fcre kontrolden ge\u00e7iyor ve onun sonucunda \u00e7\u0131kt\u0131y\u0131 g\u00f6r\u00fcyoruz. Bu asl\u0131nda \u00e7ok maliyetli bir i\u015flem:</p>"},{"location":"08/01-interface/#tip-kontrol-mekanizmas","title":"Tip Kontrol Mekanizmas\u0131","text":"<p>https://go.dev/play/p/tILifiOH34j</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"io\"\n\"strings\"\n)\n\ntype (\ncustomInt  int\nfakeString string\n)\n\nfunc printByType(t interface{}) {\n// .(type) sadece switch statement i\u00e7inde \u00e7al\u0131\u015f\u0131r.\nswitch j := t.(type) {\ncase nil:\nfmt.Println(j, \" bu nil\")\ncase int:\nfmt.Println(j, \" bu int\")\ncase customInt:\nfmt.Println(j, \" bu customInt\")\ncase io.Reader:\nfmt.Println(j, \" bu io.Reader\")\ncase string:\nfmt.Println(j, \" bu string\")\ncase bool, rune:\nfmt.Println(j, \" bu bool ya da rune\")\ndefault:\nfmt.Printf(\"%v fikrim yok: %[1]T\\n\", j)\n}\n}\n\nfunc main() {\nprintByType(nil)                        // &lt;nil&gt;  bu nil\nprintByType(1)                          // 1  bu int\nprintByType(3.14)                       // 3.14 fikrim yok: float64\nprintByType(\"hello\")                    // hello  bu string\nprintByType(true)                       // true  bu bool ya da rune\nprintByType('a')                        // 97  bu bool ya da rune\nprintByType(customInt(5))               // 5  bu customInt\nprintByType(strings.NewReader(\"hello\")) // &amp;{hello 0 -1}  bu io.Reader\nprintByType(fakeString(\"hello\"))        // hello fikrim yok: main.fakeString\n}\n</code></pre> <p>\u015eu \u00f6rne\u011fe bakal\u0131m:</p> <p>https://go.dev/play/p/KjajVlJQ-h4</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar i any // interface{}\nfmt.Printf(\"i: %v, %[1]T\\n\", i)\nif i == nil {\nfmt.Println(\"i = nil (nil)\")\n}\n\ni = 1\nfmt.Printf(\"i: %v, %[1]T\\n\", i)\nif i == 1 {\nfmt.Println(\"i = 1 (int)\")\n}\n\ni = \"hello\"\nfmt.Printf(\"i: %v, %[1]T\\n\", i)\nif i == \"hello\" {\nfmt.Println(\"i = hello (string)\")\n}\n\ni = 3.14\nfmt.Printf(\"i: %v, %[1]T\\n\", i)\nif i == 3.14 {\nfmt.Println(\"i = 3.14 (float64)\")\n}\n\nif _, ok := i.(string); ok {\nfmt.Println(\"i string'e cast olur\")\n}\nif _, ok := i.(int); ok {\nfmt.Println(\"i int'e cast olur\")\n}\nif _, ok := i.(float64); ok {\nfmt.Println(\"i float64'e cast olur\")\n}\n}\n</code></pre> <p>Ancak <code>interface{}</code> ya da <code>any</code> olan bir tip\u2019i <code>.(TYPE)</code> y\u00f6ntemiyle ba\u015fka <code>TYPE</code>\u2019a uygun mu de\u011fil mi diye bakabiliriz; buna type assertion denir.</p>"},{"location":"08/01-interface/#satisfying-interface","title":"Satisfying Interface","text":"<p>Yani interface\u2019i tatmin etmek, onun bize s\u00f6yledi\u011fi metotlara sahip olan bir tip \u00fcretmek. Ortada bir interface varsa ve biz onu mutlu etmek istiyorsak mutlaka bize s\u00f6yledi\u011fi t\u00fcm davran\u0131\u015flar\u0131n\u0131 bizim de yapmam\u0131z (implemente etmemiz) gerekir.</p> <p>\u00d6rne\u011fin insanlar konu\u015fabilir, robotlar da. E\u011fer insanlar\u0131n ve robotlar\u0131n <code>Talk()</code> diye bir metotu olursa aralar\u0131nda konu\u015fabilirler? Bizim i\u00e7in konu\u015facak \u015feyin insan ya da robot olmas\u0131n\u0131n bir \u00f6nemi yok, \u00f6nemli olan tek \u015fey <code>Talk()</code> metotu olmas\u0131.</p> <p>Go\u2019daki tek abstract type\u2019d\u0131r (soyut t\u00fcr) <code>interface</code>. Bu da \u015fu demek, direkt olarak kullan\u0131lamazlar ve sadece aray\u00fcz g\u00f6revini \u00fcstlenirler.</p> <p>Yani elektrik prizi, kendisine tak\u0131lan \u015feyin televizyon mu? cep telefonu \u015farj aletimi oldu\u011funu bilmemesi gibi...</p> <p>https://go.dev/play/p/y-nDQb82Xqi</p> <pre><code>package main\n\nimport \"fmt\"\n\n// Positiver defines an interface for positive things.\ntype Positiver interface {\nPositive() bool\n}\n\n// Numero is a custom type definition uses int.\ntype Numero int\n\n// Positive is a method for satisfying Positiver interface.\nfunc (n Numero) Positive() bool {\nreturn n &gt; 0\n}\n\n// Person is a custom type definition uses string.\ntype Person string\n\n// Positive is a method for satisfying Positiver interface.\nfunc (n Person) Positive() bool {\nreturn true\n}\n\n// isPositive accepts an interface which satisfies Positiver interface.\nfunc isPositive(n Positiver) bool {\nreturn n.Positive()\n}\n\nfunc main() {\nn := Numero(5)\nh := Person(\"vigo\")\n\nfmt.Println(n, isPositive(n)) // 5 true\nfmt.Println(h, isPositive(h)) // vigo true\n}\n</code></pre> <p>Uzun laf\u0131n k\u0131sas\u0131, <code>isPositive</code> fonksiyonu, <code>Positiver</code> interface\u2019ini satisfy eden herhangi bir tipi input olarak alabilir:</p> <pre><code>+----------+                 +\n|         /                / |\n|       /  &lt;- method     /   |  object\n|       \\                \\   |\n|         \\                \\ |\n+----------+                 +\ninterface\n</code></pre> <p>\u00d6rne\u011fimizi bir t\u0131k daha geli\u015ftirelim:</p> <p>https://go.dev/play/p/p-J6Dcev_P8</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"strconv\"\n)\n\n// Positiver defines an interface for positive things.\ntype Positiver interface {\nPositive() bool\n}\n\n// Numero is is a custom type definition uses int.\ntype Numero int\n\n// Positive is a method for satisfying Positiver interface.\nfunc (n Numero) Positive() bool {\nreturn n &gt; 0\n}\n\nfunc (n Numero) String() string {\nreturn \"my value is: \" + strconv.Itoa(int(n))\n}\n\n// Person is a custom type definition uses string.\ntype Person string\n\n// Positive is a method for satisfying Positiver interface.\nfunc (n Person) Positive() bool {\nreturn true\n}\n\n// isPositive accepts an interface which satisfiys Positiver interface.\nfunc isPositive(n Positiver) bool {\nreturn n.Positive()\n}\n\nfunc main() {\nn := Numero(5)\nh := Person(\"vigo\")\n\nfmt.Println(n, isPositive(n)) // my value is: 5 true\nfmt.Println(h, isPositive(h)) // vigo true\n}\n</code></pre> <p>Yine built-in gelen <code>Formatter</code> interface\u2019ini mutlu edelim:</p> <pre><code>type Formatter interface {\nFormat(f State, verb rune)\n}\n</code></pre> <p>\u015eimdi kendi tipimiz i\u00e7in \u00f6zel bir g\u00f6sterim ekleyelim:</p> <p>https://go.dev/play/p/zjfW_cXoa-M</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"strconv\"\n)\n\n// Numero is a custom type definition uses int.\ntype Numero int\n\n// String implements Stringer interface.\nfunc (n Numero) String() string {\nreturn strconv.Itoa(int(n))\n}\n\n// Format implements Formatter interface.\nfunc (n Numero) Format(f fmt.State, verb rune) {\nval := n.String() // get string version\nif verb == 81 {   // check if Q passed\nval = \"\\\"\" + val + \"\\\"\" // add quotes\n}\nfmt.Fprint(f, val)\n}\n\nfunc main() {\na := Numero(1)\n\nfmt.Printf(\"number is: %Q\\n\", a) // number is: \"1\"\n}\n</code></pre> <p>D\u00fc\u015f\u00fcn\u00fcn ki bir fonksiyon yazmak istiyorsunuz, fonksiyon bir k\u0131s\u0131m i\u015fler yap\u0131p \u00e7\u0131kt\u0131y\u0131 bir dosyaya yazacak. Test yaparken dosya yerine buffer\u2019a yazmak istiyorsunuz. Bunun i\u00e7in iki farkl\u0131 fonksiyon mu yazmak gerek?</p> <ul> <li><code>func OutputToFile</code></li> <li><code>func OutputToBuffer</code></li> </ul> <p>Yapmam\u0131z gereken, <code>Writer</code> interface\u2019ini sa\u011flayan herhangi bir tip\u2019i arg\u00fcman olarak almak;</p> <pre><code>type Writer interface {\nWrite([]byte) (int, error)\n}\n</code></pre> <p>Yani;</p> <pre><code>func OutputTo(w io.Writer, . . . ) { . . . }\n</code></pre> <p>HTTP server m\u0131 laz\u0131m? Bunun i\u00e7in de bir <code>interface</code> var:</p> <pre><code>type Handler interface {\nServeHTTP(ResponseWriter, *Request)\n}\n</code></pre> <p>Gereken tek \u015fey <code>ServeHTTP</code> metotu olan bir tip, <code>http.ResponseWriter</code>ve <code>http.*Request</code> almas\u0131 yeterli. \u0130\u015fte go\u2019yu g\u00fc\u00e7l\u00fc k\u0131lan en b\u00fcy\u00fck \u00f6zellik bu!</p> <p>Bu konu ile ilgili g\u00fczel bir makale</p> <pre><code>type home struct {}\n\nfunc (h *home) ServeHTTP(w http.ResponseWriter, r *http.Request) {\nw.Write([]byte(\"This is my home page\"))\n}\n</code></pre> <p>Bir interface birden fazla interface\u2019den t\u00fcreyebilir; ayni <code>ReadWriter</code> daki gibi:</p> <pre><code>type Reader interface {\nRead(p []byte) (n int, err error)\n}\n\ntype Writer interface {\nWrite(p []byte) (n int, err error)\n}\n\ntype ReadWriter interface {\nReader\nWriter\n}\n</code></pre> <p>\u00d6rne\u011fin:</p> <p>https://go.dev/play/p/0pNQqYRrdDW</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"io\"\n\"log\"\n\"os\"\n\"strings\"\n)\n\n// readStream accepts io.Reader.\n// this is the: \"accept interface as function argument\" techinque!\nfunc readStream(r io.Reader) (string, error) {\nb := make([]byte, 1024) // 1024 bytes of storage\n\nn, err := r.Read(b)\nif err != nil {\nreturn \"\", fmt.Errorf(\"read stream error: %w\", err)\n}\n// report read bytes\nreturn fmt.Sprintf(\"read %d bytes: %s (%v)\", n, string(b), b[:n]), nil\n}\n\nfunc main() {\ns, err := readStream(strings.NewReader(\"abcde\"))\nif err != nil {\nlog.Fatal(err)\n}\nfmt.Println(\"byte stream read -&gt;\", s)\nfmt.Println()\n\n// read from file\n// run this in bash before running the code!\n// $ echo \"hello\" &gt; /tmp/foo\n\nf, err := os.Open(\"/tmp/foo\")\nif err != nil {\nlog.Fatal(err)\n}\n\ns, err = readStream(f)\nif err != nil {\nlog.Fatal(err)\n}\nfmt.Println(\"file read -&gt;\", s)\n}\n</code></pre> <p>Hep akl\u0131m\u0131zda Rob Pike\u2019\u0131n \u015fu s\u00f6z\u00fc \u00e7\u0131nlamal\u0131:</p> <p>The bigger the interface, the weaker the abstraction.</p> <p>Yani interface ne kadar b\u00fcy\u00fck olursa o kadar \u00e7ok metotu implemente etmek zorunda kalaca\u011f\u0131z. M\u00fcmk\u00fcn mertebe metot say\u0131s\u0131n\u0131 k\u00fc\u00e7\u00fck tutal\u0131m. Ne yaz\u0131k ki bunu ne kadar bilim d\u00fc\u015f\u00fcnsek de, bir rest-api geli\u015ftirdi\u011finizde interface\u2019ler ne yaz\u0131k ki \u00e7ok b\u00fcy\u00fcyor...</p> <p>Mesela \u015f\u00f6yle bir <code>interface</code> var:</p> <pre><code>type MegaCharger interface {\nFoo1(int) int\nFoo2(string) error\nFoo3(bool) bool\nFoo4(float64) (int64, error)\nFoo5([]string) []int\nFoo6()\n}\n</code></pre> <p>T\u00fcm metotlar\u0131 bizim de ilgili tipimizde yazmam\u0131z gerekecek! \u015e\u00f6yle de bir espiri var:</p> <p>Strongest abstraction is the empty interface!</p> <p>Yani en s\u00fcper soyutlama hi\u00e7 metotu olmayan bo\u015f interface\u2019lerdir!</p> <p>Acaba metotlar\u0131n\u0131 yazd\u0131\u011f\u0131n\u0131z, implemente etti\u011finiz interface\u2019i ger\u00e7ekten tam olarak implemente edebildiniz mi? Bunun i\u00e7in Compile Time Proof takti\u011fini kullan\u0131r\u0131z:</p> <p>https://go.dev/play/p/LKFzNddmJ0z</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"io\"\n)\n\n// DemoRW is a fake ReadWriter\ntype DemoRW struct{}\n\nfunc (d DemoRW) Read(p []byte) (n int, err error) {\nreturn 1, nil\n}\n\nfunc (d DemoRW) Write(p []byte) (n int, err error) {\nreturn 1, nil\n}\n\nvar (\n// hepsi ayn\u0131 i\u015fi yapar\n_ io.ReadWriter = (*DemoRW)(nil) // compile time proof, doesn't allocate\n_ io.ReadWriter = &amp;DemoRW{}      // compile time proof, doesn't allocate\n_ io.ReadWriter = new(DemoRW)    // compile time proof, doesn't allocate\n)\n\nfunc checkInterfaceIsReadWriter(v any) bool {\n_, ok := v.(io.ReadWriter)\nreturn ok\n}\n\nfunc main() {\ndrw := &amp;DemoRW{}\n\nfmt.Println(checkInterfaceIsReadWriter(drw)) // true\nfmt.Println(drw.Read([]byte(\"hello\")))       // &lt;nil&gt;\n}\n</code></pre> <p>Unutmayal\u0131m!</p> <ul> <li>Interface\u2019ler kesi\u015fme noktalar\u0131d\u0131r</li> <li>Interface\u2019ler ba\u011f\u0131ml\u0131l\u0131klar\u0131 k\u0131rabilir bozabilirler, iyi belgelendirilmi\u015f olmal\u0131d\u0131rlar</li> </ul> <p>Baz\u0131 faydal\u0131 linkler:</p> <ul> <li>https://www.youtube.com/watch?v=PfQFjOwGGks</li> <li>https://www.youtube.com/watch?v=ak97oH0D6fI</li> <li>http://golang.org/s/using-guru</li> </ul>"},{"location":"09/01-error/","title":"B\u00f6l\u00fcm 09/01: <code>error</code>","text":"<p><code>error</code> standart k\u00fct\u00fcphaneyle gelen bir <code>interface</code> asl\u0131nda:</p> <pre><code>type error interface {\nError() string\n}\n</code></pre> <p>Herhangi bir tip, e\u011fer <code>Error() string</code> metotuna sahipse o art\u0131k go i\u00e7in ger\u00e7ek (valid) bir error de\u011feri olur. Go\u2019da hata mesajlar\u0131 mutlaka  k\u00fc\u00e7\u00fck harfle ba\u015flar!</p>"},{"location":"09/01-error/#custom-error-types","title":"Custom Error Types","text":"<p>Go paketleri i\u00e7inde kendine \u00f6zel bir k\u0131s\u0131m <code>error</code> de\u011ferleri ile gelir. Bizler de geli\u015ftirme yaparken, paketlerimize \u00f6zel <code>error</code> tipleri implemente ederiz.</p> <p>https://go.dev/play/p/nd_kcYA9FAc</p> <pre><code>package main\n\nimport (\n\"errors\"\n\"fmt\"\n)\n\n// MyError is a custom type.\ntype MyError struct {\nMessage string\n}\n\n// Error implements error interface.\nfunc (m MyError) Error() string {\nreturn m.Message\n}\n\n// generateError return an error, a type which implements error interface.\nfunc generateError(s string) error {\nreturn MyError{\nMessage: s,\n}\n}\n\nfunc fakeFunc1() error {\nreturn errors.New(\"this is a fake error\")\n}\n\nfunc fakeFunc2() error {\nreturn MyError{\"this is a fake error\"}\n}\n\nfunc main() {\nif err := generateError(\"this is a test error\"); err != nil {\nfmt.Printf(\"generateError -&gt; %[1]T\\n\", err)\n}\n\nif err := fakeFunc1(); err != nil {\nfmt.Printf(\"fakeFunc1 -&gt; %[1]T\\n\", err)\n}\n\nif err := fakeFunc2(); err != nil {\nfmt.Printf(\"fakeFunc2 -&gt; %[1]T\\n\", err)\n}\n}\n// generateError -&gt; main.MyError\n// fakeFunc1 -&gt; *errors.errorString\n// fakeFunc2 -&gt; main.MyError\n</code></pre> <p>\u0130\u015fte milyon dolarl\u0131k m\u00fclakat sorusu:</p> <p>Neden go\u2019da error kontrol\u00fc <code>nil</code> olup olmad\u0131\u011f\u0131na bak\u0131larak yap\u0131l\u0131r?</p> <p>Neden;</p> <ul> <li><code>true</code> ya da <code>false</code> ?</li> <li><code>== 1</code> ya da <code>== 0</code> ?</li> </ul> <p>Cevab\u0131 sizden bekliyorum :)</p> <p>https://go.dev/play/p/VOE28-nwG88</p> <pre><code>package main\n\nimport \"fmt\"\n\n// errKind is a custom type definition uses int.\ntype errKind int\n\n// create automatic constants with iota.\nconst (\n_              errKind = iota // skip first value, which is 0\ninvalidUser                   // 1\ninvalidRequest                // 2\n)\n\n// customError is a custom for representing error.\ntype customError struct {\nkind errKind\n}\n\n// Error implements error interface.\nfunc (e customError) Error() string {\nswitch e.kind {\ncase invalidUser:\nreturn \"invalid user\"\ncase invalidRequest:\nreturn \"invalid request\"\n}\n\nreturn \"unknown error\"\n}\n\nvar (\nerrInvalidUser    = customError{kind: invalidUser}\nerrInvalidRequest = customError{kind: invalidRequest}\nerrUnknown        = customError{kind: 9999}\n)\n\nfunc checkUser(name string) error {\nswitch name {\ncase \"admin\":\nreturn errInvalidUser\ncase \"hack-attack\":\nreturn errInvalidRequest\ncase \"\":\nreturn errUnknown\n}\n\nreturn nil\n}\n\nfunc main() {\n// err: invalid user , type: main.customError\nif err := checkUser(\"admin\"); err != nil {\nfmt.Printf(\"err: %[1]v , type: %[1]T\\n\", err)\n}\n\n// err: invalid request , type: main.customError\nif err := checkUser(\"hack-attack\"); err != nil {\nfmt.Printf(\"err: %[1]v , type: %[1]T\\n\", err)\n}\n\n// err: unknown error , type: main.customError\nif err := checkUser(\"\"); err != nil {\nfmt.Printf(\"err: %[1]v , type: %[1]T\\n\", err)\n}\n\n// all ok!\nif err := checkUser(\"vigo\"); err != nil {\nfmt.Printf(\"err: %[1]v , type: %[1]T\\n\", err)\n}\n}\n</code></pre>"},{"location":"09/01-error/#wrapping","title":"Wrapping","text":"<p>Kulland\u0131\u011f\u0131m\u0131z paket bize <code>error</code> d\u00f6nd\u00fc, ama biz de mesaja ilave bir k\u0131s\u0131m bilgiler eklemek istiyoruz, bu durumda gelen <code>error</code>\u2019\u00fc kendi mesaj\u0131m\u0131zla wrap ederiz, yani sarmalar\u0131z:</p> <p>https://go.dev/play/p/W53nyqebqDB</p> <pre><code>package main\n\nimport (\n\"errors\"\n\"fmt\"\n\"log\"\n)\n\nvar errUnknown = errors.New(\"unknown error\")\n\n// getUser is a phony function, returns an error.\nfunc getUser() error {\n// do real operations here.\nreturn errUnknown\n}\n\n// getStats is also a fake function, calls getUser and wraps incoming error.\nfunc getStats() error {\nif err := getUser(); err != nil {\nreturn fmt.Errorf(\"getStats has an error: %w\", err)\n}\nreturn nil // all goes ok!\n}\n\nfunc main() {\nif err := getStats(); err != nil {\nlog.Fatal(err) // prints error and calls sys.exit(1)\n}\n}\n\n// 2023/02/10 22:04:14 getStats has an error: unknown error\n// exit status 1\n</code></pre> <p>\u00c7al\u0131\u015fma s\u0131ras\u0131;</p> <ol> <li><code>main</code> \u00e7al\u0131\u015f\u0131r, <code>getStats()</code> \u00e7a\u011f\u0131r\u0131l\u0131r</li> <li><code>getStats()</code> -&gt; <code>getUser()</code> \u00e7a\u011f\u0131r\u0131l\u0131r</li> <li><code>getUser()</code> gerite <code>errUnknown</code> d\u00f6ner: <code>\"unknown error\"</code></li> <li><code>getStats()</code> gelen <code>errUnknown</code> hatas\u0131n\u0131 \u015fu mesajla sarmalar: <code>\"getStats has an error\"</code></li> </ol>"},{"location":"09/01-error/#unwrapping","title":"Unwrapping","text":"<p>Sar\u0131l\u0131 mesaj\u0131 geri sarmak i\u00e7in yani wrap edilmi\u015f <code>error</code>\u2019\u00fc unwrap etmek i\u00e7in kullan\u0131r\u0131z. Az \u00f6nceki \u00f6rne\u011fe ufak bir modifikasyon yapal\u0131m:</p> <pre><code>func main() {\nif err := getStats(); err != nil {\nfmt.Printf(\"err: %q\\n\", err)\nfmt.Printf(\"unwrapped err: %q\\n\", errors.Unwrap(err))\n}\n// err: \"getStats has an error: unknown error\"\n// unwrapped err: \"unknown error\"\n}\n</code></pre> <p><code>errors.Unwrap</code> fonksiyonu bu i\u015flemi yapmam\u0131z\u0131 sa\u011flad\u0131.</p>"},{"location":"09/01-error/#tip-kontrolleri","title":"Tip Kontrolleri","text":"<p>Uygulama \u00e7al\u0131\u015f\u0131rken bir k\u0131s\u0131m hata kontrolleri, geri d\u00f6nen <code>error</code> de\u011ferli kodun do\u011fal ak\u0131\u015f\u0131 i\u00e7inde normal olaylard\u0131r. Baz\u0131 durumlarda d\u00f6nen <code>error</code> tipine g\u00f6re ba\u015fka \u015feyler yapmak gerekir.</p> <p>\u00d6rne\u011fin veritaban\u0131nda kay\u0131t bulunamad\u0131ysa <code>ErrRecordNotFound</code>, kay\u0131t eklerken unique index hatas\u0131 ald\u0131ysak <code>ErrUniqueConstraint</code> gibi hata \u015fekline g\u00f6re farkl\u0131 <code>error</code> de\u011ferleri d\u00f6nmek gerekir.</p> <p>Uygulama bu d\u00f6nen tiplere g\u00f6re isteyene (api consumer ya da client) makul bir bilgi d\u00f6nmelidir. Bazen hatas\u0131na g\u00f6re log\u2019a ekleme ya da pas ge\u00e7me, ya da slack kanal\u0131na mesaj atmak gibi ba\u015fka aksiyonlar da al\u0131nabilir.</p> <p>Bu durunlarda <code>errors.Is</code> ve <code>errors.As</code> yard\u0131m\u0131m\u0131za ko\u015far:</p>"},{"location":"09/01-error/#errorsis","title":"<code>errors.Is</code>","text":"<p>Hatay\u0131 <code>value</code> (de\u011feri) anlam\u0131nda kontrol etmek i\u00e7in kullan\u0131l\u0131r.</p> <p>https://go.dev/play/p/omoy_TntsMQ</p> <pre><code>package main\n\nimport (\n\"errors\"\n\"fmt\"\n\"os\"\n)\n\nvar (\nerrCustom = errors.New(\"custom error\")\n\n// this is an error from standard library.\nerrPath = &amp;os.PathError{\nErr: errors.New(\"path error\"),\n}\n)\n\n// raiseErrors will generate errors.\nfunc raiseErrors(n int) error {\nswitch n {\ncase 1:\nreturn errCustom\ncase 2:\nreturn errPath\ndefault:\nreturn nil\n}\n}\n\nfunc main() {\nif err := raiseErrors(1); err != nil {\nif errors.Is(err, errCustom) {\nfmt.Println(\"err, value is errCustom\")\n} else {\nfmt.Println(\"err, value is %v\", err)\n}\n}\n\nif err := raiseErrors(2); err != nil {\nif errors.Is(err, errPath) {\nfmt.Println(\"err, value is errPath\")\n} else {\nfmt.Println(\"err, value is %v\", err)\n}\n}\n\nif err := raiseErrors(0); err != nil {\nfmt.Println(\"err, value is %v\", err)\n}\n}\n\n// err, value is errCustom\n// err, value is errPath\n</code></pre>"},{"location":"09/01-error/#errorsas","title":"<code>errors.As</code>","text":"<p>Hatay\u0131 <code>type</code> olarak kontrol etmeye yarar.</p> <p>https://go.dev/play/p/JhM3JXdy-15</p> <pre><code>package main\n\nimport (\n\"errors\"\n\"fmt\"\n)\n\n// customError is a custom type definition uses string, will\n// implement error interface.\ntype customError string\n\nfunc (c customError) Error() string {\nreturn string(c)\n}\n\nvar (\nerrSpecial = customError(\"special error\")\nerrOther   = customError(\"other error\")\n)\n\n// errorizer generates fake errors.\nfunc errorizer(n int) error {\nswitch n {\ncase 1:\nreturn errSpecial\ncase 2:\nreturn errOther\ndefault:\nreturn nil\n}\n}\n\nfunc main() {\nif err := errorizer(1); err != nil {\nvar cErr customError\n\nif errors.As(err, &amp;cErr) {\nfmt.Println(\"errSpecial\", cErr == errSpecial)\nfmt.Println(\"errOther\", cErr == errOther)\nfmt.Println()\n}\n}\n\nif err := errorizer(2); err != nil {\nvar cErr customError\n\nif errors.As(err, &amp;cErr) {\nfmt.Println(\"errSpecial\", cErr == errSpecial)\nfmt.Println(\"errOther\", cErr == errOther)\nfmt.Println()\n}\n}\n}\n</code></pre> <p>\u0130lgin\u00e7 olan k\u0131s\u0131m buras\u0131:</p> <pre><code>var cErr customError\nif errors.As(err, &amp;cErr) {\n// ...    \n}\n</code></pre> <p><code>errors.As</code>, <code>err</code> hata zincirinde <code>customError</code>\u2019\u00fc bulmaya \u00e7al\u0131\u015f\u0131r, bulursa <code>cErr</code>\u2019\u00fcn i\u00e7ini set eder ve <code>true</code> d\u00f6ner, bulamazsa <code>false</code> d\u00f6ner. E\u011fer <code>true</code> d\u00f6nm\u00fc\u015fse art\u0131k <code>cErr</code>\u2019de ilgili hatan\u0131n t\u00fcm metotlar\u0131 vs mevcut olur.</p> <p>Dikkat ettiyseniz pointer\u2019\u0131n pointer\u2019\u0131n\u0131 verdik <code>errors.As</code>\u2019e:</p> <pre><code>+------+\n| 0001 | *0010\n+------+\n:\n:\n+------+\n| 0010 | *customError\n+------+\n</code></pre> <p>\u0130lk pointer\u2019dan <code>customError</code>\u2019\u00fcn nereye yerle\u015fti\u011fini buluyor, 2. pointer\u2019\u0131 kullanarak i\u00e7ini dolduruyor.</p> <p>Go\u2019nun doc\u2019undan bir \u00f6rnek:</p> <p>https://go.dev/play/p/gpeCpbUvib_f</p> <pre><code>package main\n\nimport (\n\"errors\"\n\"fmt\"\n\"io/fs\"\n\"os\"\n)\n\n// source from /opt/homebrew/Cellar/go/1.19.5/libexec/src/io/fs/fs.go\n// PathError records an error and the operation and file path that caused it.\n// type PathError struct {\n//  Op   string\n//  Path string\n//  Err  error\n// }\n\nfunc main() {\nif _, err := os.Open(\"non-existing\"); err != nil {\n// fs.PathError is a struct type\n// need to dereference with *\nvar pathError *fs.PathError\n\n// passing pointer of pointer\n// pathError holds address,\n// &amp;pathError is the address of address, errors.As need it!\nif errors.As(err, &amp;pathError) {\nfmt.Println(\"Failed at path:\", pathError.Path)\n} else {\nfmt.Println(err)\n}\n}\n}\n\n// Failed at path: non-existing\n</code></pre>"},{"location":"09/01-error/#panic-ve-recover","title":"<code>panic</code> ve <code>recover</code>","text":"<p><code>panic</code> als\u0131nda sadece geli\u015ftirme yaparken kullan\u0131lmas\u0131 gereken bir built-in fonksiyon. As\u0131l amac\u0131 bize stack trace\u2019i yani hata olu\u015ftu, olu\u015furken s\u0131rs\u0131yla neler \u00e7a\u011f\u0131r\u0131ld\u0131, patlak nerede olu\u015ftu bunu g\u00f6rmemizi sa\u011flar.</p> <p>https://go.dev/play/p/PKHGlDOjL0H</p> <pre><code>package main\n\nimport (\n\"errors\"\n)\n\nfunc main() {\nif err := errors.New(\"err is here\"); err != nil {\npanic(err)\n}\n}\n\n// panic: err is here\n//\n// goroutine 1 [running]:\n// main.main()\n//  untitled:9 +0x54\n// exit status 2\n</code></pre> <p>Hatta Rob Pike derki:</p> <p>Don\u2019t panic</p> <p>Bazen hen\u00fcz yaz\u0131lmam\u0131\u015f, daha sonra yaz\u0131lacak kod i\u00e7in placeholder (yer tutucu) olarak kullan\u0131l\u0131r, metotu yazarken hen\u00fcz kodu planlamad\u0131k ama kodu compile etmek istiyoruz, bu durumlarda da kullan\u0131r\u0131z:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc greet(name string) error {\npanic(\"not implemented\")\n}\n\nfunc main() {\nfmt.Println(\"hello\")\n}\n</code></pre> <p>yukar\u0131daki kod sorunsuz derlenir.</p> <p><code>panic</code> ile ilgili esas s\u0131k\u0131nt\u0131, <code>defer</code> edilen fonksiyonlar \u00e7al\u0131\u015fmaya devam eder, bu sayede <code>recover</code> ile sanki hi\u00e7bir \u015fey olmam\u0131\u015f gibi hayat devam eder:</p> <p>https://go.dev/play/p/fISb2H5TNL_8</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc makePanic() {\npanic(\"oh my god!\")\n}\n\nfunc main() {\ndefer func() {\nif p := recover(); p != nil {\nfmt.Println(\"recover\", p)\n}\n}()\n\nmakePanic()\n}\n\n// recover oh my god!\n</code></pre> <p>Baz\u0131 web framework\u2019leri bu takti\u011fi kullan\u0131r, hatta baz\u0131 k\u00f6t\u00fc tasarlanm\u0131\u015f rest-api servisleri hatay\u0131 tek noktadan y\u00f6netmek i\u00e7in, hatalar\u0131 <code>panic</code> ile yapar ve <code>recover</code> ile yola devam eder. B\u00f6yle yaz\u0131lm\u0131\u015f bir proje i\u00e7indeyseniz mutlaka arkada\u015flar\u0131n\u0131z\u0131 uyar\u0131n.</p> <p><code>panic</code> ve <code>recover</code> sadece geli\u015ftirme esnas\u0131nda kullan\u0131lmal\u0131d\u0131r!</p>"},{"location":"09/01-error/#yaygn-pratikler","title":"Yayg\u0131n Pratikler","text":"<ul> <li>Go\u2019da nesne y\u00f6nelimli dillerde oldu\u011fu gibi exception handling diye bir yakla\u015f\u0131m yoktur</li> <li><code>error</code> bir tip\u2019tir, di\u011fer tipler gibi i\u015flenmelidir</li> <li>Asla <code>error</code>\u2019leri yutmamal\u0131, ignore etmemelidir, m\u00fcmk\u00fcnse hatalar\u0131 <code>_</code> blank identifier\u2019a (linux /dev/null gibi) g\u00f6ndermemek gerekir</li> <li>Her zaman fail fast yakla\u015f\u0131m\u0131 olmal\u0131d\u0131r, <code>error</code> yakaland\u0131\u011f\u0131 an (nil de\u011filse) fonksiyon return etmelidir.</li> <li>Hata mesajlar\u0131 a\u00e7\u0131k ve anla\u015f\u0131l\u0131r olmal\u0131d\u0131r, hangi paketten hangi fonksiyondan geldi\u011fi belirtilmelidir</li> <li>Hata yakaland\u0131\u011f\u0131 zaman bir kere i\u015flenmelidir (handle only once)</li> </ul> <p>https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully</p> <pre><code>func AuthenticateRequest(r *Request) error {\nerr := authenticate(r.User)\nif err != nil {\nreturn err // ??? bu hata kimden geldi? \n}\nreturn nil\n}\n</code></pre> <p>\u015f\u00f6yle olsa;</p> <pre><code>func AuthenticateRequest(r *Request) error {\nerr := authenticate(r.User)\nif err != nil {\nreturn fmt.Errorf(\"authenticate failed: %v\", err) // wrap errors with an extra message\n}\nreturn nil\n}\n</code></pre> <p>Kodu \u015fu \u015fekilde;</p> <pre><code>func Write(w io.Writer, buf []byte) error {\n_, err := w.Write(buf)\nif err != nil {\n// annotated error goes to log file\nlog.Println(\"unable to write:\", err)\n\n// unannotated error returned to caller\nreturn err\n}\nreturn nil\n}\n</code></pre> <p>\u015f\u00f6yle yazmak daha iyidir:</p> <pre><code>func Write(w io.Write, buf []byte) error {\n_, err := w.Write(buf)\nreturn errors.Wrap(err, \"write failed\") // &lt;-- Wrap method from github.com/pkg/errors package\n}\n</code></pre>"},{"location":"10/01-nil/","title":"B\u00f6l\u00fcm 10/01: <code>nil</code>","text":""},{"location":"10/01-nil/#nil","title":"<code>nil</code>","text":"<p><code>nil</code> asl\u0131nda \u00f6n tan\u0131ml\u0131 bir anahtar kelimde de\u011fil (25 anahtar kelimeden biri de\u011fil, <code>break</code>, <code>func</code> vs...) Kendine ait \u00f6zel bir de\u011feri var. Asl\u0131nda <code>nil</code> \u015fu tipler i\u00e7in uninitialized de\u011feridir:</p> <ul> <li>Pointer</li> <li>Interface</li> <li>Map</li> <li>Slice</li> <li>Channel</li> <li>Function</li> </ul> <p>E\u011fer identifier (de\u011fi\u015fken, sabit gibi) de\u011feri <code>nil</code> ise <code>nil</code> o zaman varolur. <code>nil</code>\u2019in tipi yoktur, go ile beraber gelen \u00f6n tan\u0131ml\u0131 bir \u015fey\u2019dir.</p>"},{"location":"10/01-nil/#nerelerde-kullanlr","title":"Nerelerde Kullan\u0131l\u0131r","text":"<ul> <li>pointer alan metot, fonksiyon\u2019da arg\u00fcman ge\u00e7ilmi\u015f mi?</li> <li>struct <code>nil</code> mi?</li> <li>slice <code>nil</code> mi?</li> <li>map <code>nil</code> mi?</li> <li>error <code>nil</code> mi?</li> <li>channel <code>nil</code> mi?</li> </ul> <p>Ne zaman <code>nil</code> olunur?</p> <ul> <li>pointer e\u011fer hi\u00e7bir yere point etmiyorsa</li> <li>slice\u2019\u0131n alt\u0131nda bir Array yoksa (underlying array)</li> <li>map, channel ya da fonksiyon hen\u00fcz initialize edilmemi\u015fse (uninitialized ise)</li> <li>Interface\u2019ler; e\u011fer bo\u015f durumdaysalar ya da zero-value durumundaysalar   ya da herhangi bir tipi kar\u015f\u0131lam\u0131yorlarsa (milyon dolarl\u0131k cevap)</li> </ul>"},{"location":"10/01-nil/#nil-pointer-vs-pointer","title":"<code>nil</code> Pointer vs Pointer","text":"<pre><code>var s *string        // (nil) pointer, not allocated or initialized! points to a string value\nvar ss = new(string) // pointer but initialized, memory allocated, has a zero-value\n</code></pre>"},{"location":"10/01-nil/#nil-as-value-receiver","title":"<code>nil</code> as Value Receiver","text":"<p>https://go.dev/play/p/2NwTWYjudLz</p> <pre><code>package main\n\nimport \"fmt\"\n\n// Numeros is a custom type\ntype Numeros struct {\nnums []int\n}\n\nfunc sum(n ...int) int {\nif len(n) == 0 {\nreturn 0\n}\nreturn sum(n[1:]...) + n[0]\n}\n\nfunc (n *Numeros) Sum() int {\nif n == nil {\nreturn 0\n}\nreturn sum(n.nums...)\n}\n\nfunc main() {\nn1 := Numeros{nums: []int{1, 2, 3}}\nfmt.Println(n1.Sum()) // 6\n\nn2 := Numeros{}\nfmt.Println(n2.Sum()) // 0\n}\n</code></pre>"},{"location":"11/01-generics/","title":"B\u00f6l\u00fcm 11/01: Generics","text":"<p>Generic\u2019ler, programlamada ayn\u0131 kod yap\u0131s\u0131n\u0131 farkl\u0131 veri t\u00fcrleriyle kullanmam\u0131za olanak tan\u0131yan bir yakla\u015f\u0131md\u0131r.</p> <p>Bu, kodun yeniden kullan\u0131labilirli\u011fini art\u0131r\u0131rken, t\u00fcr g\u00fcvenli\u011fini de korur. \u00d6rne\u011fin, <code>array</code> veya <code>slice</code> gibi veri yap\u0131lar\u0131n\u0131 farkl\u0131 veri tipleri i\u00e7in de kullanabiliriz, b\u00f6ylece kod tekrar\u0131n\u0131 \u00f6nleriz ve hatalar\u0131 azalt\u0131r\u0131z.</p> <p>Genel olarak, generic\u2019ler programlama dillerinde daha esnek ve verimli kod yazmam\u0131za olanak sa\u011flar.</p> <p>Go programlama dilinde, ba\u015flang\u0131\u00e7ta generic\u2019ler desteklenmiyordu. Ancak <code>go 1.18</code> s\u00fcr\u00fcm\u00fcyle birlikte, generic programlamay\u0131 destekleyen bir \u00f6zellik olan type parameters (t\u00fcr parametreleri) tan\u0131t\u0131ld\u0131. Bu, go dilinde generic kod yazmay\u0131 m\u00fcmk\u00fcn k\u0131ld\u0131.</p>"},{"location":"11/01-generics/#fonksiyonlarda-genericler","title":"Fonksiyonlarda Generic\u2019ler","text":"<p>Go\u2019da generic fonksiyonlar, fonksiyonun parametrelerinde ve d\u00f6n\u00fc\u015f de\u011ferlerinde t\u00fcr parametreleri kullan\u0131larak tan\u0131mlan\u0131r.</p> <p>\u00d6ncelikle non-generic bir fonksiyonu ele alal\u0131m:</p> <pre><code>func sum(a int, b int) int {\nreturn a + b\n}\n</code></pre> <p>Bu \u015fekilde tan\u0131mlanan fonksiyon, sadece <code>int</code> t\u00fcr\u00fc i\u00e7in \u00e7al\u0131\u015f\u0131r. Bu fonksiyonu <code>float64</code> t\u00fcr\u00fc i\u00e7in kullanmak istedi\u011fimizde, a\u015fa\u011f\u0131daki gibi bir hata al\u0131r\u0131z:</p> <pre><code>func main() {\nfmt.Println(sum(1.2, 2.3))\n}\n// cannot use 1.2 (type float64) as type int in argument to add\n</code></pre> <p>Bunun i\u00e7in <code>float64</code> t\u00fcr\u00fc i\u00e7in ayr\u0131 bir fonksiyon tan\u0131mlamam\u0131z gerekir:</p> <pre><code>func sumFloat(a float64, b float64) float64 {\nreturn a + b\n}\n</code></pre> <p>Bu, kod tekrar\u0131na neden olur ve hata ay\u0131klamay\u0131 zorla\u015ft\u0131r\u0131r. Bu sorunu \u00e7\u00f6zmek i\u00e7in, fonksiyonu generic olarak tan\u0131mlayabiliriz:</p> <pre><code>//       T type parameter, can be int or float64\nfunc sum[T int | float64](a T, b T) T {\nreturn a + b\n}\n</code></pre> <p>Bu \u015fekilde tan\u0131mlanan fonksiyon, <code>int</code> veya <code>float64</code> t\u00fcr\u00fc i\u00e7in \u00e7al\u0131\u015f\u0131r. </p> <p>https://go.dev/play/p/aEoTFQBln_Q</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc sum[T int | float64](a T, b T) T {\nreturn a + b\n}\n\nfunc main() {\nfmt.Println(sum(1, 2))     // 3\nfmt.Println(sum(1.2, 2.3)) // 3.5\n}\n</code></pre> <p>Ama bu \u015fekilde tan\u0131mlanan fonksiyonlarda <code>T</code> i\u00e7in b\u00fct\u00fcn tipleri eklememiz gerekir. Bu da fonksiyonun okunabilirli\u011fini azalt\u0131r.</p> <p>\u00d6rnek olarak, fonksiyon \u015fu hale gelir:</p> <pre><code>func sum[T int | int8 | int16 | float32 | float64](a T, b T) T {\nreturn a + b\n}\n</code></pre> <p>Bu sorunu \u00e7\u00f6zmek i\u00e7in bir <code>interface</code> kullanabiliriz:</p> <p>https://go.dev/play/p/dMFFc30TJH_t</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype number interface {\nint | int8 | int16 | float32 | float64\n}\n\nfunc sum[T number](a T, b T) T {\nreturn a + b\n}\n\nfunc main() {\nfmt.Println(sum(int8(10), int8(2)))   // 12\nfmt.Println(sum(int16(10), int16(2))) // 12\nfmt.Println(sum(1, 2))                // 3\nfmt.Println(sum(1.2, 2.3))            // 3.5\n}\n</code></pre> <p>Fakat bu \u015fekilde bir tan\u0131malama yapt\u0131\u011f\u0131m\u0131zda da b\u00fct\u00fcn tipleri interface i\u00e7erisine eklememiz gerekir. Bunun yerine <code>constraints.Ordered</code> <code>interface</code>\u2019ini kullanabiliriz, \u00f6ncelikle paketi projeye ekleyelim:</p> <pre><code>$ go get -u golang.org/x/exp/constraints\n</code></pre> <p>sonra;</p> <p>https://go.dev/play/p/a-AQTFUfZ3T</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\n\"golang.org/x/exp/constraints\"\n)\n\nfunc sum[T constraints.Ordered](a T, b T) T {\nreturn a + b\n}\n\nfunc main() {\nfmt.Println(sum(int8(10), int8(2)))   // 12\nfmt.Println(sum(int16(10), int16(2))) // 12\nfmt.Println(sum(1, 2))                // 3\nfmt.Println(sum(1.2, 2.3))            // 3.5\n}\n</code></pre> <p><code>constraints.Ordered</code> gerekli t\u00fcm <code>Integer | Float | ~string</code> tipleri i\u00e7erir.</p>"},{"location":"11/01-generics/#custom-tiplerde-genericler","title":"Custom tiplerde Generic\u2019ler","text":"<p>\u015eimdi ba\u015fa d\u00f6n\u00fcp tekrar add fonksiyonunu ele alal\u0131m. Bu fonksiyonu, custom bir tipte kullanmak istedi\u011fimizi varsayal\u0131m:</p> <pre><code>type SchoolNumber int\n\nfunc sum[T int](a T, b T) T {\nreturn a + b\n}\n</code></pre> <p>Bu fonksiyonu <code>SchoolNumber</code> t\u00fcr\u00fc i\u00e7in kullanmak istedi\u011fimizde, a\u015fa\u011f\u0131daki gibi bir hata al\u0131r\u0131z:</p> <pre><code>func main() {\nfmt.Println(add(SchoolNumber(1), SchoolNumber(2)))\n}\n// SchoolNumber does not satisfy int (possibly missing ~ for int in int)\n</code></pre> <p>Bu hatan\u0131n nedeni, <code>sum</code> fonksiyonunun parametrelerinin <code>int</code> t\u00fcr\u00fc i\u00e7in tan\u0131mlanm\u0131\u015f olmas\u0131d\u0131r. Bu nedenle, <code>SchoolNumber</code> t\u00fcr\u00fc i\u00e7in kullanamay\u0131z.</p> <p>Bunu \u00e7\u00f6zmek i\u00e7in <code>sum</code> fonksiyonunu a\u015fa\u011f\u0131daki gibi tan\u0131mlayabiliriz:</p> <pre><code>func sum[T ~int](a T, b T) T {\nreturn a + b\n}\n</code></pre> <p>Tilda (~) i\u015fareti, <code>T</code>\u2019nin <code>int</code> t\u00fcr\u00fc veya <code>int</code> t\u00fcr\u00fcnden bir alt t\u00fcr olmas\u0131 gerekti\u011fini belirtir. <code>SchoolNumber</code> t\u00fcr\u00fc, <code>int</code> t\u00fcr\u00fcnden bir alt t\u00fcr oldu\u011fu i\u00e7in, bu fonksiyonu <code>SchoolNumber</code> t\u00fcr\u00fc i\u00e7in kullanabiliriz:</p> <p>https://go.dev/play/p/R2t6n6xx1EW</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport \"fmt\"\n\n// SchoolNumber is a custom type definition uses int.\ntype SchoolNumber int\n\nfunc sum[T ~int](a T, b T) T {\nreturn a + b\n}\n\nfunc main() {\nn1 := SchoolNumber(1)\nn2 := SchoolNumber(2)\nfmt.Println(sum(n1, n2))\n}\n</code></pre>"},{"location":"11/01-generics/#generic-fonksiyon-cagrlar","title":"Generic Fonksiyon \u00c7a\u011fr\u0131lar\u0131","text":"<p>\u015eimdi generic fonksiyon \u00e7a\u011fr\u0131lar\u0131n\u0131 ele alal\u0131m. Generic fonksiyonlar\u0131 \u00e7a\u011f\u0131rmak i\u00e7in, fonksiyonun parametrelerindeki t\u00fcr parametrelerini belirtmemiz gerekir.</p> <p>\u00d6ncelikle generic olmayan bir fonksiyonu ele alal\u0131m, fonksiyon <code>[]int</code> al\u0131yor ve bu slice\u2019\u0131 i\u015fleyecek fonksiyonu al\u0131yor;</p> <pre><code>input: [1, 2, 3, 4, 5]\nfonksiyon: (n) =&gt; n * 2\n\n\u00e7\u0131kt\u0131: [2, 4, 6, 8, 10]  olmal\u0131\n</code></pre> <pre><code>func numMutator(values numbers, fn mapperFunc) numbers {\nresult := make(numbers, len(values))\nfor i, v := range values {\nresult[i] = fn(v)\n}\nreturn result\n}\n</code></pre> <p>Bu fonksiyonu a\u015fa\u011f\u0131daki gibi \u00e7a\u011f\u0131rabiliriz:</p> <p>https://go.dev/play/p/4BJEzwJ9s5E</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype (\nmapperFunc func(int) int\nnumbers    []int\n)\n\nfunc numMutator(values numbers, fn mapperFunc) numbers {\nresult := make(numbers, len(values))\nfor i, v := range values {\nresult[i] = fn(v)\n}\nreturn result\n}\n\nfunc main() {\ninput := []int{1, 2, 3, 4, 5}\nfn := func(n int) int {\nreturn n * 2\n}\n\nfmt.Println(numMutator(input, fn))\n}\n</code></pre> <p>Bu fonksiyon sadece <code>int</code> t\u00fcr\u00fc i\u00e7in \u00e7al\u0131\u015f\u0131r. Yine generic fonksiyonlar kullanarak bu fonksiyonu farkl\u0131 t\u00fcrler i\u00e7in kullanabiliriz:</p> <p>https://go.dev/play/p/iE4yCG6yjy8</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\n\"golang.org/x/exp/constraints\"\n)\n\ntype (\nmapperFunc[T any] func(T) T\nnumbers[T any]    []T\n)\n\nfunc numMutator[T constraints.Ordered](values numbers[T], fn mapperFunc[T]) []T {\nresult := make([]T, len(values))\nfor i, v := range values {\nresult[i] = fn(v)\n}\nreturn result\n}\n\nfunc main() {\ninput := []int{1, 2, 3, 4, 5}\nfn := func(n int) int {\nreturn n * 2\n}\n\nfmt.Println(numMutator(input, fn))\n}\n</code></pre> <p>ya da <code>float64</code> t\u00fcr\u00fc i\u00e7in:</p> <p>https://go.dev/play/p/kH2Q2ilzqwA</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\n\"golang.org/x/exp/constraints\"\n)\n\ntype (\nmapperFunc[T any] func(T) T\nnumbers[T any]    []T\n)\n\nfunc numMutator[T constraints.Ordered](values numbers[T], fn mapperFunc[T]) []T {\nresult := make([]T, len(values))\nfor i, v := range values {\nresult[i] = fn(v)\n}\nreturn result\n}\n\nfunc main() {\ninput := []float64{1.2, 2.3, 3.4, 4.5, 5.6}\nfn := func(n float64) float64 {\nreturn n * 2\n}\n\nfmt.Println(numMutator(input, fn))\n// [2.4 4.6 6.8 9 11.2]\n}\n</code></pre>"},{"location":"11/01-generics/#generic-tipi-structlarda-kullanmak","title":"Generic tipi <code>struct</code>larda Kullanmak","text":"<p>Generic tipleri fonksiyonlarda oldu\u011fu gibi <code>struct</code>\u2019larda da kullanabiliriz. \u00d6rne\u011fin, a\u015fa\u011f\u0131daki gibi bir struct tan\u0131mlayabiliriz:</p> <p>https://go.dev/play/p/xpzfCN2fDST</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\n\"golang.org/x/exp/constraints\"\n)\n\n// GradeType defines generic grade type.\ntype GradeType interface {\nconstraints.Ordered\n}\n\n// AgeType defines generic age type.\ntype AgeType interface {\nconstraints.Ordered\n}\n\n// Student represents generic student type model.\ntype Student[gradeType GradeType, ageType AgeType] struct {\nName  string\nAge   gradeType\nGrade ageType\n}\n\nfunc main() {\nstudent := Student[int, float64]{\nName:  \"John\",\nAge:   20,\nGrade: 10.21,\n}\n\nfmt.Printf(\"%+v\\n\", student) // {Name:John Age:20 Grade:10.21}\n}\n</code></pre>"},{"location":"11/01-generics/#generic-tipleri-maplerde-kullanmak","title":"Generic tipleri <code>map</code>\u2019lerde kullanmak","text":"<p>Generic tipleri <code>map</code>\u2019lerde de kullanabiliriz. \u00d6ncelikle generic bir map tan\u0131mlayal\u0131m:</p> <p>https://go.dev/play/p/daZVdBfA-xz</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport \"fmt\"\n\n// GenericMap represents generic map type.\ntype GenericMap[K comparable, V int | string] map[K]V\n\nfunc main() {\nm := GenericMap[string, int]{\n\"one\":   1,\n\"two\":   2,\n\"three\": 3,\n}\n\nfmt.Printf(\"%v\\n\", m) // map[one:1 three:3 two:2]\n}\n</code></pre> <p><code>comparable</code> asl\u0131nda bir <code>interface</code>, t\u00fcm <code>comparable</code> (kar\u015f\u0131la\u015ft\u0131r\u0131labilir) tipler bu <code>interface</code>\u2019i implemente eder;</p> <ul> <li>boolean\u2019ler</li> <li>n\u00fcmerikler</li> <li>strings\u2019ler</li> <li>pointer\u2019lar</li> <li>channels</li> <li>kar\u015f\u0131la\u015ft\u0131r\u0131labilir elementlerden olu\u015fan diziler (arrays of comparable types)</li> <li>alan\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131labilir elementlerden olu\u015fan struct\u2019lar (whose fields are all comparable types)</li> </ul>"},{"location":"11/01-generics/#generic-gercek-hayat-ornegi","title":"Generic Ger\u00e7ek Hayat \u00d6rne\u011fi","text":"<p>Genericlerin ger\u00e7ek hayatta nas\u0131l kullan\u0131ld\u0131\u011f\u0131na bakal\u0131m. \u00d6rne\u011fin, bir veritaban\u0131 olu\u015ftuyorsunuz. Bu veritaban\u0131nda <code>User</code> ve <code>UserGrade</code> ad\u0131nda iki tablonuz var. Veritaban\u0131na kay\u0131tlar\u0131 eklemek i\u00e7in a\u015fa\u011f\u0131daki gibi bir fonksiyon tan\u0131mlayabilirsiniz:</p> <pre><code>func InsertUser(user User) {\n// insert user into database\n}\n\nfunc InsertUserGrade(userGrade UserGrade) {\n// insert user grade into database\n}\n</code></pre> <p>Bu durumda her tablo i\u00e7in ayr\u0131 bir fonksiyon tan\u0131mlamam\u0131z gerekir. Bu da kod tekrar\u0131na neden olur ve hata ay\u0131klamay\u0131 zorla\u015ft\u0131r\u0131r.</p> <p>Bu problemin \u00e7\u00f6z\u00fcm\u00fc i\u00e7in \u00f6nce <code>User</code> ve <code>UserGrade</code> tipleri i\u00e7in standart bir <code>interface</code> tan\u0131mlayal\u0131m:</p> <pre><code>type Modelizer interface {\nTableName() string\n}\n\ntype User struct {\nID   int\nName string\n}\n\nfunc (u User) TableName() string {\nreturn \"user\"\n}\n\ntype UserGrade struct {\nID     int\nUserID int\nGrade  int\n}\n\nfunc (u UserGrade) TableName() string {\nreturn \"user_grade\"\n}\n</code></pre> <p>\u015eimdi <code>InsertUser</code> ve <code>InsertUserGrade</code> fonksiyonlar\u0131n\u0131 a\u015fa\u011f\u0131daki gibi tan\u0131mlayabiliriz:</p> <pre><code>func Insert[T Modelizer](t T) {\nfmt.Println(\"Inserting into:\", t.TableName())\n// do real insert operation\n}\n</code></pre> <p>Bu fonksiyonu a\u015fa\u011f\u0131daki gibi \u00e7a\u011f\u0131rabiliriz:</p> <p>https://go.dev/play/p/kPpj-QPx2oJ</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype Modelizer interface {\nTableName() string\n}\n\ntype User struct {\nID   int\nName string\n}\n\nfunc (u User) TableName() string {\nreturn \"user\"\n}\n\ntype UserGrade struct {\nID     int\nUserID int\nGrade  int\n}\n\nfunc (u UserGrade) TableName() string {\nreturn \"user_grade\"\n}\n\nfunc Insert[T Modelizer](t T) {\nfmt.Println(\"Inserting into:\", t.TableName())\n// do real insert operation\n}\n\nfunc main() {\nuser := User{\nID:   1,\nName: \"U\u011fur \u00d6zy\u0131lmazel\",\n}\n\nInsert(user)\n// Inserting into: user\n\nuserGrade := UserGrade{\nID:     1,\nUserID: 1,\nGrade:  100,\n}\nInsert(userGrade)\n// Inserting into: user_grade\n}\n</code></pre>"},{"location":"12/01-reflection/","title":"B\u00f6l\u00fcm 12/01: Reflection","text":"<p>Go statik yaz\u0131ma sahiptir, bu da her de\u011fi\u015fkenin derleme zaman\u0131nda bilinen sabit bir tipe sahip oldu\u011fu anlam\u0131na gelir, bu da onun statik tipi olarak bilinir.</p> <p>En basit haliyle, <code>reflection</code>, bir program\u0131n y\u00fcr\u00fctme s\u0131ras\u0131nda kendi de\u011ferlerini ve de\u011fi\u015fkenlerini incelemesine / incelemesine ve t\u00fcrlerini belirlemesine olanak tan\u0131r.</p> <p>Bir benzer senaryo, <code>json</code> verilerini kodlamam\u0131za izin veren ve bilinmeyen yap\u0131lar\u0131 incelememize / manip\u00fcle etmemize izin veren yans\u0131mad\u0131r.</p> <p>Reflection, \u00fc\u00e7 kavram etraf\u0131nda in\u015fa edilmi\u015ftir:</p> <ol> <li>T\u00fcr (Kind): asl\u0131nda <code>uint</code> constant; <code>reflect.Bool (1)</code></li> <li>Tip (Type)</li> <li>De\u011fer (Value)</li> </ol> <p>Hemen \u00f6rne\u011fe bakal\u0131m:</p> <p>https://go.dev/play/p/kjCf6NmJSwE</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"reflect\"\n)\n\nfunc main() {\nkinds := []reflect.Kind{\nreflect.Invalid,\nreflect.Bool,\nreflect.Int,\nreflect.Int8,\nreflect.Int16,\nreflect.Int32,\nreflect.Int64,\nreflect.Uint,\nreflect.Uint8,\nreflect.Uint16,\nreflect.Uint32,\nreflect.Uint64,\nreflect.Uintptr,\nreflect.Float32,\nreflect.Float64,\nreflect.Complex64,\nreflect.Complex128,\nreflect.Array,\nreflect.Chan,\nreflect.Func,\nreflect.Interface,\nreflect.Map,\nreflect.Pointer,\nreflect.Slice,\nreflect.String,\nreflect.Struct,\nreflect.UnsafePointer,\n}\n\nfor _, k := range kinds {\nfmt.Printf(\"%-16s : %[1]d (%v / %v)\\n\", k, reflect.ValueOf(k).Type(), reflect.ValueOf(k).Type().Kind())\n}\n}\n\n// invalid          : 0 (reflect.Kind / uint)\n// bool             : 1 (reflect.Kind / uint)\n// int              : 2 (reflect.Kind / uint)\n// int8             : 3 (reflect.Kind / uint)\n// int16            : 4 (reflect.Kind / uint)\n// int32            : 5 (reflect.Kind / uint)\n// int64            : 6 (reflect.Kind / uint)\n// uint             : 7 (reflect.Kind / uint)\n// uint8            : 8 (reflect.Kind / uint)\n// uint16           : 9 (reflect.Kind / uint)\n// uint32           : 10 (reflect.Kind / uint)\n// uint64           : 11 (reflect.Kind / uint)\n// uintptr          : 12 (reflect.Kind / uint)\n// float32          : 13 (reflect.Kind / uint)\n// float64          : 14 (reflect.Kind / uint)\n// complex64        : 15 (reflect.Kind / uint)\n// complex128       : 16 (reflect.Kind / uint)\n// array            : 17 (reflect.Kind / uint)\n// chan             : 18 (reflect.Kind / uint)\n// func             : 19 (reflect.Kind / uint)\n// interface        : 20 (reflect.Kind / uint)\n// map              : 21 (reflect.Kind / uint)\n// ptr              : 22 (reflect.Kind / uint)\n// slice            : 23 (reflect.Kind / uint)\n// string           : 24 (reflect.Kind / uint)\n// struct           : 25 (reflect.Kind / uint)\n// unsafe.Pointer   : 26 (reflect.Kind / uint)\n</code></pre> <p>T\u00fcr (Kind); <code>struct</code>, <code>int</code>, <code>string</code>, <code>slice</code>, <code>map</code> veya di\u011fer go\u2019nun basit (primitive) t\u00fcrlerinden herhangi biri olabilir.</p> <p>E\u011fer <code>Foo</code> ad\u0131nda bir <code>struct</code> tan\u0131mlarsan\u0131z, <code>Kind</code> bir <code>struct</code>\u2019t\u0131r ve <code>Type</code>\u2019\u0131 <code>Foo</code>\u2019dur. </p> <p>https://go.dev/play/p/R6D7WD8eJdE</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"reflect\"\n)\n\ntype Foo struct {\nA int\nB string\n}\n\nfunc main() {\ndata := Foo{A: 1, B: \"hello\"}\n\nr := reflect.TypeOf(data)\nfmt.Println(r.Kind(), r.Name()) // struct Foo\n\nv := reflect.ValueOf(data)\nfmt.Println(v, v.Kind(), v.Type())\n// {1 hello} struct main.Foo\n}\n</code></pre> <p>Kod \u00f6rne\u011finde, <code>TypeOf</code> ve <code>ValueOf</code> fonksiyonlar\u0131, s\u0131ras\u0131yla, t\u00fcr\u00fc ve de\u011feri d\u00f6nd\u00fcr\u00fcr. </p> <p>Reflection paketini kullanarak bir <code>struct</code>\u2019\u0131n de\u011ferini okumaya (read) ek olarak, de\u011ferini de\u011fi\u015ftirmek (write) i\u00e7in de kullanabiliriz. Bir de\u011feri <code>reflect.ValueOf</code> fonksiyonunu kullanarak de\u011fi\u015ftirmek i\u00e7in, bir de\u011fi\u015fkenin pointer\u2019\u0131n\u0131 ge\u00e7irmemiz ve <code>Elem</code> fonksiyonunu \u00e7a\u011f\u0131rarak i\u015faret\u00e7i adresindeki de\u011feri d\u00f6nd\u00fcrmemiz gerekir:</p> <p>https://go.dev/play/p/UzhantalrDx</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"reflect\"\n)\n\ntype Foo struct {\nA int\nB string\n}\n\nfunc main() {\ndata := Foo{A: 1, B: \"hello\"}\n\nv := reflect.ValueOf(&amp;data).Elem()\nv.Field(0).SetInt(100)\nv.Field(1).SetString(\"world\")\n\nfmt.Println(v, v.Kind(), v.Type())\n// {100 world} struct main.Foo\n}\n</code></pre> <p>Yukar\u0131daki \u00f6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi, <code>reflect.ValueOf</code> fonksiyonu, bir <code>struct</code>\u2019\u0131n de\u011ferini de\u011fi\u015ftirmek i\u00e7in kullan\u0131labilir. De\u011ferin t\u00fcr\u00fcne ba\u011fl\u0131 olarak;</p> <ul> <li><code>SetInt()</code></li> <li><code>SetString()</code></li> <li><code>SetBool()</code></li> <li><code>SetFloat()</code></li> <li><code>SetUint()</code></li> <li><code>SetArray()</code></li> <li><code>SetMap()</code></li> <li><code>SetSlice()</code></li> <li><code>SetPointer()</code></li> <li><code>SetStruct()</code></li> <li><code>Set()</code></li> </ul> <p>gibi i\u015flevler kullan\u0131labilir.</p> <p>https://pkg.go.dev/reflect@go1.21.0#Value.Set</p> <p><code>ClearValue</code> adl\u0131 bir fonksiyon olu\u015fturmak istedi\u011finizi varsayal\u0131m. Bu fonksiyon, ald\u0131\u011f\u0131 <code>any</code> t\u00fcr\u00fcndeki verilerin yine metot parametresi olarak ald\u0131\u011f\u0131 <code>string</code> t\u00fcr\u00fcndeki alan\u0131n de\u011ferini temizlemelidir.</p> <p>https://go.dev/play/p/e29cVR9F2r9</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"errors\"\n\"fmt\"\n\"log\"\n\"reflect\"\n)\n\n// Foo1 represents dummy type.\ntype Foo1 struct {\nA int\nB string\n}\n\n// Foo2 represents dummy type.\ntype Foo2 struct {\nC int\nD string\n}\n\n// Foo3 represents dummy type.\ntype Foo3 struct {\nX bool\n}\n\nvar (\nerrInvalidKind  = errors.New(\"invalid kind\")\nerrInvalidValue = errors.New(\"invalid value\")\n)\n\nfunc resetStringValueOfGivenField(d any, f string) error {\nv := reflect.ValueOf(d) // value of d\nk := v.Kind()           // kind of d\n\nif k != reflect.Ptr {\nreturn fmt.Errorf(\"%w, must be a pointer to struct, not a %q\", errInvalidKind, k)\n}\n\nstructValue := v.Elem()\nfieldValue := structValue.FieldByName(f)\nif !fieldValue.IsValid() {\nreturn fmt.Errorf(\"%w\", errInvalidValue)\n}\nif fieldValue.Kind() != reflect.String {\nreturn fmt.Errorf(\"%w, %s value must be a string, not a %q\", errInvalidKind, f, fieldValue.Kind())\n}\nfieldValue.SetString(\"\")\nreturn nil\n}\n\nfunc main() {\nfoo1 := Foo1{1, \"hello\"}\nfmt.Printf(\"foo1: %+v\\n\", foo1) // foo1: {A:1 B:hello}\n\nif err := resetStringValueOfGivenField(&amp;foo1, \"B\"); err != nil {\nlog.Print(err)\n}\nfmt.Printf(\"foo1 after: %+v\\n\", foo1) // foo1 after: {A:1 B:}\n\nfoo2 := Foo2{2, \"world\"}\nfmt.Printf(\"foo2: %+v\\n\", foo2) // foo2: {C:2 D:world}\n\nif err := resetStringValueOfGivenField(&amp;foo2, \"D\"); err != nil {\nlog.Print(err)\n}\nfmt.Printf(\"foo2 after: %+v\\n\", foo2) // foo2 after: {C:2 D:}\n\nfoo3 := Foo3{}\nif err := resetStringValueOfGivenField(&amp;foo3, \"X\"); err != nil {\nlog.Print(err) // invalid kind, X value must be a string, not a \"bool\"\n}\nfmt.Printf(\"foo3 after: %+v\\n\", foo3)\n\n// passing non-pointer\nif err := resetStringValueOfGivenField(foo3, \"X\"); err != nil {\nlog.Print(err) // invalid kind, must be a pointer to struct, not a \"struct\"\n}\n}\n</code></pre> <p>Keza, yine <code>any</code> alan bir fonksiyon olsun, ge\u00e7ilen tipi (Kind) tespit edelim:</p> <p>https://go.dev/play/p/RbRn7tVQHV-</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"reflect\"\n\"unsafe\"\n)\n\nfunc checkType(d any) {\nswitch v := reflect.ValueOf(d); v.Kind() {\ncase reflect.Struct:\ns := fmt.Sprintf(\"%+v\", v)\nfmt.Printf(\"%-24v (%v)\\n\", s, v.Type())\ncase reflect.String:\nfmt.Printf(\"%-24v (%v)\\n\", v, v.Type())\ncase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\nt := \"(\" + v.Type().String() + \")\"\nfmt.Printf(\"%-24v %-10v -&gt; %d\\n\", v, t, v.Int())\ncase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\nt := \"(\" + v.Type().String() + \")\"\nfmt.Printf(\"%-24v %-10v -&gt; %d\\n\", v, t, v.Uint())\ncase reflect.Bool:\nfmt.Printf(\"%-24v (%v)\\n\", v, v.Type())\ncase reflect.Float32, reflect.Float64:\nt := \"(\" + v.Type().String() + \")\"\nfmt.Printf(\"%-24v %-10v -&gt; %f\\n\", v, t, v.Float())\ncase reflect.Complex64, reflect.Complex128:\nt := \"(\" + v.Type().String() + \")\"\ns := fmt.Sprintf(\"%v\", v)\nfmt.Printf(\"%-24v %-10v\\n\", s, t)\ncase reflect.Func:\nt := \"(\" + v.Type().String() + \")\"\nfmt.Printf(\"%-24v %-10v\\n\", v, t)\ncase reflect.Chan:\nt := \"(\" + v.Type().String() + \")\"\nfmt.Printf(\"%-24v %-10v\\n\", v, t)\ncase reflect.Map:\nt := \"(\" + v.Type().String() + \")\"\ns := fmt.Sprintf(\"%v\", v)\nfmt.Printf(\"%-24v %-10v\\n\", s, t)\ncase reflect.Array, reflect.Slice:\nt := \"(\" + v.Type().String() + \")\"\ns := fmt.Sprintf(\"%v\", v)\nfmt.Printf(\"%-24v %-10v\\n\", s, t)\ncase reflect.Uintptr:\nt := \"(\" + v.Type().String() + \")\"\ns := fmt.Sprintf(\"%v\", v)\nfmt.Printf(\"%-24v %-10v\\n\", s, t)\ncase reflect.UnsafePointer:\nt := \"(\" + v.Type().String() + \")\"\ns := fmt.Sprintf(\"%v\", v)\nfmt.Printf(\"%-24v %-10v\\n\", s, t)\ncase reflect.Pointer:\nt := \"(\" + v.Type().String() + \")\"\ns := fmt.Sprintf(\"%v\", v)\nel := reflect.TypeOf(d).Elem()\nif el.Kind() == reflect.Interface {\nt = \"(\" + el.Kind().String() + \")\"\n}\nfmt.Printf(\"%-24v %-10v\\n\", s, t)\ncase reflect.Interface:\nfmt.Println(\"this is not possible\")\ncase reflect.Invalid:\nfmt.Printf(\"%-24v\\n\", v)\ndefault:\nfmt.Println(v, \"unknown\")\n}\n}\n\nfunc main() {\ni := 1\n\nvar err error\n\ndata := []any{\n\"hello\",\n2023,\nint8(127),                    // upper limit\nint16(32767),                 // upper limit\nint32(2147483647),            // upper limit\nint64(9223372036854775807),   // upper limit\nuint(9223372036854775807),    // upper limit\nuint8(255),                   // upper limit\nuint16(65535),                // upper limit\nuint32(4294967295),           // upper limit\nuint64(18446744073709551615), // upper limit\ntrue,\nfalse,\nfloat32(1.0),\nfloat64(1.0),\ncomplex(float32(3.0), float32(4.0)),\ncomplex(5, 7),\nfunc() {},\nmake(chan int),\nmap[string]string{\"key\": \"value\"},\n[1]string{\"array\"},\n[]string{\"slice\"},\nuintptr(unsafe.Pointer(&amp;i)), // nolint\n&amp;i,\nunsafe.Pointer(&amp;i), // nolint\n&amp;err,\nstruct{}{},\nnil,\n}\n\nfor _, v := range data {\ncheckType(v)\n}\n}\n\n// hello                    (string)\n// 2023                     (int)      -&gt; 2023\n// 127                      (int8)     -&gt; 127\n// 32767                    (int16)    -&gt; 32767\n// 2147483647               (int32)    -&gt; 2147483647\n// 9223372036854775807      (int64)    -&gt; 9223372036854775807\n// 9223372036854775807      (uint)     -&gt; 9223372036854775807\n// 255                      (uint8)    -&gt; 255\n// 65535                    (uint16)   -&gt; 65535\n// 4294967295               (uint32)   -&gt; 4294967295\n// 18446744073709551615     (uint64)   -&gt; 18446744073709551615\n// true                     (bool)\n// false                    (bool)\n// 1                        (float32)  -&gt; 1.000000\n// 1                        (float64)  -&gt; 1.000000\n// (3+4i)                   (complex64)\n// (5+7i)                   (complex128)\n// 0x102b45b50              (func())\n// 0x140001000c0            (chan int)\n// map[key:value]           (map[string]string)\n// [array]                  ([1]string)\n// [slice]                  ([]string)\n// 1374390648856            (uintptr)\n// 0x14000110018            (*int)\n// 0x14000110018            (unsafe.Pointer)\n// 0x14000102020            (interface)\n// {}                       (struct {})\n// &lt;invalid reflect.Value&gt;\n</code></pre>"},{"location":"13/01-json-ile-calismak/","title":"B\u00f6l\u00fcm 13/01: JSON \u0130le \u00c7al\u0131\u015fmak","text":"<p>Go ile \u00e7ok y\u00fcksek ihtimal a\u011f servisleri geli\u015ftireceksiniz. D\u0131\u015f d\u00fcnyadan veri almak ya da d\u0131\u015f d\u00fcnyadan istek atan bir istemciye cevap vermek i\u00e7in bir ka\u00e7 farkl\u0131 y\u00f6ntem mevcut. Bunlardan en s\u0131k kullanacaklar\u0131n\u0131z aras\u0131nda <code>json</code> yani hafif siklet veri de\u011fi\u015fim format\u0131n\u0131 kullancaks\u0131n\u0131z. Bu bak\u0131mdan;</p> <ol> <li>Ya, <code>go</code> daki bir tipi, d\u0131\u015f d\u00fcnyan\u0131n anlayaca\u011f\u0131 <code>json</code> hale (<code>Marshal</code>)</li> <li>Ya da d\u0131\u015f d\u00fcnyadan <code>json</code> format\u0131nda gelen veriyi <code>go</code>\u2019nun anlayaca\u011f\u0131 hale (<code>Unmarshal</code>)</li> </ol> <p>getirmek \u00e7ok s\u0131k yapt\u0131\u011f\u0131m\u0131z bir i\u015f olacak. Bu d\u00f6n\u00fc\u015f\u00fcm esnas\u0131nda </p>"},{"location":"13/01-json-ile-calismak/#encodingjson-marshal","title":"<code>encoding/json</code> Marshal","text":"<p>Elimizdeki <code>go</code> tipini <code>[]byte</code> haline d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemidir:</p> <p>https://go.dev/play/p/7yav9dmBRb7</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n)\n\n// UserLevel is a custom type definition uses string for defining user level.\ntype UserLevel string\n\n// UserLevels holds collection of UserLevel types.\ntype UserLevels []UserLevel\n\nfunc main() {\nUserLevelAdmin := UserLevel(\"admin\")\nUserLevelModerator := UserLevel(\"moderator\")\nUserLevelAnonymous := UserLevel(\"anonymous\")\n\nuserLevels := UserLevels{\nUserLevelAdmin,\nUserLevelModerator,\nUserLevelAnonymous,\n}\n\nj, err := json.Marshal(userLevels)\nif err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(j)\n// [91 34 97 100 109 105 110 34 44 34 109 111 100 101 114 97 116 111 114 34 44 34 97 110 111 110 121 109 111 117 115 34 93]\n\nfmt.Println(string(j))\n// [\"admin\",\"moderator\",\"anonymous\"]\n}\n</code></pre> <p><code>j</code>\u2019nin string g\u00f6r\u00fcnt\u00fcs\u00fc: <code>[\"admin\",\"moderator\",\"anonymous\"]</code> \u015feklindedir. Bu asl\u0131nda JavaScript\u2019teki <code>array</code> tipidir.</p>"},{"location":"13/01-json-ile-calismak/#encodingjson-unmarshal","title":"<code>encoding/json</code> Unmarshal","text":"<p>\u015eimdi, tam ters i\u015flemi yapal\u0131m; d\u0131\u015f d\u00fcnyadan bize <code>[\"admin\",\"moderator\",\"anonymous\"]</code> gelsin:</p> <p>https://go.dev/play/p/E6L7GhKpJmu</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n)\n\n// UserLevel is a custom type definition uses string.\ntype UserLevel string\n\n// UserLevels holds collection of UserLevel types.\ntype UserLevels []UserLevel\n\nfunc main() {\n// byte slice from raw string.\ninput := []byte(`[\"admin\",\"moderator\",\"anonymous\"]`)\n\n// target data type for serialization.\nvar userLevels UserLevels\n\nif err := json.Unmarshal(input, &amp;userLevels); err != nil {\nlog.Fatal(err)\n}\n\nfmt.Printf(\"%#v\\n\", userLevels)\n// main.UserLevels{\"admin\", \"moderator\", \"anonymous\"}\n}\n</code></pre>"},{"location":"13/01-json-ile-calismak/#jsonfield-tagi","title":"<code>json:\"FIELD\"</code> Tag\u2019i","text":"<p>Genelde bu \u00e7evirme i\u015flerini <code>struct</code> tipi \u00fczerinde yapar\u0131z. D\u0131\u015far\u0131dan gelen ya da d\u0131\u015far\u0131ya gidecek veride daha yap\u0131sal (structural) veri kullanmak isteriz:</p> <p>https://go.dev/play/p/BB5D_VrLpLa</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n)\n\n// User represents user model.\ntype User struct {\nName  string\nEmail string\nAge   int\n}\n\nfunc main() {\nu := User{\nName:  \"U\u011fur \u00d6zy\u0131lmazel\",\nEmail: \"vigo@example.com\",\nAge:   51,\n}\n\nj, err := json.Marshal(u)\nif err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(j)\n// [123 34 78 97 109 101 34 58 34 85 196 159 117 114 32 195 150 122 121 196 177 108 109 97 122 101 108 34 44 34 69 109 97 105 108 34 58 34 118 105 103 111 64 101 120 97 109 112 108 101 46 99 111 109 34 44 34 65 103 101 34 58 53 49 125]\n\nfmt.Println(string(j))\n// {\"Name\":\"U\u011fur \u00d6zy\u0131lmazel\",\"Email\":\"vigo@example.com\",\"Age\":51}\n}\n</code></pre> <p>Dikkat ettiyseniz, <code>[]byte</code>\u2019a bakt\u0131\u011f\u0131m\u0131zda; <code>{\"Name\":\"U\u011fur \u00d6zy\u0131lmazel\",\"Email\":\"vigo@example.com\",\"Age\":51}</code> alan adlar\u0131n\u0131n <code>struct</code> field name\u2019leri ile ayn\u0131 oldu\u011funu g\u00f6r\u00fcr\u00fcz. <code>json</code> convention\u2019a bakt\u0131\u011f\u0131m\u0131zda alan adlar\u0131n\u0131n bir kural\u0131 var. Ana kural <code>key</code>\u2019lerin (Name, Email ...) mutlaka Unicode karakterlerden olu\u015fmas\u0131d\u0131r. Kimileri <code>camelCase</code> kimileri <code>snake_case</code> de kullanabilir.</p> <p>Kural\u0131na uygun yaz\u0131lm\u0131\u015f bir rest-api servisi, alan ad\u0131 kural\u0131 olarak <code>snake_case</code> kullanmal\u0131d\u0131r.</p> <p>Peki, biz <code>Name</code> yerine <code>name</code> nas\u0131l d\u00f6nece\u011fiz? Bu durumda <code>json:\"FIELD\"</code> tag devreye girer:</p> <p>https://go.dev/play/p/EY_4u3pniOf</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n)\n\n// User represents user model.\ntype User struct {\nName  string `json:\"name\"`\nEmail string `json:\"email\"`\nAge   int    `json:\"age\"`\n}\n\nfunc main() {\nu := User{\nName:  \"U\u011fur \u00d6zy\u0131lmazel\",\nEmail: \"vigo@example.com\",\nAge:   51,\n}\n\nj, err := json.Marshal(u)\nif err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(j)\n// [123 34 110 97 109 101 34 58 34 85 196 159 117 114 32 195 150 122 121 196 177 108 109 97 122 101 108 34 44 34 101 109 97 105 108 34 58 34 118 105 103 111 64 101 120 97 109 112 108 101 46 99 111 109 34 44 34 97 103 101 34 58 53 49 125]\n\nfmt.Println(string(j))\n// {\"name\":\"U\u011fur \u00d6zy\u0131lmazel\",\"email\":\"vigo@example.com\",\"age\":51}\n}\n</code></pre> <p><code>json</code> tag\u2019i (asl\u0131nda bu bir struct annotation) sadece bu i\u015fe yaramaz;</p> <pre><code>// JSON \u00e7\u0131kt\u0131da key \"myName\" olarak g\u00f6r\u00fcn\u00fcr.\nField int `json:\"myName\"`\n\n// JSON \u00e7\u0131kt\u0131da key \"myName\" olarak g\u00f6r\u00fcn\u00fcr fakat de\u011fer \"empty\" (zero-value) ise\n// omit edilir (yani d\u0131\u015far\u0131da b\u0131rak\u0131l\u0131r) ve bu field \u00e7\u0131kt\u0131da yer almaz!\nField int `json:\"myName,omitempty\"`\n\n// JSON \u00e7\u0131kt\u0131da key \"Field\" olarak g\u00f6r\u00fcn\u00fcr fakat de\u011fer \"empty\" (zero-value) ise\n// omit edilir (yani d\u0131\u015far\u0131da b\u0131rak\u0131l\u0131r) ve bu field \u00e7\u0131kt\u0131da yer almaz!\nField int `json:\",omitempty\"`\n\n// Field komple g\u00f6rmezden gelinir (ignore) ve \u00e7\u0131kt\u0131da yer almaz!\nField int `json:\"-\"`\n\n// JSON \u00e7\u0131kt\u0131da key \"-\" olarak g\u00f6r\u00fcn\u00fcr.\nField int `json:\"-,\"`\n</code></pre> <p>Ek olarak, d\u0131\u015f d\u00fcnyadan gelen veri <code>string</code> g\u00f6r\u00fcn\u00fcm\u00fcnde ama de\u011fer olarak <code>integer</code>;</p> <pre><code>{\"age\": \"51\"}\n</code></pre> <p><code>age</code>\u2019in tip olarak de\u011feri <code>51</code> yani <code>string</code> ama biz bunu i\u00e7eride <code>int</code> olarak kullanmak istiyoruz (baz\u0131 k\u00f6t\u00fc tasarlanm\u0131\u015f api\u2019larda bu t\u00fcr durumlar oluyor):</p> <pre><code>Age int `json:\"age,string\"`\n</code></pre> <p>\u015feklinde de kullanabiliyoruz:</p> <p>https://go.dev/play/p/Qp0lnPOPBRQ</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n)\n\n// User represents user model.\ntype User struct {\nName     string `json:\"name\"`\nEmail    string `json:\"email,omitempty\"`\nAge      int    `json:\"age,string,omitempty\"`\nPassword string `json:\"-\"`\n}\n\nfunc main() {\nu := User{\nName:  \"U\u011fur \u00d6zy\u0131lmazel\",\nEmail: \"vigo@example.com\",\nAge:   51,\n}\n\nj, err := json.Marshal(u)\nif err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(j)\n// [123 34 110 97 109 101 34 58 34 85 196 159 117 114 32 195 150 122 121 196 177 108 109 97 122 101 108 34 44 34 101 109 97 105 108 34 58 34 118 105 103 111 64 101 120 97 109 112 108 101 46 99 111 109 34 44 34 97 103 101 34 58 34 53 49 34 125]\n\nfmt.Println(string(j))\n// {\"name\":\"U\u011fur \u00d6zy\u0131lmazel\",\"email\":\"vigo@example.com\",\"age\":\"51\"}\n\nu2 := User{\nName: \"U\u011fur \u00d6zy\u0131lmazel\",\n}\n\nj, err = json.Marshal(u2)\nif err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(j)\n// [123 34 110 97 109 101 34 58 34 85 196 159 117 114 32 195 150 122 121 196 177 108 109 97 122 101 108 34 125]\n\nfmt.Println(string(j))\n// {\"name\":\"U\u011fur \u00d6zy\u0131lmazel\"}\n}\n</code></pre> <p>\u015eimdi \u00f6rne\u011fe bakal\u0131m, <code>struct</code> alanlar\u0131 i\u00e7inde gezen, tag\u2019leri bulan ve \u00f6zelle\u015ftirilmi\u015f <code>time</code> kullanan bir yap\u0131 bulunuyor. <code>go</code>, <code>Marshal</code> i\u015flemi yaparken, e\u011fer custom type varsa ve bu type\u2019\u0131n <code>MarshalJSON()</code> metotu varsa onu kullan\u0131yor. <code>describeStruct</code> ise <code>reflect</code> paketini kullanarak struct i\u00e7inde geziyor.</p> <p>https://go.dev/play/p/7ny1yu09idp</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n\"reflect\"\n\"time\"\n)\n\n// User holds user model data. User struct has json tags!\ntype User struct {\nFirstName string    `json:\"first_name\"`\nLastName  string    `json:\"last_name\"`\nAge       int       `json:\"age\"`\nBirthDate time.Time `json:\"birth_date\"`\nAdmin     bool      `json:\"admin\"`\nLastVisit time.Time `json:\"-\"` // omitted, ignore\n}\n\nconst customTimeLayout = \"2006-01-02T15:04:05-07:00\"\n\n// CustomTime is a custom type definition uses time.Time, uses custom marshal format.\ntype CustomTime struct {\ntime.Time\n}\n\nfunc (ct CustomTime) MarshalJSON() ([]byte, error) {\nreturn []byte(`\"` + ct.Time.Format(customTimeLayout) + `\"`), nil\n}\n\n// UserWithCustomTime holds user model data with custom time type!\ntype UserWithCustomTime struct {\nFirstName string     `json:\"first_name\"`\nLastName  string     `json:\"last_name\"`\nAge       int        `json:\"age\"`\nBirthDate time.Time  `json:\"birth_date\"`\nAdmin     bool       `json:\"admin\"`\nLastVisit CustomTime `json:\",omitempty\"`\n}\n\n// OtherUser holds user model data, only one field has tag!\ntype OtherUser struct {\nFirstName string\nLastName  string\nAge       int\nBirthDate time.Time\nAdmin     bool\nLastVisit *time.Time `json:\",omitempty\"` // this field uses pointer, can be nil, can be omitted if unset!\n}\n\nfunc describeStruct(v any) {\nt := reflect.TypeOf(v)\nfor i := 0; i &lt; t.NumField(); i++ {\nfield := t.Field(i)\nfmt.Printf(\n\"Name: %-12s Type: %-18s Tag: %-20s json: %s\\n\",\nfield.Name,\nfield.Type,\nfield.Tag,\nfield.Tag.Get(\"json\"),\n)\n}\nfmt.Println()\n}\n\nfunc marshalStruct(v any) error {\nj, err := json.MarshalIndent(v, \"\", \"    \")\nif err != nil {\nreturn err\n}\nfmt.Printf(\"%s\\n\\n\", j)\nreturn nil\n}\n\nfunc main() {\ntrTZ := time.FixedZone(\"UTC+3\", +3*60*60)\nnow := time.Now()\n\nu1 := User{\nFirstName: \"U\u011fur\",\nLastName:  \"\u00d6zy\",\nAge:       49,\nBirthDate: time.Date(1972, time.August, 13, 10, 0, 0, 0, trTZ),\nAdmin:     true,\nLastVisit: now,\n}\ndescribeStruct(u1)\n// Name: FirstName    Type: string             Tag: json:\"first_name\"    json: first_name\n// Name: LastName     Type: string             Tag: json:\"last_name\"     json: last_name\n// Name: Age          Type: int                Tag: json:\"age\"           json: age\n// Name: BirthDate    Type: time.Time          Tag: json:\"birth_date\"    json: birth_date\n// Name: Admin        Type: bool               Tag: json:\"admin\"         json: admin\n// Name: LastVisit    Type: time.Time          Tag: json:\"-\"             json: -\n\nu2 := OtherUser{\nFirstName: \"Ezel\",\nLastName:  \"\u00d6zy\",\nAge:       10,\nBirthDate: time.Date(2011, time.August, 13, 7, 0, 0, 0, trTZ),\n// we don't have LastVisit field!\n}\ndescribeStruct(u2)\n// Name: FirstName    Type: string             Tag:                      json:\n// Name: LastName     Type: string             Tag:                      json:\n// Name: Age          Type: int                Tag:                      json:\n// Name: BirthDate    Type: time.Time          Tag:                      json:\n// Name: Admin        Type: bool               Tag:                      json:\n// Name: LastVisit    Type: *time.Time         Tag: json:\",omitempty\"    json: ,omitempty\n\nu3 := OtherUser{\nFirstName: \"Ezel\",\nLastName:  \"\u00d6zy\",\nAge:       12,\nBirthDate: time.Date(2011, time.August, 13, 7, 0, 0, 0, trTZ),\nLastVisit: &amp;now,\n}\ndescribeStruct(u3)\n// Name: FirstName    Type: string             Tag:                      json:\n// Name: LastName     Type: string             Tag:                      json:\n// Name: Age          Type: int                Tag:                      json:\n// Name: BirthDate    Type: time.Time          Tag:                      json:\n// Name: Admin        Type: bool               Tag:                      json:\n// Name: LastVisit    Type: *time.Time         Tag: json:\",omitempty\"    json: ,omitempty\n\nu4 := UserWithCustomTime{\nFirstName: \"Ezel\",\nLastName:  \"\u00d6zy\u0131lmazel\",\nAge:       12,\nBirthDate: time.Date(2011, time.August, 13, 7, 0, 0, 0, trTZ),\nLastVisit: CustomTime{now},\n}\ndescribeStruct(u4)\n// Name: FirstName    Type: string             Tag: json:\"first_name\"    json: first_name\n// Name: LastName     Type: string             Tag: json:\"last_name\"     json: last_name\n// Name: Age          Type: int                Tag: json:\"age\"           json: age\n// Name: BirthDate    Type: time.Time          Tag: json:\"birth_date\"    json: birth_date\n// Name: Admin        Type: bool               Tag: json:\"admin\"         json: admin\n// Name: LastVisit    Type: main.CustomTime    Tag: json:\",omitempty\"    json: ,omitempty\n\nif err := marshalStruct(u1); err != nil {\nlog.Fatal(err)\n}\n// {\n//     \"first_name\": \"U\u011fur\",\n//     \"last_name\": \"\u00d6zy\",\n//     \"age\": 49,\n//     \"birth_date\": \"1972-08-13T10:00:00+03:00\",\n//     \"admin\": true\n// }\n\nif err := marshalStruct(u2); err != nil {\nlog.Fatal(err)\n}\n// {\n//     \"FirstName\": \"Ezel\",\n//     \"LastName\": \"\u00d6zy\",\n//     \"Age\": 10,\n//     \"BirthDate\": \"2011-08-13T07:00:00+03:00\",\n//     \"Admin\": false\n// }\n\nif err := marshalStruct(u3); err != nil {\nlog.Fatal(err)\n}\n// {\n//     \"FirstName\": \"Ezel\",\n//     \"LastName\": \"\u00d6zy\",\n//     \"Age\": 12,\n//     \"BirthDate\": \"2011-08-13T07:00:00+03:00\",\n//     \"Admin\": false,\n//     \"LastVisit\": \"2023-08-13T14:07:09.537756+03:00\"\n// }\n\nif err := marshalStruct(u4); err != nil {\nlog.Fatal(err)\n}\n// {\n//     \"first_name\": \"Ezel\",\n//     \"last_name\": \"\u00d6zy\u0131lmazel\",\n//     \"age\": 12,\n//     \"birth_date\": \"2011-08-13T07:00:00+03:00\",\n//     \"admin\": false,\n//     \"LastVisit\": \"2023-08-13T14:07:09+03:00\"\n// }\n}\n</code></pre>"},{"location":"13/01-json-ile-calismak/#custom-encoding","title":"Custom Encoding","text":"<p>Asl\u0131nda <code>pretty print</code> yapt\u0131\u011f\u0131m\u0131z k\u0131s\u0131mda <code>marshalStruct(v any)</code> fonksiyonu i\u00e7inde kullanm\u0131\u015ft\u0131k, ek olarak html karakterlerini de escape etmeyi g\u00f6relim;</p> <p>https://go.dev/play/p/PaLSl8ya-ql</p> <pre><code>package main\n\nimport (\n\"bytes\"\n\"encoding/json\"\n\"fmt\"\n\"log\"\n)\n\nfunc main() {\ndata := map[string]any{\n\"message\": `this is &lt;strong&gt;bold&lt;/strong&gt; text`,\n}\n\nbuffer := new(bytes.Buffer)        // create buffer, returns pointer.\nencoder := json.NewEncoder(buffer) // point to buffer\nencoder.SetEscapeHTML(true)        // enable html escape\nencoder.SetIndent(\"\", \"    \")      // indent 4 spaces each key\n\n// serialize data to buffer\nif err := encoder.Encode(data); err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(buffer)\n// fmt.Println(buffer.String())\n// fmt.Printf(\"%s\\n\", buffer)\n// {\n//     \"message\": \"this is \\u003cstrong\\u003ebold\\u003c/strong\\u003e text\"\n// }\n\nbuffer = new(bytes.Buffer)        // create buffer, returns pointer.\nencoder = json.NewEncoder(buffer) // point to buffer\nencoder.SetEscapeHTML(false)      // disable html escape\nencoder.SetIndent(\"\", \"    \")     // indent 4 spaces each key\n\n// serialize data to buffer\nif err := encoder.Encode(data); err != nil {\nlog.Fatal(err)\n}\nfmt.Println(buffer)\n// {\n//     \"message\": \"this is &lt;strong&gt;bold&lt;/strong&gt; text\"\n// }\n}\n</code></pre>"},{"location":"13/01-json-ile-calismak/#custom-decoding","title":"Custom Decoding","text":"<p>D\u0131\u015f d\u00fcnyadan gelen veriyi <code>go</code> tipine <code>Unmarshal</code> ile \u00e7eviriyorduk. Bazen bu i\u015fi biraz daha kontroll\u00fc yapmak gerekebilir. Bu durumda <code>json.NewDecoder</code> kullan\u0131r\u0131z. Beklenmeyen bir alan geldi\u011finde hata yakalama ile bunu yakalay\u0131p istersek i\u015flemi ilerletmeyebiliriz.</p> <p>\u015eimdi \u00f6rne\u011fe bakal\u0131m;</p> <p>https://go.dev/play/p/hCGfrUGRn5-</p> <pre><code>package main\n\nimport (\n\"bytes\"\n\"encoding/json\"\n\"fmt\"\n\"log\"\n\"time\"\n)\n\n// User holds user model data. User struct has json tags!\ntype User struct {\nFirstName string     `json:\"first_name\"`\nLastName  string     `json:\"last_name\"`\nAge       int        `json:\"age\"`\nBirthDate time.Time  `json:\"birth_date\"`\nAdmin     bool       `json:\"admin\"`\nLastVisit *time.Time `json:\"last_visit\"`\n}\n\n// Users holds user slice of Users.\ntype Users []User\n\nfunc main() {\ninput := `[\n        {\n            \"first_name\": \"U\u011fur\",\n            \"last_name\": \"\u00d6zy\u0131lmazel\",\n            \"age\": 51,\n            \"birth_date\": \"1972-08-13T09:00:00.0+03:00\"\n        },\n        {\n            \"first_name\": \"\u00d6mer\",\n            \"last_name\": \"\u00d6zy\u0131lmazel\",\n            \"age\": 41,\n            \"birth_date\": \"1982-08-13T14:00:00.0+03:00\",\n            \"admin\": true\n        },\n        {\n            \"this\": \"This\",\n            \"is\": \"is\",\n            \"fake\": \"fake\"\n        }\n    ]`\n\nb := []byte(input)\nd := json.NewDecoder(bytes.NewReader(b))\n// accepts io.Reader, convert byte slice -&gt; io.Reader satisfier\n\nd.DisallowUnknownFields()\n// raise error for unknown fields\n\nvar users Users\n\n// if err := json.Unmarshal(b, &amp;users); err != nil {\n//  log.Fatal(err)\n// }\n\nif err := d.Decode(&amp;users); err != nil {\nfmt.Println(err) // json: unknown field \"this\"\n}\n\nfmt.Printf(\"%+v\\n\", users)\n// [{FirstName:U\u011fur LastName:\u00d6zy\u0131lmazel Age:51 BirthDate:1972-08-13 09:00:00 +0300 +0300 Admin:false LastVisit:&lt;nil&gt;} {FirstName:\u00d6mer LastName:\u00d6zy\u0131lmazel Age:41 BirthDate:1982-08-13 14:00:00 +0300 +03 Admin:true LastVisit:&lt;nil&gt;} {FirstName: LastName: Age:0 BirthDate:0001-01-01 00:00:00 +0000 UTC Admin:false LastVisit:&lt;nil&gt;}]\n\nfor _, user := range users {\nfmt.Printf(\"%+v\\n\", user)\nfmt.Println(user.LastVisit, user.LastVisit == nil)\n}\n// {FirstName:U\u011fur LastName:\u00d6zy\u0131lmazel Age:51 BirthDate:1972-08-13 09:00:00 +0300 +0300 Admin:false LastVisit:&lt;nil&gt;}\n// &lt;nil&gt; true\n// {FirstName:\u00d6mer LastName:\u00d6zy\u0131lmazel Age:41 BirthDate:1982-08-13 14:00:00 +0300 +03 Admin:true LastVisit:&lt;nil&gt;}\n// &lt;nil&gt; true\n// {FirstName: LastName: Age:0 BirthDate:0001-01-01 00:00:00 +0000 UTC Admin:false LastVisit:&lt;nil&gt;}\n// &lt;nil&gt; true\n\n\nj, err := json.MarshalIndent(users, \"\", \"    \")\nif err != nil {\nlog.Fatal(err)\n}\n\nfmt.Printf(\"%s\\n\\n\", j)\n// [\n//     {\n//         \"first_name\": \"U\u011fur\",\n//         \"last_name\": \"\u00d6zy\u0131lmazel\",\n//         \"age\": 51,\n//         \"birth_date\": \"1972-08-13T09:00:00+03:00\",\n//         \"admin\": false,\n//         \"last_visit\": null\n//     },\n//     {\n//         \"first_name\": \"\u00d6mer\",\n//         \"last_name\": \"\u00d6zy\u0131lmazel\",\n//         \"age\": 41,\n//         \"birth_date\": \"1982-08-13T14:00:00+03:00\",\n//         \"admin\": true,\n//         \"last_visit\": null\n//     },\n//     {\n//         \"first_name\": \"\",\n//         \"last_name\": \"\",\n//         \"age\": 0,\n//         \"birth_date\": \"0001-01-01T00:00:00Z\",\n//         \"admin\": false,\n//         \"last_visit\": null\n//     }\n// ]\n\n}\n</code></pre> <p>Son alan; <code>\"this\": \"This\",</code> ile ba\u015flayan k\u0131s\u0131m i\u015flenmedi ama <code>user</code>\u2019\u0131n son de\u011feri <code>User</code> struct\u2019\u0131n\u0131n zero-value (empty)\u2019lar\u0131yla doldu. Yani bu decode i\u015fleminde 3 tane eleman\u0131 olan bir slice \u00e7\u0131kt\u0131.</p>"},{"location":"13/01-json-ile-calismak/#generic-interface","title":"Generic Interface","text":"<p>Elimizde raw string oldu\u011funda bunu <code>map[string]any</code>\u2019e cast ederek, i\u00e7indeki di\u011fer verilere de ula\u015fabiliriz.</p> <p>E\u011fer baz\u0131 alanlar\u0131n opsiyonel olmas\u0131n\u0131 istiyorsak, \u00f6zellikle <code>struct</code>\u2019a <code>Unmarshal</code> ederken, struct i\u00e7ine bir tane joker alan koyup bunu <code>map[string]any</code> yap\u0131yoruz ve eksik alanlar\u0131 bu map\u2019ten siliyoruz:</p> <p>https://go.dev/play/p/u1mm5nr-jJx</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n\"log\"\n)\n\n// User holds user data\ntype User struct {\nName      string `json:\"name\"`\nEmail     string\nAge       int\nOptionals map[string]any `json:\"-\"`\n}\n\nfunc main() {\nincoming := `{\n        \"name\": \"U\u011fur\",\n        \"email\": \"vigo@example.com\",\n        \"age\": 51,\n        \"foo\": 1,\n        \"bar\": \"2\"\n    }`\n\nu := User{}\nif err := json.Unmarshal([]byte(incoming), &amp;u.Optionals); err != nil {\nlog.Fatal(err)\n}\n\nfmt.Println(\"u.Optionals\", u.Optionals)\n// u.Optionals map[age:51 bar:2 email:vigo@example.com foo:1 name:U\u011fur]\n\nif v, ok := u.Optionals[\"name\"].(string); ok {\nu.Name = string(v)\ndelete(u.Optionals, \"name\")\n}\nif v, ok := u.Optionals[\"email\"].(string); ok {\nu.Email = string(v)\ndelete(u.Optionals, \"email\")\n}\nif v, ok := u.Optionals[\"age\"].(float64); ok {\nu.Age = int(v)\ndelete(u.Optionals, \"age\")\n}\n\nfmt.Printf(\"u: %+v\\n\", u)\n// u: {Name:U\u011fur Email:vigo@example.com Age:51 Optionals:map[bar:2 foo:1]}\n\nif u.Email != \"\" {\nfmt.Println(\"u.Email\", u.Email)\n// u.Email vigo@example.com\n}\nif u.Age != 0 {\nfmt.Println(\"u.Age\", u.Age)\n// u.Age 51\n}\n\nif len(u.Optionals) &gt; 0 {\nfmt.Printf(\"you have %d invalid field(s)\\n\", len(u.Optionals))\n// you have 2 invalid field(s)\n\nfor v := range u.Optionals {\nfmt.Printf(\"%q\\n\", v)\n}\n// \"foo\"\n// \"bar\"\n}\n}\n</code></pre> <p><code>Unmarshal</code> i\u015flemine ba\u015flamadan \u00f6nce, gelen verinin json\u2019a uygun olup olmad\u0131\u011f\u0131n\u0131 do\u011frulamak i\u00e7in <code>json.Valid</code> kullan\u0131yoruz;</p> <p>https://go.dev/play/p/Z0a7mVQpXoU</p> <pre><code>package main\n\nimport (\n\"encoding/json\"\n\"fmt\"\n)\n\nfunc main() {\ngoodJSON := `{\"example\": 1}`\nbadJSON := `{\"example\":2:]}}`\n\nfmt.Println(\"goodJSON is valid?\", json.Valid([]byte(goodJSON)))\n// goodJSON is valid? true\n\nfmt.Println(\"badJSON is valid?\", json.Valid([]byte(badJSON)))\n// badJSON is valid? false\n}\n// goodJSON is valid? true\n// badJSON is valid? false\n</code></pre>"},{"location":"13/01-json-ile-calismak/#streaming","title":"Streaming","text":"<p>Uygulanan\u0131z ba\u015fka bir servise rest-api \u00fczerinden <code>json</code> ile veri \u00e7ekiyor fakat gelen veri json array \u015feklinde de\u011fil;</p> <p>https://go.dev/play/p/H95BTncScTb</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"bytes\"\n\"encoding/json\"\n\"fmt\"\n\"log\"\n\"strings\"\n)\n\n// Person represents person model.\ntype Person struct {\nName string `json:\"name\"`\nAge  int    `json:\"age\"`\n}\n\n// People represents collection on Person slice.\ntype People []Person\n\nfunc main() {\n// bulk data, looks like json array?\nincoming := `\n    {\"name\": \"Fred\", \"age\": 40}\n    {\"name\": \"Mary\", \"age\": 21}\n    {\"name\": \"Pat\", \"age\": 30}\n    `\n\ndecoder := json.NewDecoder(strings.NewReader(incoming))\n\nvar b bytes.Buffer\nencoder := json.NewEncoder(&amp;b)\n\nvar p Person\nvar people People\n\nfor decoder.More() {\nif err := decoder.Decode(&amp;p); err != nil {\nlog.Print(\"decode err\", err)\ncontinue\n}\n\nfmt.Printf(\"p: %+v\\n\", p)\n// p: {Name:Fred Age:40}\n// p: {Name:Mary Age:21}\n// p: {Name:Pat Age:30}\n\npeople = append(people, p)\n\nif err := encoder.Encode(p); err != nil {\nlog.Panic(\"encode err\", err) // do not panic!\n}\n}\n\nfmt.Println(b.Bytes())\n// [123 34 110 97 109 101 34 58 34 70 114 101 100 34 44 34 97 103 101 34 58 52 48 125 10 123 34 110 97 109 101 34 58 34 77 97 114 121 34 44 34 97 103 101 34 58 50 49 125 10 123 34 110 97 109 101 34 58 34 80 97 116 34 44 34 97 103 101 34 58 51 48 125 10]\n\n// fmt.Println(string(b.Bytes()))\nfmt.Println(b.String())\n// {\"name\":\"Fred\",\"age\":40}\n// {\"name\":\"Mary\",\"age\":21}\n// {\"name\":\"Pat\",\"age\":30}\n\nfmt.Printf(\"people: %+v\\n\", people)\n// people: [{Name:Fred Age:40} {Name:Mary Age:21} {Name:Pat Age:30}]\n\nj, _ := json.MarshalIndent(people, \"\", \"    \")\nfmt.Printf(\"%s\\n\", j)\n// [\n//     {\n//         \"name\": \"Fred\",\n//         \"age\": 40\n//     },\n//     {\n//         \"name\": \"Mary\",\n//         \"age\": 21\n//     },\n//     {\n//         \"name\": \"Pat\",\n//         \"age\": 30\n//     }\n// ]\n}\n</code></pre>"},{"location":"14/01-test/","title":"B\u00f6l\u00fcm 14/01: Test","text":""},{"location":"14/01-test/#test-nedir-neden-yazlr","title":"Test Nedir? Neden Yaz\u0131l\u0131r?","text":"<p>Yazd\u0131\u011f\u0131m\u0131z kodun, fonksiyonun, metotlar\u0131n \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 garanti etmek i\u00e7in uygulanan y\u00f6ntemdir. Basit mant\u0131k \u015fu, fonksiyon girdi (input) al\u0131r, bir i\u015f yapar ve \u00e7\u0131kt\u0131 (output) \u00fcretir. Toplama i\u015flemi yapan bir fonksiyon, iki tane say\u0131 al\u0131r, i\u015flemi yapar ve geriye sonu\u00e7 d\u00f6ner:</p> <pre><code>girdi: 1,2  -&gt;  1+2 =&gt; \u00e7\u0131kt\u0131: 3\ngirdi: 0,0  -&gt;  0+0 =&gt; \u00e7\u0131kt\u0131: 0\ngirdi: -1,1 -&gt; -1+1 =&gt; \u00e7\u0131kt\u0131: 0\n</code></pre> <p>\u0130\u015fte t\u00fcm bu varyasyonlar\u0131 (use case\u2019leri) denedi\u011fimiz kod par\u00e7as\u0131na test kodu, birim test kodu ya da unit testing denir.</p> <p>Go, kendi i\u00e7inde built-in test ara\u00e7lar\u0131yla birlikte gelir. <code>testing</code> paketi bu i\u015f i\u00e7in kullan\u0131l\u0131r. Sonu <code>_test.go</code> ile biten dosyalar testlerin yaz\u0131ld\u0131\u011f\u0131 dosyalard\u0131r. Go, test\u2019leri \u00e7al\u0131\u015ft\u0131r\u0131rken otomatik olarak bu dosyalar\u0131 i\u015fler.</p> <p>Bizden istenen bir fonksiyon olsa; biz o fonksiyona kimi zaten bir tane, kimi zaman <code>n</code> tane isim versek (string), fonksiyon bizi selamlasa;</p> <pre><code>SayHi()                 // hi everybody!\nSayHi(\"u\u011fur\")           // hi u\u011fur \nSayHi(\"u\u011fur\", \"erhan\")  // hi u\u011fur\n// hi erhan\n</code></pre> <p>Haydi \u015fimdi koda bakal\u0131m:</p> <p>\u00d6rnek</p> <p><code>greet/greet.go</code>:</p> <pre><code>package greet\n\nimport \"strings\"\n\n// SayHi greets given names.\nfunc SayHi(names ...string) string {\nif len(names) == 0 {\nreturn \"hi everybody!\"\n}\nout := make([]string, len(names))\nfor i, name := range names {\nout[i] = \"hi \" + name + \"!\"\n}\n\nreturn strings.Join(out, \"\\n\")\n}\n</code></pre> <p><code>main.go</code>:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\"\n)\n\nfunc main() {\nfmt.Println(greet.SayHi())       // hi everybody!\nfmt.Println(greet.SayHi(\"u\u011fur\")) // hi u\u011fur!\nfmt.Println(greet.SayHi(\"u\u011fur\", \"erhan\"))\n// hi u\u011fur!\n// hi erhan!\n}\n</code></pre> <p>\u015eimdi bu fonksiyonun ger\u00e7ekten bizim verdi\u011fimiz girdileri do\u011fru i\u015fleyip i\u015flemedi\u011fini g\u00f6relim. <code>greet_test.go</code> isminde bir dosya olu\u015fturuyoruz ve;</p> <pre><code>package greet_test\n\nimport (\n\"fmt\"\n\"testing\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\"\n)\n\nfunc TestSayHi(t *testing.T) {\nwant := \"hi vigo!\"\ngot := greet.SayHi(\"vigo\")\n\nif got != want {\nt.Errorf(\"want: %v; got: %v\", want, got)\n}\n}\n\nfunc TestSayHiWithNoArgs(t *testing.T) {\nwant := \"hi everybody!\"\ngot := greet.SayHi()\n\nif got != want {\nt.Errorf(\"want: %v; got: %v\", want, got)\n}\n}\n\nfunc TestSayHiWithArgs(t *testing.T) {\nwant := \"hi vigo!\\nhi turbo!\\nhi max!\"\ngot := greet.SayHi(\"vigo\", \"turbo\", \"max\")\n\nif got != want {\nt.Errorf(\"want: %v; got: %v\", want, got)\n}\n}\n\n// This is example of single argument usage.\nfunc ExampleSayHi() {\nfmt.Println(greet.SayHi(\"vigo\"))\n// Output: hi vigo!\n}\n\n// This is example of no argument usage.\nfunc ExampleSayHi_withNoArg() {\nfmt.Println(greet.SayHi())\n// Output: hi everybody!\n}\n\n// This is example of with many arguments usage.\nfunc ExampleSayHi_withArgs() {\nfmt.Println(greet.SayHi(\"vigo\", \"turbo\", \"max\"))\n// Output: hi vigo!\n// hi turbo!\n// hi max!\n}\n</code></pre>"},{"location":"14/01-test/#test-nasl-calstrlr","title":"Test Nas\u0131l \u00c7al\u0131\u015ft\u0131r\u0131l\u0131r","text":"<p>Test etmek istedi\u011fimiz senaryolar\u0131 <code>Test</code> kelimesiyle ba\u015flatan test fonksiyonlar\u0131 \u015feklinde yaz\u0131yoruz. <code>Test&lt;NEY\u0130_TEST_EDIYORUZ?&gt;</code>. Bizim i\u00e7in 3 konu vard\u0131;</p> <ol> <li>Hi\u00e7 arg\u00fcman verilmezse <code>TestSayHiWithNoArgs</code></li> <li>Tek arg\u00fcman verilirse <code>TestSayHi</code></li> <li>N tane arg\u00fcman verilirse <code>TestSayHiWithArgs</code></li> </ol> <p>Ayn\u0131 test fonksiyonular\u0131 gibi <code>Example</code> kelimesiyle ba\u015flayan ve ayn\u0131 test gibi \u00e7al\u0131\u015fan \u00f6rnekler de ekledik. Bu \u00f6rnekler dok\u00fcmantasyon i\u00e7in \u00e7ok faydal\u0131d\u0131r.</p> <p>\u015eimdi testleri \u00e7al\u0131\u015ft\u0131ral\u0131m:</p> <pre><code>$ # go test &lt;PAKET-ADI&gt;\n$ # go test &lt;T\u00dcM-PAKETLER&gt;\n\n$ go test ./...        # go projesi alt\u0131ndaki t\u00fcm paketlerin testlerini \u00e7al\u0131\u015ft\u0131r\n\n$ go list ./...        # go projesi alt\u0131ndaki t\u00fcm paketleri listele\n$ go test github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet    (cached)\n\n# verbose mode\n$ go test -v github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\n=== RUN   TestSayHi\n--- PASS: TestSayHi (0.00s)\n=== RUN   TestSayHiWithNoArgs\n--- PASS: TestSayHiWithNoArgs (0.00s)\n=== RUN   TestSayHiWithArgs\n--- PASS: TestSayHiWithArgs (0.00s)\n=== RUN   ExampleSayHi\n--- PASS: ExampleSayHi (0.00s)\n=== RUN   ExampleSayHi_withNoArg\n--- PASS: ExampleSayHi_withNoArg (0.00s)\n=== RUN   ExampleSayHi_withArgs\n--- PASS: ExampleSayHi_withArgs (0.00s)\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet    0.406s\n</code></pre> <p><code>(cached)</code> ifadesi, bu testin daha \u00f6nce \u00e7al\u0131\u015ft\u0131\u011f\u0131 ve kodda bir de\u011fi\u015fiklik olmad\u0131\u011f\u0131n\u0131, bu bak\u0131mdan da testin asl\u0131nda tekrar \u00e7al\u0131\u015fmad\u0131\u011f\u0131n\u0131 ifade eder. E\u011fer cache\u2019i silmek istersek;</p> <pre><code>$ go clean -testcache\n</code></pre>"},{"location":"14/01-test/#examples-ve-godoc","title":"Examples ve godoc","text":"<p>yeterlidir. Hemen <code>Example</code>\u2019lar ne i\u015fe yar\u0131yor onu g\u00f6relim. \u00d6ncelikle <code>godoc</code>\u2019u kural\u0131m:</p> <pre><code>$ go install golang.org/x/tools/cmd/godoc@latest\n$ godoc -http=:6060  # doc sunucusu 6060 portundan \u00e7al\u0131\u015facak\n</code></pre> <p>sonra;</p> <p>http://127.0.0.1:6060/pkg/github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet/</p> <p>Example\u2019lar\u0131 yazarken;</p> <pre><code>func Example() { ... }\nfunc ExampleF() { ... }\nfunc ExampleT() { ... }\nfunc ExampleT_M() { ... }\n</code></pre> <p>Yani;</p> <ul> <li><code>Example()</code></li> <li><code>ExampleSayHi()</code> -&gt; <code>F()</code> =&gt; <code>SayHi()</code>\u2019a denk geliyor</li> <li><code>ExampleT()</code> -&gt; E\u011fer custom bir type yaz\u0131p test etmek istesek, <code>ExampleUser()</code> gibi</li> <li><code>ExampleT_M()</code> -&gt; Custom type\u2019\u0131n metotu yani <code>ExampleUser_List()</code> gibi..</li> </ul> <p>durumlarda kullan\u0131yoruz. Keza;</p> <pre><code>func Example_suffix() { ... }\nfunc ExampleF_suffix() { ... }\nfunc ExampleT_suffix() { ... }\nfunc ExampleT_M_suffix() { ... }\n</code></pre> <p>\u015feklinde de kullanabiliyoruz. Ayn\u0131 \u015fekilde biz de;</p> <ul> <li><code>ExampleSayHi_withNoArg()</code></li> <li><code>ExampleSayHi_withArgs()</code></li> </ul> <p>kulland\u0131k.</p> <pre><code>// Output: .....\n</code></pre> <p>ile \u00e7\u0131kt\u0131s\u0131n\u0131 yaz\u0131yoruz. Bu sayede ayn\u0131 test gibi \u00e7al\u0131\u015fm\u0131\u015f oluyorlar. E\u011fer bir \u00f6rne\u011fin <code>Output</code> comment\u2019i yoksa kod derleniyor ama \u00e7al\u0131\u015ft\u0131r\u0131lm\u0131yor.</p> <p><code>Example</code> sayesinde yazd\u0131\u011f\u0131m\u0131z kodu kullanacak ki\u015fiye copy/paste yaparak \u00f6rnek kod par\u00e7as\u0131n\u0131 hemen al\u0131p kendi koduna entegre edecek bir kolayl\u0131k sa\u011fl\u0131yoruz.</p> <p>Test fonksiyonlar\u0131n\u0131 teker teker de \u00e7al\u0131\u015ft\u0131rabiliriz:</p> <pre><code>$ go test -v -run ^TestSayHi$ ./...\n# go projesi alt\u0131ndaki t\u00fcm paketleri tara, \"TestSayHi\" olan\u0131 \u00e7al\u0131\u015ft\u0131r (regex match)\n\n$ go test -v -run ^TestSayHi ./...\n# go projesi alt\u0131ndaki t\u00fcm paketleri tara, \"TestSayHi\" ile ba\u015flayanlar\u0131 \u00e7al\u0131\u015ft\u0131r (regex match)\n\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/02/01-init [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-custom-tag    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access/person   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access-getter   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access-getter/person    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-alignment   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-validate  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-constraints    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-custom-types   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-function-calls [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-function-calls-and-types   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-function-calls-and-types2  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-functions  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-functions-interface    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-in-maps    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-in-structs [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/12/reflect-clearvalue  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/12/reflect-typecheck   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-generic-interface  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-custom-decode  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-marshal-custom-time    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-streaming  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet  [no test files]\n=== RUN   TestSayHi\n--- PASS: TestSayHi (0.00s)\n=== RUN   TestSayHiWithNoArgs\n--- PASS: TestSayHiWithNoArgs (0.00s)\n=== RUN   TestSayHiWithArgs\n--- PASS: TestSayHiWithArgs (0.00s)\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet    (cached)\n\n$ go test -v -run ^TestSayHi github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\n# github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\n# paketi i\u00e7inde \"TestSayHi\" ile ba\u015flayanlar\u0131 \u00e7al\u0131\u015ft\u0131r (regex match)\n\n=== RUN   TestSayHi\n--- PASS: TestSayHi (0.00s)\n=== RUN   TestSayHiWithNoArgs\n--- PASS: TestSayHiWithNoArgs (0.00s)\n=== RUN   TestSayHiWithArgs\n--- PASS: TestSayHiWithArgs (0.00s)\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet    (cached)\n</code></pre> <p>Test fonksiyonlar\u0131 <code>testing</code> paketinden duruma g\u00f6re arg\u00fcman al\u0131r. \u00d6rne\u011fimizde <code>t *testing.T</code> al\u0131yoruz. <code>T</code>\u2019nin yard\u0131mc\u0131 fonksiyonlar\u0131n\u0131 kullanarak testimizi geli\u015ftirece\u011fiz.</p> <p>Kabaca bu yapt\u0131\u011f\u0131m\u0131z i\u015f assertion yani bir \u015fey iddia ediyoruz! Bize \u015fu fonksiyonu \u015fu arg\u00fcmanlarla \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131z zaman sonucun da bu olmas\u0131 laz\u0131m!</p> <p>Yine adetlere uyarak <code>want</code> ve <code>got</code> identifer\u2019lar\u0131n\u0131 kullan\u0131yoruz. Bu zorunlu de\u011fil ama hep s\u00f6yledi\u011fimiz \u015fey conventions over configurations :)</p> <p>Beklentimizi ve fonksiyon \u00e7\u0131kt\u0131s\u0131n\u0131 tan\u0131mlad\u0131ktan sonra yapacak tek i\u015f bu iki de\u011fi\u015fkenin de\u011ferlerinin birbirine e\u015fit olup olmad\u0131\u011f\u0131? y\u00f6n\u00fcnde.</p> <p>Testi yazarken belli durumlarda;</p> <ul> <li><code>t.Fatal</code>, <code>t.Fatalf</code> \u00e7al\u0131\u015fma durur, buna fail fast denir, test ilerlemez!</li> <li><code>t.Error</code>, <code>t.Errorf</code> hata olsa bile di\u011fer testler \u00e7al\u0131\u015fmaya devam eder...</li> <li><code>b.Fatal</code>, <code>b.Fatalf</code> \u00e7al\u0131\u015fma durur, buna fail fast denir, test ilerlemez!</li> <li><code>b.Error</code>, <code>b.Errorf</code> hata olsa bile di\u011fer testler \u00e7al\u0131\u015fmaya devam eder...</li> <li><code>t.Fail</code>, <code>b.Fail</code> testi fail olarak i\u015faretler ama di\u011ferlerini run etmeye devam eder...</li> <li><code>t.FailNow</code>, <code>b.FailNow</code>: \u00e7al\u0131\u015fma durur,  <code>runtime.Goexit()</code> \u00e7a\u011fr\u0131l\u0131r, defer edenler devam eder, test durmaz</li> </ul> <p>Test \u00e7\u0131kt\u0131s\u0131n\u0131 <code>json</code> format\u0131nda da alabiliriz:</p> <pre><code>$ go test -v -json github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\n{\"Time\":\"2023-08-15T18:10:23.539298+03:00\",\"Action\":\"start\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\"}\n{\"Time\":\"2023-08-15T18:10:23.539368+03:00\",\"Action\":\"run\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHi\"}\n{\"Time\":\"2023-08-15T18:10:23.539371+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHi\",\"Output\":\"=== RUN   TestSayHi\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539379+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHi\",\"Output\":\"--- PASS: TestSayHi (0.00s)\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539381+03:00\",\"Action\":\"pass\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHi\",\"Elapsed\":0}\n{\"Time\":\"2023-08-15T18:10:23.539384+03:00\",\"Action\":\"run\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithNoArgs\"}\n{\"Time\":\"2023-08-15T18:10:23.539385+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithNoArgs\",\"Output\":\"=== RUN   TestSayHiWithNoArgs\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539395+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithNoArgs\",\"Output\":\"--- PASS: TestSayHiWithNoArgs (0.00s)\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539398+03:00\",\"Action\":\"pass\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithNoArgs\",\"Elapsed\":0}\n{\"Time\":\"2023-08-15T18:10:23.539399+03:00\",\"Action\":\"run\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithArgs\"}\n{\"Time\":\"2023-08-15T18:10:23.539401+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithArgs\",\"Output\":\"=== RUN   TestSayHiWithArgs\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539403+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithArgs\",\"Output\":\"--- PASS: TestSayHiWithArgs (0.00s)\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539417+03:00\",\"Action\":\"pass\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"TestSayHiWithArgs\",\"Elapsed\":0}\n{\"Time\":\"2023-08-15T18:10:23.539419+03:00\",\"Action\":\"run\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi\"}\n{\"Time\":\"2023-08-15T18:10:23.539421+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi\",\"Output\":\"=== RUN   ExampleSayHi\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539422+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi\",\"Output\":\"--- PASS: ExampleSayHi (0.00s)\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539428+03:00\",\"Action\":\"pass\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi\",\"Elapsed\":0}\n{\"Time\":\"2023-08-15T18:10:23.539429+03:00\",\"Action\":\"run\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withNoArg\"}\n{\"Time\":\"2023-08-15T18:10:23.53943+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withNoArg\",\"Output\":\"=== RUN   ExampleSayHi_withNoArg\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539537+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withNoArg\",\"Output\":\"--- PASS: ExampleSayHi_withNoArg (0.00s)\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539538+03:00\",\"Action\":\"pass\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withNoArg\",\"Elapsed\":0}\n{\"Time\":\"2023-08-15T18:10:23.53954+03:00\",\"Action\":\"run\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withArgs\"}\n{\"Time\":\"2023-08-15T18:10:23.539541+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withArgs\",\"Output\":\"=== RUN   ExampleSayHi_withArgs\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539543+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withArgs\",\"Output\":\"--- PASS: ExampleSayHi_withArgs (0.00s)\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539545+03:00\",\"Action\":\"pass\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Test\":\"ExampleSayHi_withArgs\",\"Elapsed\":0}\n{\"Time\":\"2023-08-15T18:10:23.539547+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Output\":\"PASS\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539548+03:00\",\"Action\":\"output\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Output\":\"ok  \\tgithub.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\\t(cached)\\n\"}\n{\"Time\":\"2023-08-15T18:10:23.539555+03:00\",\"Action\":\"pass\",\"Package\":\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet\",\"Elapsed\":0}\n</code></pre> <p>Keza di\u011fer bir komut sat\u0131r\u0131 arg\u00fcman\u0131 da <code>-list</code>. <code>-list &lt;regex&gt;</code> ile test fonksiyonlar\u0131n\u0131 \u00e7al\u0131\u015ft\u0131r\u0131r ve listeler;</p> <pre><code>$ go test -v -list Say ./...\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/02/01-init [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-custom-tag    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access/person   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access-getter   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-access-getter/person    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-field-alignment   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/04/05-struct-validate  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-constraints    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-custom-types   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-function-calls [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-function-calls-and-types   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-function-calls-and-types2  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-functions  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-functions-interface    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-in-maps    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/11/generics-in-structs [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/12/reflect-clearvalue  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/12/reflect-typecheck   [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-custom-decode  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-generic-interface  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-marshal-custom-time    [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/13/json-streaming  [no test files]\n?       github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet  [no test files]\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore   0.680s\nTestSayHi\nTestSayHiWithNoArgs\nTestSayHiWithArgs\nExampleSayHi\nExampleSayHi_withNoArg\nExampleSayHi_withArgs\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-greet/greet    0.550s\n</code></pre> <p><code>go test</code>\u2019in ald\u0131\u011f\u0131 t\u00fcm parametrelerin detaylar\u0131n\u0131:</p> <pre><code>$ go help testflag\n</code></pre> <p>ile g\u00f6rebilirsiniz.</p>"},{"location":"14/01-test/#data-race-detection","title":"Data Race Detection","text":"<p>Race Condition, concurrent (e\u015f zamanl\u0131) programla ile ilgili s\u0131k ya\u015fanan bir durum. Basit\u00e7e \u015f\u00f6yle a\u00e7\u0131klayal\u0131m; bir web uygulamas\u0131 var, veritaban\u0131na ba\u011fl\u0131. Veritaban\u0131 tablosunda <code>count</code> ad\u0131nda bir alan ver, say\u0131sal de\u011fer tutuyor. Kullan\u0131c\u0131 <code>example.com</code> sayfas\u0131n\u0131 \u00e7a\u011f\u0131rd\u0131\u011f\u0131 zaman uygulama tablodaki <code>count</code> alan\u0131n\u0131n de\u011ferini <code>+1</code> artt\u0131r\u0131yor.</p> <ul> <li>\u0130lk kullan\u0131c\u0131 geldi, de\u011fer 0 -&gt; 1 oldu</li> <li>\u0130kinci kullan\u0131c\u0131 geldi, de\u011fer 1 -&gt; 2 oldu</li> </ul> <p>peki 3. ve 4. kullan\u0131c\u0131 ayn\u0131 anda gelince ne olacak?</p> <pre><code>3. Kullan\u0131c\u0131    | 4. Kullan\u0131c\u0131\n|               |\n\u2193               \u2193\n2 -&gt; 3          2 -&gt; 3\n</code></pre> <p>Ayn\u0131 anda geldiler ve ikisi i\u00e7in de \u00f6nceki de\u011fer <code>2</code> idi, 3. kullan\u0131c\u0131 de\u011feri <code>3</code> yapt\u0131 ama 4. i\u00e7in de\u011fer halen <code>2</code> idi. Bu durumda istekler birbirleriyle  yar\u0131\u015f yapm\u0131\u015f oluyorlar ve bu durum yar\u0131\u015f durumu yani race condition oluyor.</p> <p>Do\u011fru olan durum ise \u015f\u00f6yle olmal\u0131yd\u0131;</p> <ul> <li> <ol> <li>geldi, bir t\u00fcr kitleme (lock) olmal\u0131yd\u0131.</li> </ol> </li> <li> <ol> <li>geldi, lock oldu\u011fu i\u00e7in beklemeliydi.</li> </ol> </li> <li> <ol> <li>i\u015fini bitirdi kiliti a\u00e7t\u0131 (unlock)</li> </ol> </li> <li> <ol> <li>lock edip do\u011fru de\u011feri okuyup, art\u0131r\u0131p unlock etmeliydi</li> </ol> </li> </ul> <p>Benzer senaryo bizim i\u00e7in go routine kulland\u0131\u011f\u0131m\u0131z zaman ya\u015fanacak. \u0130\u015fte bu t\u00fcr ka\u00e7aklar\u0131 test esnas\u0131nda yakalamak i\u00e7in <code>-race</code> parametresini kullan\u0131yoruz. \u015eimdi ayn\u0131s\u0131 go ile yapal\u0131m:</p> <p>\u00d6rnek</p> <pre><code>package kvstore\n\nimport \"errors\"\n\nvar errKeyNotFound = errors.New(\"key not found\")\n\n// Store is key-value store!\ntype Store struct {\ndb map[string]string\n}\n\n// Set new key to store.\nfunc (s *Store) Set(k, v string) error {\ns.db[k] = v\nreturn nil\n}\n\n// Get accepts key, returns value and error.\nfunc (s *Store) Get(k string) (string, error) {\nv, ok := s.db[k]\nif !ok {\nreturn \"\", errKeyNotFound\n}\nreturn v, nil\n}\n\n// New returns new Store instance.\nfunc New(db map[string]string) Store {\nreturn Store{db: db}\n}\n</code></pre> <p>Test ise;</p> <pre><code>package kvstore_test\n\nimport (\n\"testing\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore\"\n)\n\nfunc TestDataRace(t *testing.T) {\nst := make(map[string]string)\ndone := make(chan struct{})\n\ns := kvstore.New(st)\n_ = s.Set(\"foo\", \"bar\")\n\ngo func() {\n_ = s.Set(\"foo\", \"data race...\")\ndone &lt;- struct{}{}\n}()\n\nwant := \"bar\"\ngot, _ := s.Get(\"foo\") // always returns \"bar\"\n&lt;-done                 // after line 19, blocking ends... map changes but doesn't affect got variable!\n\n// fmt.Println(s.Get(\"foo\")) data race... &lt;nil&gt;\n\nif got != want {\nt.Errorf(\"want: %v; got: %v\", want, got)\n}\n}\n</code></pre> <p>\u00d6nce testi d\u00fcz \u00e7al\u0131\u015ft\u0131ral\u0131m:</p> <pre><code>$ go test -v github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore\n=== RUN   TestDataRace\n--- PASS: TestDataRace (0.00s)\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore   0.608s\n</code></pre> <p>Test <code>pass</code> etti, yani testi ge\u00e7tik, halbuki:</p> <pre><code>$ go test -v -race github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore\n=== RUN   TestDataRace\n==================\nWARNING: DATA RACE\nWrite at 0x00c00011e450 by goroutine 7:\n  runtime.mapaccess2_faststr()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/runtime/map_faststr.go:108 +0x42c\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore.(*Store).Set()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore.go:14 +0x5c\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore_test.TestDataRace.func1()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore_test.go:17 +0x38\n\nPrevious read at 0x00c00011e450 by goroutine 6:\n  runtime.mapaccess1_faststr()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/runtime/map_faststr.go:13 +0x40c\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore.(*Store).Get()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore.go:20 +0x1b8\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore_test.TestDataRace()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore_test.go:22 +0x1dc\n  testing.tRunner()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1595 +0x194\n  testing.(*T).Run.func1()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1648 +0x40\n\nGoroutine 7 (running) created at:\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore_test.TestDataRace()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore_test.go:16 +0x190\n  testing.tRunner()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1595 +0x194\n  testing.(*T).Run.func1()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1648 +0x40\n\nGoroutine 6 (running) created at:\n  testing.(*T).Run()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1648 +0x5d8\n  testing.runTests.func1()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:2054 +0x80\n  testing.tRunner()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1595 +0x194\n  testing.runTests()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:2052 +0x6d8\n  testing.(*M).Run()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1925 +0x904\n  main.main()\n_testmain.go:49 +0x294\n==================\n==================\nWARNING: DATA RACE\nWrite at 0x00c000166088 by goroutine 7:\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore.(*Store).Set()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore.go:14 +0x68\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore_test.TestDataRace.func1()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore_test.go:17 +0x38\n\nPrevious read at 0x00c000166088 by goroutine 6:\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore.(*Store).Get()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore.go:20 +0x1c4\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore_test.TestDataRace()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore_test.go:22 +0x1dc\n  testing.tRunner()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1595 +0x194\n  testing.(*T).Run.func1()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1648 +0x40\n\nGoroutine 7 (running) created at:\n  github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore_test.TestDataRace()\n/Users/vigo/Development/VBYazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore/kvstore_test.go:16 +0x190\n  testing.tRunner()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1595 +0x194\n  testing.(*T).Run.func1()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1648 +0x40\n\nGoroutine 6 (running) created at:\n  testing.(*T).Run()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1648 +0x5d8\n  testing.runTests.func1()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:2054 +0x80\n  testing.tRunner()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1595 +0x194\n  testing.runTests()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:2052 +0x6d8\n  testing.(*M).Run()\n/opt/homebrew/Cellar/go/1.21.0/libexec/src/testing/testing.go:1925 +0x904\n  main.main()\n_testmain.go:49 +0x294\n==================\ntesting.go:1465: race detected during execution of test\n--- FAIL: TestDataRace (0.00s)\n=== NAME  testing.go:1465: race detected during execution of test\nFAIL\nFAIL    github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-datarace/kvstore   0.526s\nFAIL\n</code></pre>"},{"location":"14/01-test/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://go.dev/blog/examples</li> <li>https://elliotchance.medium.com/godoc-tips-tricks-cda6571549b</li> <li>https://go.dev/blog/race-detector</li> <li>https://en.wikipedia.org/wiki/Race_condition</li> </ul>"},{"location":"14/02-table-driven-test/","title":"B\u00f6l\u00fcm 14/02: Test","text":""},{"location":"14/02-table-driven-test/#table-driven-tests","title":"Table Driven Tests","text":"<p>Test etmek istedi\u011fimiz fonksiyon i\u00e7in farkl\u0131 farkl\u0131 10 tane ayr\u0131 test yazmak yerine, girdi ve \u00e7\u0131kt\u0131y\u0131 bir <code>slice</code> i\u00e7inde okuyarak fonksiyona parametre ge\u00e7me ve sonucu test etme i\u015flemine denir.</p> <p><code>SayHi()</code> fonksiyonumuz i\u00e7in;</p> <pre><code>type test struct {\ninput    []string\nwant     string\n}\n\ntests := []test{\n{input: []string{\"vigo\"}, want: \"hi vigo!\"},\n{input: []string{\"vigo\", \"turbo\"}, want: \"hi vigo!\\nhi turbo!\"},\n{input: []string{}, want: \"hi everybody!\"},\n}\n</code></pre> <p>\u015feklinde tablomuz olsun. Testleri \u00e7al\u0131\u015ft\u0131rmak i\u00e7in;</p> <pre><code>// tests'de ka\u00e7 tane \u00f6rnek varsa...\nfor _, tc := range tests {\ngot := SayHi(tc.input...)\n\nif got != tc.want {\nt.Errorf(\"want: %v; got: %v\", tc.want, got)\n}\n}\n</code></pre> <p>yapabiliriz. E\u011fer bir noktada patlarsa, tam olarak nerede ya da ne yaparken sorun \u00e7\u0131kt\u0131\u011f\u0131n\u0131 anlamak i\u00e7in <code>test</code> struct\u2019\u0131m\u0131za ilave bir alan ekliyoruz:</p> <pre><code>type test struct {\ntestName string\ninput    []string\nwant     string\n}\n\ntests := []test{\n{testName: \"run with single arg\", input: []string{\"vigo\"}, want: \"hi vigo!\\n\"},\n{testName: \"run with multiple args\", input: []string{\"vigo\", \"turbo\"}, want: \"hi vigo!\\nhi turbo!\\n\"},\n{testName: \"run with no arg\", input: []string{}, want: \"hi everybody\"},\n}\n\nfor _, tc := range tests {\ngot := SayHi(tc.input...)\n\nif got != tc.want {\nt.Errorf(\"[%s]: want: %v; got: %v\", tc.testName, tc.want, got)\n}\n}\n</code></pre> <p>Testi \u00e7al\u0131\u015ft\u0131ral\u0131m:</p> <p>\u00d6rnek</p> <pre><code>$ go test -v github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-table-driven/greet\n</code></pre>"},{"location":"14/02-table-driven-test/#sub-tests","title":"Sub Tests","text":"<p>Nas\u0131l ki testleri bir \u015fekilde isimlendirerek kategorize ettiysek, go bize bunu daha rahat yapma ve her par\u00e7ac\u0131\u011fa eri\u015febilecek isim verme imkan\u0131 sa\u011fl\u0131yor.</p> <p>Bu sayede istedi\u011fimiz an istedi\u011fimiz alt par\u00e7ac\u0131\u011f\u0131 \u00e7al\u0131\u015ft\u0131rabiliyoruz. Buna da sub test deniyor:</p> <p>\u00d6rnek</p> <pre><code>package greet_test\n\nimport (\n\"testing\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-table-driven-sub-tests/greet\"\n)\n\nfunc TestSayHi(t *testing.T) {\ntests := map[string]struct {\ninput []string\nwant  string\n}{\n\"run with single arg\":    {input: []string{\"vigo\"}, want: \"hi vigo!\"},\n\"run with multiple args\": {input: []string{\"vigo\", \"turbo\"}, want: \"hi vigo!\\nhi turbo!\"},\n\"run with no arg\":        {input: []string{}, want: \"hi everybody!\"},\n}\n\nfor name, tc := range tests {\nt.Run(name, func(t *testing.T) {\ngot := greet.SayHi(tc.input...)\n\nif got != tc.want {\nt.Errorf(\"want: %v; got: %v\", tc.want, got)\n}\n})\n}\n}\n</code></pre> <p>Testi \u00e7al\u0131\u015ft\u0131ral\u0131m:</p> <pre><code>$ go test -v github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-table-driven-sub-tests/greet\n=== RUN   TestSayHi\n=== RUN   TestSayHi/run_with_single_arg\n=== RUN   TestSayHi/run_with_multiple_args\n=== RUN   TestSayHi/run_with_no_arg\n--- PASS: TestSayHi (0.00s)\n--- PASS: TestSayHi/run_with_single_arg (0.00s)\n--- PASS: TestSayHi/run_with_multiple_args (0.00s)\n--- PASS: TestSayHi/run_with_no_arg (0.00s)\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-table-driven-sub-tests/greet   0.371s\n</code></pre> <p>Yine <code>tests</code> i\u00e7inde yineleme (iteration) yap\u0131yoruz fakat bu kez <code>t.Run()</code> ile testi \u00e7al\u0131\u015ft\u0131r\u0131yoruz.</p>"},{"location":"14/02-table-driven-test/#setup-ve-teardown","title":"SetUp ve TearDown","text":"<p>Testleri \u00e7al\u0131\u015ft\u0131rmadan \u00f6nce ve \u00e7al\u0131\u015ft\u0131rd\u0131ktan sonra baz\u0131 i\u015flemler yapmak isteyebiliriz. Test ba\u015flamadan \u00f6nce test i\u00e7in veritaban\u0131 olu\u015fturup test bitiminde bunu silebiliriz. Bu gibi durumlar <code>SetUp</code> ve <code>TearDown</code> anlar\u0131 olarak ifade edilir.</p> <p>Go\u2019da iki y\u00f6ntem yayg\u0131nd\u0131r. <code>func TestMain(m *testing.M)</code>ile ya da sub test ile.</p> <p><code>TestMain</code>:</p> <p>Teste ba\u015flamadan \u00f6nce baz\u0131 environment variable\u2019lar\u0131 set edelim, test bitiminde de silelim.</p> <pre><code>func TestMain(m *testing.M) {\nfmt.Println(\"do setup operations...\")\nos.Setenv(\"CUSTOM_HOST\", \"localhost\")\nos.Setenv(\"CUSTOM_PORT\", \"9000\")\n\nresult := m.Run()\n\nfmt.Println(\"do teardown operations...\")\nos.Unsetenv(\"CUSTOM_HOST\")\nos.Unsetenv(\"CUSTOM_PORT\")\n\nos.Exit(result)\n}\n</code></pre> <p>E\u011fer sub test i\u00e7inden yapmak istersek; <code>t.Run()</code> \u00f6ncesi ve sonras\u0131n\u0131 kullan\u0131r\u0131z:</p> <p>\u00d6rnek</p> <pre><code>package greet_test\n\nimport (\n\"fmt\"\n\"os\"\n\"testing\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-setup-teardown/greet\"\n)\n\nfunc TestMain(m *testing.M) {\nfmt.Println(\"do setup operations...\")\n_ = os.Setenv(\"CUSTOM_HOST\", \"localhost\")\n_ = os.Setenv(\"CUSTOM_PORT\", \"9000\")\n\nresult := m.Run()\n\nfmt.Println(\"do teardown operations...\")\n_ = os.Unsetenv(\"CUSTOM_HOST\")\n_ = os.Unsetenv(\"CUSTOM_PORT\")\n\nos.Exit(result)\n}\n\nfunc TestSayHi(t *testing.T) {\ntests := map[string]struct {\ninput []string\nwant  string\n}{\n\"run with single arg\":    {input: []string{\"vigo\"}, want: \"hi vigo!\"},\n\"run with multiple args\": {input: []string{\"vigo\", \"turbo\"}, want: \"hi vigo!\\nhi turbo!\"},\n\"run with no arg\":        {input: []string{}, want: \"hi everybody!\"},\n}\n\nfor name, tc := range tests {\n// &lt;setup code&gt;\nfmt.Println(\"setup code from sub test initiated!\")\nt.Run(name, func(t *testing.T) {\nif val, ok := os.LookupEnv(\"CUSTOM_PORT\"); ok &amp;&amp; val == \"9000\" {\nfmt.Println(\"using port 9000\")\n}\ngot := greet.SayHi(tc.input...)\n\nif got != tc.want {\nt.Errorf(\"want: %v; got: %v\", tc.want, got)\n}\n})\n// &lt;tear-down code&gt;\nfmt.Println(\"teardown code from sub test initiated!\")\n}\n}\n</code></pre> <p>\u00c7al\u0131\u015ft\u0131ral\u0131m:</p> <pre><code>$ go test -v github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-setup-teardown/greet\ndo setup operations...\n=== RUN   TestSayHi\nsetup code from sub test initiated!\n=== RUN   TestSayHi/run_with_single_arg\nusing port 9000\nteardown code from sub test initiated!\nsetup code from sub test initiated!\n=== RUN   TestSayHi/run_with_multiple_args\nusing port 9000\nteardown code from sub test initiated!\nsetup code from sub test initiated!\n=== RUN   TestSayHi/run_with_no_arg\nusing port 9000\nteardown code from sub test initiated!\n--- PASS: TestSayHi (0.00s)\n--- PASS: TestSayHi/run_with_single_arg (0.00s)\n--- PASS: TestSayHi/run_with_multiple_args (0.00s)\n--- PASS: TestSayHi/run_with_no_arg (0.00s)\nPASS\ndo teardown operations...\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-setup-teardown/greet   0.292s\n</code></pre>"},{"location":"14/02-table-driven-test/#paralel-test","title":"Paralel Test","text":"<p>Her test dedi\u011fimiz \u015fey asl\u0131nda bir test fonksiyonu ile ili\u015fkilendirilmi\u015f durumda. Yani <code>TestSayHi</code> bir test fonksiyonu. E\u011fer hangi test fonksiyonu <code>t.Paralel()</code> metotunu \u00e7a\u011f\u0131r\u0131rsa, o test art\u0131k paralelde \u00e7al\u0131\u015fan bir test haline d\u00f6n\u00fc\u015f\u00fcr.</p> <p>Ayn\u0131 sub test \u00f6rne\u011fimizi paralel \u00e7al\u0131\u015fan test haline getirelim:</p> <p>\u00d6rnek</p> <pre><code>package greet_test\n\nimport (\n\"testing\"\n\n\"github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-parallel/greet\"\n)\n\n// TestSayHi will not complete until all parallel tests started by Run have completed.\n// As a result, no other parallel tests can run in parallel to these parallel tests.\nfunc TestSayHi(t *testing.T) {\ntests := map[string]struct {\ninput []string\nwant  string\n}{\n\"run with single arg\":    {input: []string{\"vigo\"}, want: \"hi vigo!\"},\n\"run with multiple args\": {input: []string{\"vigo\", \"turbo\"}, want: \"hi vigo!\\nhi turbo!\"},\n\"run with no arg\":        {input: []string{}, want: \"hi everybody!\"},\n}\n\nfor name, tc := range tests {\ntc := tc // capture range variable to ensure that\n// tc gets bound to the correct instance.\n\nt.Run(name, func(t *testing.T) {\nt.Parallel() // run in parallel\n\ngot := greet.SayHi(tc.input...)\nif got != tc.want {\nt.Errorf(\"want: %v; got: %v\", tc.want, got)\n}\n})\n}\n}\n</code></pre> <p>\u00c7al\u0131\u015ft\u0131ral\u0131m:</p> <pre><code>$ go test -v github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-parallel/greet\n=== RUN   TestSayHi\n=== RUN   TestSayHi/run_with_no_arg\n=== PAUSE TestSayHi/run_with_no_arg\n=== RUN   TestSayHi/run_with_single_arg\n=== PAUSE TestSayHi/run_with_single_arg\n=== RUN   TestSayHi/run_with_multiple_args\n=== PAUSE TestSayHi/run_with_multiple_args\n=== CONT  TestSayHi/run_with_no_arg\n=== CONT  TestSayHi/run_with_multiple_args\n=== CONT  TestSayHi/run_with_single_arg\n--- PASS: TestSayHi (0.00s)\n--- PASS: TestSayHi/run_with_no_arg (0.00s)\n--- PASS: TestSayHi/run_with_multiple_args (0.00s)\n--- PASS: TestSayHi/run_with_single_arg (0.00s)\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-parallel/greet 0.282s\n</code></pre> <p>Paralel bir test hi\u00e7bir zaman s\u0131ral\u0131 (sequential) bir testle ayn\u0131 anda (concurrent) \u00e7al\u0131\u015fmaz ve testin \u00e7al\u0131\u015fmas\u0131, \u00fcst testin \u00e7a\u011f\u0131ran test fonksiyonu <code>return</code> edene kadar kadar ask\u0131ya al\u0131n\u0131r.</p> <p><code>CONT</code>: Continue anlam\u0131nda. <code>-parallel</code> komut sat\u0131r\u0131 arg\u00fcman\u0131 ile \u00e7al\u0131\u015fabilecek maksimum paralel test say\u0131s\u0131n\u0131 da belirtebiliyoruz:</p> <p>Default paralel test say\u0131s\u0131 <code>runtime.GOMAXPROCS</code>\u2019la set edilmi\u015f say\u0131d\u0131r. E\u011fer aksi belirtilmemi\u015fse, <code>GOMAXPROCS</code>\u2019un default de\u011feri <code>runtime.NumCPU()</code> de\u011feridir. Kulland\u0131\u011f\u0131m bilgisayarda <code>runtime.NumCPU()</code> sonucu <code>10</code>. E\u011fer <code>-parallel</code> ile hi\u00e7bir \u015fey belirlenmediyse benim kulland\u0131\u011f\u0131m bilgisayarda <code>10</code> paralel test \u00e7al\u0131\u015facak.</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"runtime\"\n)\n\nfunc main() {\nfmt.Println(runtime.NumCPU())\n}\n</code></pre> <p>\u00c7al\u0131\u015ft\u0131ral\u0131m:</p> <pre><code>$ go test -v -parallel 4 github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-parallel/greet\n</code></pre>"},{"location":"14/02-table-driven-test/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://dave.cheney.net/2019/05/07/prefer-table-driven-tests</li> <li>https://go.dev/blog/subtests</li> <li>https://www.gopherguides.com/articles/table-driven-testing-in-parallel</li> <li>https://splice.com/blog/lesser-known-features-go-test/</li> <li>https://eleni.blog/2019/05/11/parallel-test-execution-in-go/</li> </ul>"},{"location":"14/03-test-coverage/","title":"B\u00f6l\u00fcm 14/03: Test","text":""},{"location":"14/03-test-coverage/#code-coverage-nedir","title":"Code Coverage Nedir?","text":"<p>Bir proje ya da uygulama ya da paket geli\u015ftirdik. Peki yazd\u0131\u011f\u0131m\u0131z kodun ne kadar\u0131n\u0131 test ettik? Code coverage, yaz\u0131lan kodun % ka\u00e7\u0131n\u0131n test edildi\u011fini \u00f6l\u00e7me i\u015flemidir.</p> <p>\u00d6rnek</p> <pre><code>$ go test -v -cover github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet\n=== RUN   TestSayHi\n--- PASS: TestSayHi (0.00s)\n=== RUN   TestSayHiWithNoArgs\n--- PASS: TestSayHiWithNoArgs (0.00s)\n=== RUN   TestSayHiWithArgs\n--- PASS: TestSayHiWithArgs (0.00s)\n=== RUN   ExampleSayHi\n--- PASS: ExampleSayHi (0.00s)\n=== RUN   ExampleSayHi_withNoArg\n--- PASS: ExampleSayHi_withNoArg (0.00s)\n=== RUN   ExampleSayHi_withArgs\n--- PASS: ExampleSayHi_withArgs (0.00s)\nPASS\ncoverage: 100.0% of statements\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet    0.273s  coverage: 100.0% of statements\n</code></pre> <p>Sonu\u00e7: coverage: 100.0% of statements m\u00fckemmel :)</p> <p>\u015eimdi bu coverage\u2019dan profil \u00fcretip web aray\u00fcz\u00fcnde g\u00f6r\u00fcnt\u00fcleyelim:</p> <pre><code>$ go test -v -cover -coverprofile src/14/test-code-coverage/coverage.out github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet\n</code></pre> <p>\u00c7\u0131kan <code>coverage.out</code> dosyas\u0131:</p> <pre><code>$ cat src/14/test-code-coverage/coverage.out\nmode: set\ngithub.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet/greet.go:6.36,7.21 1 1\ngithub.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet/greet.go:7.21,9.3 1 1\ngithub.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet/greet.go:10.2,11.29 2 1\ngithub.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet/greet.go:11.29,13.3 1 1\ngithub.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-code-coverage/greet/greet.go:15.2,15.32 1 1\n</code></pre> <p>\u015eimdi web aray\u00fcz\u00fcnden bakal\u0131m:</p> <pre><code>$ go tool cover -html src/14/test-code-coverage/coverage.out\n\n$ go tool cover -html=src/14/test-code-coverage/coverage.out -o /tmp/test.html\n</code></pre>"},{"location":"14/04-profiling/","title":"B\u00f6l\u00fcm 14/04: Test","text":""},{"location":"14/04-profiling/#benchmarking","title":"Benchmarking","text":"<p>Yazd\u0131\u011f\u0131m\u0131z kod ne kadar h\u0131zl\u0131 \u00e7al\u0131\u015f\u0131yor? Bunu \u00f6l\u00e7mek i\u00e7in yapt\u0131\u011f\u0131m\u0131z i\u015fleme Benchmarking deniyor. Go, yine standart k\u00fct\u00fcphanesinden gelen ara\u00e7lar yard\u0131\u011f\u0131m\u0131yla bu analizi yapmam\u0131z\u0131 sa\u011fl\u0131yor.</p> <p>Test i\u00e7in <code>*testing.T</code> kullan\u0131rken, benchmarking i\u00e7in <code>*testing.B</code> kullan\u0131yor olaca\u011f\u0131z. \u015eimdi \u00f6rnek paketimize bakal\u0131m.</p> <p>\u00d6rnek</p> <p>Bir string\u2019i terse \u00e7evirmek i\u00e7in iki fonksiyonumuz var. Biri <code>Reverse</code> di\u011feri de <code>ReverseVigo</code>. \u0130kisi de kendilerine verilen string\u2019i terse \u00e7eviriyor. Arada ufak n\u00fcans farklar\u0131 var. <code>Reverse</code> fonksiyonunu go\u2019nun core developer\u2019lardan sevgili Russ Cox di\u011ferini ise ben yazd\u0131m :)</p> <pre><code>package stringutils\n\n// Reverse reverses given string\n// by Russ Cox - https://groups.google.com/g/golang-nuts/c/oPuBaYJ17t4/m/PCmhdAyrNVkJ\nfunc Reverse(s string) string {\nr := make([]rune, len(s))\n\nn := 0\nfor _, c := range s {\nr[n] = c\nn++\n}\n\nr = r[0:n]\nfor i := 0; i &lt; n/2; i++ {\nr[i], r[n-1-i] = r[n-1-i], r[i]\n}\n\nreturn string(r)\n}\n\n// ReverseVigo reverses given string too! a little buggy!\nfunc ReverseVigo(s string) string {\nss := make([]rune, len(s))\n\nfor i, c := range s {\nss[len(s)-1-i] = c\n}\nreturn string(ss)\n}\n</code></pre> <p>\u015eimdi bu iki fonksiyonun performans\u0131n\u0131 \u00f6l\u00e7elim:</p> <pre><code>$ go test -bench . -run none -benchtime 3s github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\ngoos: darwin\ngoarch: arm64\npkg: github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\nBenchmarkReverse-10         24825723           128.4 ns/op\nBenchmarkReverseVigo-10     26858864           128.6 ns/op\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils   7.511s\n</code></pre> <p>Komutun a\u00e7\u0131klamas\u0131:</p> <ul> <li><code>-run none</code>: testlerden ad\u0131nda none ge\u00e7enleri \u00e7al\u0131\u015ft\u0131r, ad\u0131 none   olan test olmad\u0131\u011f\u0131 i\u00e7in otomatik olarak testler \u00e7al\u0131\u015fmadan direk benchmark\u2019a   ge\u00e7!</li> <li><code>-bench .</code>: asl\u0131nda <code>-bench &lt;regex&gt;</code> ve <code>.</code> any anlam\u0131nda, t\u00fcm   <code>Benchmark&lt;XXX&gt;</code> fonksiyonlar\u0131 \u00e7al\u0131\u015ft\u0131r</li> <li><code>-benchtime 3s</code>: default \u00e7al\u0131\u015fma s\u00fcresi <code>1s</code> (saniye), biz <code>3s</code> saniye \u00e7al\u0131\u015ft\u0131rmas\u0131n\u0131 istedik.</li> <li><code>Reverse</code> fonksiyonunu <code>24.825.723</code> kere \u00e7al\u0131\u015fm\u0131\u015f</li> <li><code>ReverseVigo</code> fonksiyonunu <code>26.858.864</code> kere \u00e7al\u0131\u015fm\u0131\u015f</li> </ul> <p><code>Reverse</code> fonksiyonunu, call ba\u015f\u0131na (operasyon) 128.4 nano saniye t\u00fcketmi\u015f. Yani nano seconds per operation. Benim yapt\u0131\u011f\u0131m da fena de\u011fil, bir t\u0131k yava\u015f kalm\u0131\u015f, 128.6 nano saniye s\u00fcrm\u00fc\u015f bir fonksiyon \u00e7a\u011fr\u0131m\u0131.</p> <p>Benchmark testi yaparken, testi yapt\u0131\u011f\u0131n\u0131z bilgisayar\u0131n minimum kaynak t\u00fcketmesini sa\u011flay\u0131n. \u0130lave process (\u00e7al\u0131\u015fan gereksiz uygulamalar\u0131 kapat\u0131n) \u00e7al\u0131\u015fmas\u0131n, 2. monit\u00f6r ba\u011fl\u0131 olmas\u0131n, ek hard-disk ba\u011fl\u0131 olmas\u0131n, hatta m\u00fcmk\u00fcnse internet ba\u011flant\u0131s\u0131 bile olmas\u0131n!</p> <pre><code>var gs string\n\nfunc BenchmarkReverse(b *testing.B) {\nvar s string\n\nfor i := 0; i &lt; b.N; i++ { // b.N'in alaca\u011f\u0131 de\u011fer, o an ki resource t\u00fcketimine ba\u011fl\u0131\ns = stringutils.Reverse(\"akl\u0131ndaysa kap\u0131nda!\") // mutlaka assignment yapmal\u0131y\u0131z aksi halde bu k\u0131s\u0131m \u00e7al\u0131\u015fmam\u0131z olur!\n}\ngs = s // mutlaka loop d\u0131\u015f\u0131nda assignment yap\u0131lmal\u0131.\n}\n\nfunc BenchmarkReverseVigo(b *testing.B) {\nvar s string\n\nfor i := 0; i &lt; b.N; i++ {\ns = stringutils.ReverseVigo(\"akl\u0131ndaysa kap\u0131nda!\")\n}\ngs = s\n}\n</code></pre> <p>Yani benchmark testlerinde, mutlaka test edece\u011fimiz fonksiyonun return value\u2019sunu, loop i\u00e7inde bir de\u011fi\u015fkene atamal\u0131 ve mutlaka loop d\u0131\u015f\u0131nda da assign edip kullanmal\u0131y\u0131z. Yani iki kere (loop i\u00e7inde ve d\u0131\u015f\u0131nda) bu atamay\u0131 yapmam\u0131z gerekiyor!</p> <p>Aksi halde; mesela;</p> <pre><code>func BenchmarkReverse(b *testing.B) {\nfor i := 0; i &lt; b.N; i++ { // b.N'in alaca\u011f\u0131 de\u011fer, o an ki resource t\u00fcketimine ba\u011fl\u0131\n// stringutils.Reverse(\"akl\u0131ndaysa kap\u0131nda!\")\n// _ = stringutils.Reverse(\"akl\u0131ndaysa kap\u0131nda!\")\n// gibi...\n}\n}\n</code></pre> <p>olsa, bu hi\u00e7bir anlam\u0131 olmayan, milyon kere loop yapan bir d\u00f6ng\u00fc olur sadece...</p> <p>\u015eimdi bu fonksiyonlar\u0131n haf\u0131za t\u00fcketimi durumuna bakal\u0131m:</p> <pre><code>$ go test -bench . -run none -benchtime 3s -benchmem github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\ngoos: darwin\ngoarch: arm64\npkg: github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\nBenchmarkReverse-10         24623949           126.4 ns/op       120 B/op          2 allocs/op\nBenchmarkReverseVigo-10     28291470           127.9 ns/op       128 B/op          2 allocs/op\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils   8.219s\n</code></pre> <ul> <li>Yeni bir arg\u00fcman <code>-benchmem</code> ekledik.</li> <li><code>Reverse</code> fonksiyonu operasyon ba\u015f\u0131na 120 bytes t\u00fcketmi\u015f ve HEAP\u2019e 2 obje ka\u00e7m\u0131\u015f!</li> <li><code>ReverseVigo</code> fonksiyonu operasyon ba\u015f\u0131na 128 bytes t\u00fcketmi\u015f ve HEAP\u2019e 2 obje ka\u00e7m\u0131\u015f!</li> </ul> <p>String\u2019leri toplamak performansl\u0131 bir y\u00f6ntem;</p> <pre><code>s := \"hello\"\ns += \" world\"\n</code></pre> <p>gibi yap\u0131lmas\u0131 <code>fmt.Sprintf</code>\u2019de daha performansl\u0131 demi\u015ftim:</p> <pre><code>package stringutils_test\n\nimport (\n\"fmt\"\n\"testing\"\n)\n\nfunc BenchmarkSprintConcat(b *testing.B) {\nb.Run(\"sprint\", benchSprint) // sub test gibi, sub benchmark!\nb.Run(\"concat\", benchConcat)\n}\n\nfunc benchSprint(b *testing.B) {\nvar s string\n\nb.ResetTimer()\nfor i := 0; i &lt; b.N; i++ {\ns = fmt.Sprint(\"hello\") // nolint:gosimple\n}\n\ngs = s // bunu yapmazsak allocation\n}\n\nfunc benchConcat(b *testing.B) {\nvar s string\n\nb.ResetTimer()\nfor i := 0; i &lt; b.N; i++ {\ns = \"hello\" + \"world\"\n}\n\ngs = s\n}\n</code></pre> <p>\u00c7al\u0131\u015ft\u0131ral\u0131m;</p> <pre><code>$ go test -bench . -run none -benchtime 3s -benchmem github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\ngoos: darwin\ngoarch: arm64\npkg: github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\nBenchmarkSprintConcat/sprint-10             108456262           33.05 ns/op        5 B/op          1 allocs/op\nBenchmarkSprintConcat/concat-10             1000000000           0.3113 ns/op          0 B/op          0 allocs/op\nBenchmarkReverse-10                         28682458           125.8 ns/op       120 B/op          2 allocs/op\nBenchmarkReverseVigo-10                     28101408           128.2 ns/op       128 B/op          2 allocs/op\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils   14.461s\n</code></pre> <ul> <li><code>fmt.Sprint()</code> 3sn i\u00e7inde 108.456.262 kere \u00e7al\u0131\u015fm\u0131\u015f... 1 operasyon 33.05   ns, operasyon ba\u015f\u0131na 5 bytes ve operasyon ba\u015f\u0131na 1 adet escape!</li> <li>Di\u011feri 3sn i\u00e7inde 1.000.000.000 kere \u00e7al\u0131\u015fm\u0131\u015f :))))))) - 1 operasyon 0   nano saniyeye yak\u0131n, 0 bytes allocation, 0 escape!</li> </ul> <p>Yani string concat i\u015fi ak\u0131llara zarar verecek derecede h\u0131zl\u0131, ayak izi b\u0131rakm\u0131yor ve HEAP\u2019e \u00e7\u0131kmadan STACK\u2019de kal\u0131yor!</p> <p>Benchmark testleri de ayn\u0131 di\u011fer testleri \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131z gibi \u00e7al\u0131\u015fabiliyor:</p> <pre><code>$ go test -run none -bench /sprint -benchtime 3s -benchmem github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\ngoos: darwin\ngoarch: arm64\npkg: github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\nBenchmarkSprintConcat/sprint-10             107537920           33.23 ns/op        5 B/op          1 allocs/op\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils   6.983s\n\n$ go test -run none -bench /concat -benchtime 3s -benchmem github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\ngoos: darwin\ngoarch: arm64\npkg: github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils\nBenchmarkSprintConcat/concat-10             1000000000           0.3154 ns/op          0 B/op          0 allocs/op\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/14/test-benchmarking/stringutils   0.518s\n</code></pre>"},{"location":"14/04-profiling/#escape-analysis","title":"Escape Analysis","text":"<p>Kodumuz i\u00e7inde HEAP\u2019e ka\u00e7anlar\u0131 nas\u0131l buluruz? Bu i\u015fleme  Escape Analysis yani ka\u00e7\u0131\u015f analizi deniyor. Hemen \u00f6rne\u011fe bakal\u0131m:</p> <p>\u00d6rnek</p> <p>https://go.dev/play/p/umeDnd8Iwdz</p> <pre><code>package main\n\nimport \"fmt\"\n\n// User holds user data.\ntype User struct {\nEmail    string\nFullName string\n}\n\n// NewUserAsValue creates new User instance as value semantics.\nfunc NewUserAsValue(email, fullName string) User {\nreturn User{email, fullName}\n}\n\n// NewUserAsPointer creates new User instance as pointer semantics.\nfunc NewUserAsPointer(email, fullName string) *User {\nreturn &amp;User{email, fullName}\n}\n\nfunc main() {\nu1 := NewUserAsValue(\"vigo@me.com\", \"U\u011fur \u00d6zy\")\nu2 := NewUserAsPointer(\"vigo@me.com\", \"U\u011fur \u00d6zy\")\n\nfmt.Println(\"u1 -&gt; value\", u1)   // u1 -&gt; value {vigo@me.com U\u011fur \u00d6zy}\nfmt.Println(\"u2 -&gt; pointer\", u2) // u2 -&gt; pointer &amp;{vigo@me.com U\u011fur \u00d6zy}\n}\n</code></pre> <p>\u0130ki fonksiyon var. Biri value semantics di\u011feri de pointer semantics ile, biri de\u011feri d\u00f6nerken, di\u011feri de pointer\u2019\u0131 d\u00f6n\u00fcyor. Kodun her zaman STACK\u2019de kalmas\u0131 bizim i\u00e7in iyi \u00e7\u00fcnk\u00fc h\u0131z, performans a\u00e7\u0131s\u0131ndan \u00f6nemli.</p> <p>Ne zaman HEAP\u2019e ge\u00e7erse, o zaman garbage collection devreye giriyor ve bu performans/h\u0131z kayb\u0131na sebep oluyor.</p> <p>\u015eimdi acaba HEAP\u2019e ka\u00e7an bir \u015fey var m\u0131? diye bak\u0131yoruz. Bunun i\u00e7in <code>-gcflags</code> parametresini kullanarak kodu <code>build</code> ediyoruz. <code>-m</code> ise  print optimization decisions anlam\u0131nda.</p> <p>\u015eimdi bu analizi yapabilmek i\u00e7in kodu derleyelim:</p> <pre><code>$ cd src/14/test-escape-analysis/\n$ go build -gcflags=\"-m\"\n# escapedemo\n./main.go:12:6: can inline NewUserAsValue\n./main.go:17:6: can inline NewUserAsPointer\n./main.go:22:22: inlining call to NewUserAsValue\n./main.go:23:24: inlining call to NewUserAsPointer\n./main.go:25:13: inlining call to fmt.Println\n./main.go:26:13: inlining call to fmt.Println\n./main.go:12:21: leaking param: email to result ~r0 level=0\n./main.go:12:28: leaking param: fullName to result ~r0 level=0\n./main.go:17:23: leaking param: email\n./main.go:17:30: leaking param: fullName\n./main.go:18:9: &amp;User{...} escapes to heap        &lt;--------------------- HEAP\n./main.go:23:24: &amp;User{...} escapes to heap       &lt;--------------------- HEAP\n./main.go:25:13: ... argument does not escape\n./main.go:25:14: \"u1 -&gt; value\" escapes to heap    &lt;--------------------- HEAP\n./main.go:25:29: u1 escapes to heap               &lt;--------------------- HEAP\n./main.go:26:13: ... argument does not escape\n./main.go:26:14: \"u2 -&gt; pointer\" escapes to heap  &lt;--------------------- HEAP\n</code></pre> <p>Daha da detayl\u0131 analiz i\u00e7in;</p> <pre><code>$ go build -gcflags=\"-m -m\" # daha detayl\u0131 hali...\n$ go build -gcflags=\"-m -S\" # hem escape analysis + assembly \u00e7\u0131kt\u0131s\u0131\n</code></pre> <p><code>-gcflags</code> parametrelerini;</p> <pre><code>$ go tool compile -help\n</code></pre> <p>ile g\u00f6rebiliriz.</p>"},{"location":"14/04-profiling/#memory-ve-cpu-profiling-temelleri","title":"Memory ve CPU Profiling Temelleri","text":"<p>\u015eimdi https://github.com/vigo/stringutils-demo projesinde memory ve cpu profiling yapal\u0131m.</p> <pre><code>$ cd /path/to/works\n$ git clone git@github.com:vigo/stringutils-demo.git\n$ cd stringutils-demo/\n$ go test -run none -bench . -benchtime 3s -benchmem -memprofile m.out -cpuprofile=c.out\n</code></pre> <ul> <li><code>-memprofile</code> ile memory profile\u2019\u0131n \u00e7\u0131kt\u0131s\u0131n\u0131</li> <li><code>-cpuprofile</code> ile cpu profile\u2019\u0131n \u00e7\u0131kt\u0131s\u0131n\u0131</li> </ul> <p>alaca\u011f\u0131m\u0131z dosyalar\u0131 belirtiyoruz. \u00c7\u0131kt\u0131lar\u0131n ikisi de binary dosyalar.</p> <p>E\u011fer bilgisayar\u0131n\u0131zda <code>Graphviz</code> kurulu de\u011filse mutlaka kurun; <code>brew install graphviz</code> ile kurabilir.</p> <pre><code>$ go tool pprof stringutils-demo.test c.out\nFile: stringutils-demo.test\nType: cpu\nTime: Aug 16, 2023 at 2:57pm (+03)\nDuration: 3.53s, Total samples = 3.14s (89.03%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) </code></pre> <p><code>help</code> ile komutlar\u0131 g\u00f6r\u00fcnt\u00fcleriz. \u015eimdi <code>list Reverse</code>:</p> <pre><code>(pprof) list Reverse\nTotal: 3.14s\nROUTINE ======================== github.com/vigo/stringutils-demo.Reverse in /Users/vigo/Development/vigo/golang/libs/stringutils-demo/stringutils.go\n10ms      550ms (flat, cum) 17.52% of Total\n.          .     15:func Reverse(s string) (string, error) {\n.       50ms     16:   if !utf8.ValidString(s) {\n.          .     17:       return s, ErrInvalidUTF8\n.          .     18:   }\n.       80ms     19:   r := []rune(s)\n.          .     20:   lr := len(r)\n.       90ms     21:   ss := make([]rune, lr)\n.          .     22:\n.          .     23:   for i := 0; i &lt; lr; i++ {\n10ms       10ms     24:       ss[lr-1-i] = r[i]\n.          .     25:   }\n.          .     26:\n.      320ms     27:   return string(ss), nil\n.          .     28:}\nROUTINE ======================== github.com/vigo/stringutils-demo_test.BenchmarkReverse in /Users/vigo/Development/vigo/golang/libs/stringutils-demo/stringutils_test.go\n0      550ms (flat, cum) 17.52% of Total\n.          .     79:func BenchmarkReverse(b *testing.B) {\n.          .     80:   var s string\n.          .     81:   b.ResetTimer()\n.          .     82:   for i := 0; i &lt; b.N; i++ {\n.      550ms     83:       s, _ = stringutils.Reverse(\"merhaba d\u00fcnya!\")\n.          .     84:   }\n.          .     85:\n.          .     86:   gs = s\n.          .     87:}\n.          .     88:\n(pprof)\n</code></pre> <p>\u015eimdi g\u00f6rselle\u015ftirelim:</p> <pre><code>(pprof) web\n</code></pre> <p><code>svg</code> dosyas\u0131 olu\u015fturur.</p> <p></p> <p>\u015eimdi memory a\u00e7\u0131s\u0131ndan bakal\u0131m:</p> <pre><code>$ go tool pprof -alloc_space stringutils-demo.test m.out\nFile: stringutils-demo.test\nType: alloc_space\nTime: Aug 16, 2023 at 2:57pm (+03)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) list Reverse\nTotal: 2.32GB\nROUTINE ======================== github.com/vigo/stringutils-demo.Reverse in /Users/vigo/Development/vigo/golang/libs/stringutils-demo/stringutils.go\n    2.32GB     2.32GB (flat, cum) 99.91% of Total\n         .          .     15:func Reverse(s string) (string, error) {\n.          .     16:   if !utf8.ValidString(s) {\n.          .     17:       return s, ErrInvalidUTF8\n         .          .     18:   }\n.          .     19:   r := []rune(s)\n.          .     20:   lr := len(r)\n1.69GB     1.69GB     21:   ss := make([]rune, lr)\n.          .     22:\n         .          .     23:   for i := 0; i &lt; lr; i++ {\n.          .     24:       ss[lr-1-i] = r[i]\n.          .     25:   }\n.          .     26:\n  640.51MB   640.51MB     27:   return string(ss), nil\n         .          .     28:}\nROUTINE ======================== github.com/vigo/stringutils-demo_test.BenchmarkReverse in /Users/vigo/Development/vigo/golang/libs/stringutils-demo/stringutils_test.go\n         0     2.32GB (flat, cum) 99.91% of Total\n         .          .     79:func BenchmarkReverse(b *testing.B) {\n.          .     80:   var s string\n         .          .     81:   b.ResetTimer()\n.          .     82:   for i := 0; i &lt; b.N; i++ {\n.     2.32GB     83:       s, _ = stringutils.Reverse(\"merhaba d\u00fcnya!\")\n.          .     84:   }\n.          .     85:\n         .          .     86:   gs = s\n         .          .     87:}\n.          .     88:\n(pprof) </code></pre> <p><code>2.32GB</code> allocation var;</p> <ul> <li><code>1.69GB</code>\u2019\u0131 <code>ss := make([]rune, lr)</code> ile</li> <li><code>640.51MB</code>\u2019\u0131 <code>return string(ss)</code> ile</li> </ul> <p>olmu\u015f. Yani \u015fu basit <code>Reverse</code> fonksiyonu haf\u0131za t\u00fcketen bir canavar!</p>"},{"location":"14/04-profiling/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://github.com/google/pprof/blob/master/doc/README.md</li> <li>https://mayurwadekar2.medium.com/escape-analysis-in-golang-ee40a1c064c1</li> <li>https://medium.com/a-journey-with-go/go-introduction-to-the-escape-analysis-f7610174e890</li> <li>https://faun.pub/golang-escape-analysis-reduce-pressure-on-gc-6bde1891d625</li> </ul>"},{"location":"15/01-concurrency/","title":"B\u00f6l\u00fcm 15/01: Concurrency","text":"<p>T\u00fcrk\u00e7e kelime anlam\u0131 olarak e\u015fzamanl\u0131l\u0131k olan concurrency, go a\u00e7\u0131s\u0131ndan;</p> <p>Allows part of the program to execute independently</p> <p>yani; program\u0131n bir b\u00f6l\u00fcm\u00fcn\u00fcn ba\u011f\u0131ms\u0131z olarak \u00e7al\u0131\u015fmas\u0131na izin verir \u015feklindedir. Herhangi bir s\u0131ra olmadan, e\u015f zamanl\u0131 olarak program\u0131n belli k\u0131s\u0131mlar\u0131 \u00e7al\u0131\u015f\u0131r.</p> <p>Rob Pike\u2019\u0131n efsane proverb\u2019lerinden hat\u0131rlayal\u0131m;</p> <p>Concurrency is not parallelism.</p> <p>Parallelism yani paralel olarak \u00e7al\u0131\u015fma, program\u0131n baz\u0131 b\u00f6l\u00fcmlerinin ba\u011f\u0131ms\u0131z olarak, ayn\u0131 anda \u00e7al\u0131\u015fmas\u0131 demektir. Oysa, concurrency\u2019de ba\u011f\u0131ms\u0131z ve s\u0131ras\u0131z olarak \u00e7al\u0131\u015fan k\u00fc\u00e7\u00fck k\u00fc\u00e7\u00fck par\u00e7ac\u0131klar olur.</p> <p>Paralel \u00e7al\u0131\u015fma sadece multi-core i\u015flemcilerde m\u00fcmk\u00fcnken, concurrent \u00e7al\u0131\u015fma i\u00e7in single-core\u2019lu bir i\u015flemci yeterlidir. Dolay\u0131s\u0131yla, concurrent \u00e7al\u0131\u015fan kod ba\u011f\u0131ms\u0131z, paralel \u00e7al\u0131\u015fan kod ise sim\u00fcltane yani ayn\u0131 anda \u00e7al\u0131\u015fan \u015feklindedir.</p> <p>Go, CSP yani Communicating Sequential Processes denilen, temeli 1979\u2019lara dayanan bir strateji kullan\u0131r. CSP\u2019nin atas\u0131 1934 do\u011fumlu \u0130ngiliz bilgisayar bilimci Tony Hoare\u2019dur.</p> <p>Hatta <code>C</code>\u2019den <code>golang</code>\u2019e ge\u00e7en pek \u00e7ok programc\u0131,  asenkron gibi \u00e7al\u0131\u015fan kodu lineer olarak yazabiliyoruz! der :)</p> <p>Bu teknikle go, process zamanlama i\u015flerini, i\u015fletim sistemine b\u0131rakmadan kendisi organize ediyor. Kendi i\u00e7inde Local Run Queue ad\u0131nda bir kuyruk tutuyor ve concurrent i\u015fleri bu kuyruk sayesinde organize ediyor. Bu sayede tek bir thread go i\u00e7in yeterli oluyor!</p> <p>Bu concurrent \u00e7al\u0131\u015fma i\u015flerini goroutine\u2019lerle yap\u0131yoruz. Dolay\u0131s\u0131yla goroutine\u2019lerin senkronizasyonu ve orkestrasyonu bizim elimizde. Yani bunu kodu yazan ki\u015fi olarak bir yapaca\u011f\u0131z!</p>"},{"location":"15/01-concurrency/#goroutine","title":"Goroutine","text":"<p>Bir fonksiyonu \u00e7a\u011f\u0131r\u0131rken ba\u015f\u0131na <code>go</code> anahtar kelimesi koydu\u011fumuz an art\u0131k o bir goroutine haline d\u00f6n\u00fc\u015fm\u00fc\u015f olur. Asl\u0131nda go runtime taraf\u0131ndan y\u00f6netilen hafif siklet process\u2019lerdir goroutine\u2019ler.</p> <p>O kadar az maliyetlidir ki, y\u00fczlerce, binlerce goroutine tetikleyebiliriz. Klasik thread olu\u015fturmaktan kat be kat h\u0131zl\u0131d\u0131r \u00e7\u00fcnk\u00fc olaylar i\u015fletim seviyesindeki kaynaklarda de\u011fil, go\u2019nun kendi i\u00e7inde y\u00f6netti\u011fi kaynak ve kuyruklarla i\u015flenir.</p> <p>Stack size\u2019\u0131 thread\u2019in stack size\u2019ndan \u00e7ok k\u00fc\u00e7\u00fckt\u00fcr ve gerekti\u011fi zaman geni\u015fleyebilir. Default\u2019u 8 KB\u2019d\u0131r. Thread is 1 MB\u2019dan b\u00fcy\u00fck olup, 1000 thread neredeyse 1 GB haf\u0131za t\u00fcketirken, 1000 goroutine  8MB haf\u0131za t\u00fcketir.</p> <p>https://go.dev/doc/go1.2#stack_size</p> <pre><code>In Go 1.2, the minimum size of the stack when a goroutine is created has\nbeen lifted from 4KB to 8KB. Many programs were suffering performance\nproblems with the old size, which had a tendency to introduce expensive\nstack-segment switching in performance-critical sections. The new number\nwas determined by empirical testing.\n\nAt the other end, the new function SetMaxStack in the runtime/debug\npackage controls the maximum size of a single goroutine's stack. The\ndefault is 1GB on 64-bit systems and 250MB on 32-bit systems. Before Go\n1.2, it was too easy for a runaway recursion to consume all the memory on\na machine.\n\nUpdating: The increased minimum stack size may cause programs with many\ngoroutines to use more memory. There is no workaround, but plans for\nfuture releases include new stack management technology that should\naddress the problem better.\n</code></pre> <p>Goroutine\u2019ler aras\u0131nda ge\u00e7i\u015f yapmak, thread\u2019ler aras\u0131nda ge\u00e7i\u015f yapmaktan daha h\u0131zl\u0131d\u0131r. Bu y\u00fczden y\u00fczlerce, binlerce goroutine \u00e7al\u0131\u015ft\u0131rmak m\u00fcmk\u00fcnd\u00fcr!</p> <p>Go scheduler (zamanlay\u0131c\u0131) a\u00e7\u0131s\u0131ndan, goroutine\u2019lerin 3 tane state\u2019i vard\u0131r;</p> <ol> <li>running</li> <li>runnable</li> <li>waiting</li> </ol> <p>\u015eimdi \u00f6rne\u011fe bakal\u0131m:</p> <p>https://go.dev/play/p/46eWKM78bvx</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nfunc() {\nfmt.Println(\"hello from goroutine!\")\n}()\n\nfmt.Println(\"exit!\")\n}\n\n// hello from goroutine!\n// exit!\n</code></pre>"},{"location":"15/01-concurrency/#go-anahtar-kelimesi","title":"<code>go</code> Anahtar Kelimesi","text":"<p>Bu kod \u00e7al\u0131\u015ft\u0131\u011f\u0131 zaman, \u00f6nce anonim fonksiyon \u00e7al\u0131\u015f\u0131r, sonra da <code>fmt.Println</code> \u00e7al\u0131\u015f\u0131r ve i\u015flem biter. Peki biz anonim fonksiyon ba\u015f\u0131na <code>go</code> eklersek ne olur?</p> <p>https://go.dev/play/p/2yDwJseRCov</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\ngo func() {\nfmt.Println(\"hello from goroutine!\")\n}()\n\nfmt.Println(\"exit!\")\n}\n\n// exit!\n</code></pre> <p><code>go</code> kelimesini g\u00f6re go derleyicisi, olay\u0131 \u015f\u00f6yle yorumlar; ben bu fonksiyonu \u00e7a\u011f\u0131raca\u011f\u0131m ama i\u015fini bitirmesini beklemeyece\u011fim. Y\u00fczme havuzu gibi d\u00fc\u015f\u00fcn\u00fcn, <code>main</code> fonksiyonuna girildi\u011finde tek bir kulvar var, <code>go</code> devreye girince i\u00e7indeki fonksiyon di\u011fer kulvarda \u00e7al\u0131\u015f\u0131yor ve <code>main</code> o kulvar\u0131n i\u015fini bitirmesini beklemeden i\u015fini bitirip \u00e7\u0131k\u0131yor.</p> <p>Go runtime bize sadece \u015funu garanti ediyor: goroutine, gelecekte bir zamanda kesin \u00e7al\u0131\u015facak! Ama ne zaman bilmiyoruz :)</p> <p></p> <p><code>main()</code> fonksiyonu <code>go func(){...}()</code> fonksiyonundan \u00f6nce bitti ve uygulamadan \u00e7\u0131kt\u0131. Asl\u0131nda <code>go func(){...}()</code> \u00e7al\u0131\u015ft\u0131 ama <code>main()</code> o kadar h\u0131zl\u0131 oldu ki... Hatta burada memory leak bile olu\u015ftu!</p> <p>Peki, <code>main</code> biraz beklese?</p> <p>https://play.golang.org/p/zUUkudUt-0m</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\ngo func() {\nfmt.Println(\"hello from goroutine!\")\n}()\n\ntime.Sleep(2 * time.Second)   // &lt;- bekleme i\u00e7in 2 saniye, garantili...\nfmt.Println(\"exit!\")\n}\n\n// hello from goroutine!\n// exit!\n</code></pre> <p>\u015eimdi ne oldu? <code>main()</code> bloke oldu, bu esnada ayr\u0131 telden \u00e7alan goroutine i\u015fini bitirdi. S\u0131rf goroutine\u2019inin \u00e7al\u0131\u015fmas\u0131n\u0131 g\u00f6rmek i\u00e7in mecburen <code>time.Sleep</code> ile asl\u0131nda k\u00f6t\u00fc bir kod yazd\u0131k. Hatta asla b\u00f6yle bir kodu ger\u00e7ek hayatta kullanmamam\u0131z laz\u0131m!</p> <p>Peki nas\u0131l daha iyi hale gelebilirdi? Ne yapmak laz\u0131m? Goroutine\u2019nin i\u015fini bitirmesini bekleyecek bir y\u00f6ntem olmal\u0131?</p>"},{"location":"15/01-concurrency/#waitgroup","title":"WaitGroup","text":"<p><code>sync</code> paketi i\u00e7indeki <code>WaitGroup</code> ile bu kodu \u015fu \u015fekilde d\u00fczeltebiliriz:</p> <p>https://go.dev/play/p/jz75LNOdtRX</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"sync\"\n)\n\nfunc main() {\nvar wg sync.WaitGroup\n\nwg.Add(1) // add 1 to goroutine counter\n\n// only one goroutine is this (except the main function)\ngo func() {\nfmt.Println(\"hello from goroutine!\")\nwg.Done() // subtract 1 from goroutine counter\n}()\n\nwg.Wait() // wait till the counter hits zero!\nfmt.Println(\"exit!\")\n}\n\n// hello from goroutine!\n// exit!\n</code></pre> <p>Ne yapt\u0131k?</p> <ol> <li>Ka\u00e7 tane goroutine varsa <code>.Add()</code> ile ekledik</li> <li>Goroutine i\u00e7inde <code>.Done()</code> ile counter\u2019\u0131 eksilttik</li> <li><code>Wait()</code> ile counter s\u0131f\u0131ra gelene kadar bekledik. S\u0131f\u0131r olunca goroutine\u2019ler i\u015fini bitirmi\u015f oluyor</li> </ol> <p>E\u011fer <code>wg.Done()</code>\u2019\u0131 yazmazsak; Deadlock olu\u015fur! <code>wg.Wait()</code> bo\u015funa bekler ve counter s\u0131f\u0131ra inmez...</p> <pre><code>fatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [semacquire]:\nsync.runtime_Semacquire(0x1400001c0b4)\n/opt/homebrew/Cellar/go/1.17.2/libexec/src/runtime/sema.go:56 +0x38\nsync.(*WaitGroup).Wait(0x1400001c0b4)\n/opt/homebrew/Cellar/go/1.17.2/libexec/src/sync/waitgroup.go:130 +0xa4\nmain.main()\n/Users/vigo/Desktop/demo.go:17 +0x64\nexit status 2\nhello from goroutine!\n</code></pre> <p>Bu yakla\u015f\u0131m, e\u011fer goroutine\u2019lerden geriye bir \u015fey d\u00f6nmesini istemiyorsak kullanaca\u011f\u0131m\u0131z bir yakla\u015f\u0131md\u0131r. \u00d6rne\u011fin bir <code>slice</code> i\u00e7ince <code>N</code> tane websitesi adresi olsun. Bu sitelerin ayakta olup olmad\u0131klar\u0131n\u0131 kontrol etmek istiyoruz ve <code>slice</code>\u2019\u0131n say\u0131s\u0131 kadar goroutine ate\u015fliyoruz:</p> <p>https://go.dev/play/p/6naaL-Tm6WJ</p> <p>\u00d6rnek</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"net/http\"\n\"sync\"\n)\n\nfunc main() {\nvar wg sync.WaitGroup\n\nurls := []string{\n\"https://httpbin.org/delay/2\",\n\"https://kamp.linux.org.tr/2023-yaz/\",\n\"https://github.com/\",\n\"https://ugur.ozyilmazel.com/\",\n\"https://vigo.io\",\n\"https://fooo-fake-nonurl-xxxxxxxxx.com.tr\",\n}\n\nwg.Add(len(urls))\n\nfor _, url := range urls {\n// wg.Add(1) // &lt;-- bu \u015fekilde de olabilirdi...\ngo func(url string) {\nres, err := http.Get(url) // nolint\nif err == nil {\nfmt.Println(url, res.Status)\n} else {\nfmt.Println(url, err)\n}\n\nwg.Done()\n}(url) // &lt;- d\u0131\u015far\u0131daki url\u2019i goroutine\u2019ne ge\u00e7iyoruz! yani her goroutine\u2019e do\u011fru de\u011fer!\n}\n\nwg.Wait()\n}\n\n// https://fooo-fake-nonurl-xxxxxxxxx.com.tr Get \"https://fooo-fake-nonurl-xxxxxxxxx.com.tr\": dial tcp: lookup fooo-fake-nonurl-xxxxxxxxx.com.tr: no such host\n// https://vigo.io 200 OK\n// https://ugur.ozyilmazel.com/ 200 OK\n// https://github.com/ 200 OK\n// https://kamp.linux.org.tr/2023-yaz/ 523\n// https://httpbin.org/delay/2 200 OK\n</code></pre> <p>Dikkat ettiyseniz, <code>wg</code> i\u00e7in closes over yani bulundu\u011fu scope i\u00e7inde ilave bir i\u015f yapmad\u0131k ama loop i\u00e7indeki goroutine\u2019i <code>go func(url string){...}(url)</code>  \u015feklinde ge\u00e7tik. E\u011fer bu \u015fekilde yapmasayd\u0131k;</p> <pre><code>for _, url := range urls {\ngo func() {\nfmt.Println(\"url\", url)  // &lt;-- bu her zaman ayn\u0131 de\u011fer\nwg.Done()\n}()\n}\n</code></pre> <p>loop variable url captured by function literal</p> <p>durumu olup, goroutine i\u00e7inde <code>url</code> diye almaya \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z \u015fey yanl\u0131\u015f olacakt\u0131! Bazen son eleman bazen de random bi eleman olacakt\u0131. Neden? \u00e7\u00fcnki <code>url</code>\u2019in de\u011feri goroutine \u00e7al\u0131\u015fmadan \u00f6nce de\u011fi\u015fecekti ve goroutine bundan haberdar olmayacakt\u0131! T\u00fcm goroutine\u2019ler ayn\u0131 de\u011fi\u015fkeni payla\u015facakt\u0131!</p> <p>Nas\u0131l durduraca\u011f\u0131n\u0131 (stop) bilmiyorsan o goroutine\u2019i ba\u015flatma!</p>"},{"location":"15/02-channels/","title":"B\u00f6l\u00fcm 15/02: Concurrency","text":""},{"location":"15/02-channels/#channels","title":"Channels","text":"<p><code>chan</code> (channel) go\u2019da goroutine\u2019ler aras\u0131nda veri ta\u015f\u0131maya yarayan \u00f6n-tan\u0131ml\u0131 (built-in) bir tiptir. Yani <code>int</code> gibi <code>map</code> gibi bir tiptir. Bir goroutine channel\u2019a veri yazarken, ba\u015fka bir goroutine o channel\u2019\u0131 dinleyip okuyabilir.</p> <p>As\u0131l ama\u00e7 channel\u2019lar\u0131n goroutine\u2019ler aras\u0131nda payla\u015f\u0131labilmesidir. Hatta sevgili Rob Pike\u2019\u0131n o efsane s\u00f6zlerinden biri olan;</p> <p>Don't communicate by sharing memory, share memory by communicating</p> <p>hat\u0131rlatmak isterim; haf\u0131zay\u0131 payla\u015farak ileti\u015fim kurmay\u0131n,  ileti\u015fim kurarak haf\u0131zay\u0131 payla\u015f\u0131n! Yani channel\u2019lar\u0131 kullan\u0131n! diyor...</p> <p>Normal \u015fartlarda fonksiyon geriye de\u011fer d\u00f6nebilir ama <code>go</code> anahtar kelimesiyle tetiklenen fonksiyonlar\u0131n d\u00f6n\u00fc\u015f\u00fcn\u00fc <code>main</code> beklemedi\u011fi i\u00e7in, goroutine ile \u00e7al\u0131\u015fan fonksiyon ile <code>main</code> aras\u0131ndaki ileti\u015fim channel\u2019lar \u00fczerinden sa\u011flan\u0131r.</p> <ul> <li>Birden fazla goroutine ayn\u0131 channel\u2019a yazabilir</li> <li>Birden fazla goroutine ayn\u0131 channel\u2019dan okuyabilir</li> </ul> <p>Tabi t\u00fcm bunlar sizin uygulamak istedi\u011finiz concurrency pattern\u2019ine ba\u011fl\u0131 olarak de\u011fi\u015fen \u015feylerdir.</p> <ul> <li>Channel\u2019daki veri mutlaka bir tipte olmal\u0131, yani <code>make(chan)</code> ile channel   olu\u015fturulmal\u0131, ayn\u0131 <code>map</code>\u2019deki gibi...</li> <li>Default olarak channel read/write (okuma/yazma) senkron i\u015flemlerdir</li> <li>Channel\u2019a bir de\u011fer atamak, ayn\u0131 fonksiyona parametre ge\u00e7mek gibidir</li> <li>Channel\u2019a reference types (pointer, map, slice vs...) ge\u00e7erken dikkatli olmak   gerekir. \u00c7\u00fcnk\u00fc DATA RACE olmas\u0131 y\u00fcksek ihtimaldir. Yani bir goroutine de\u011fer okurken,   di\u011fer bir goroutine\u2019de yeni de\u011fer atamaya \u00e7al\u0131\u015f\u0131rsa durum race-condition durumu olur.</li> </ul> <p>Bir goroutine, channel\u2019a yazd\u0131\u011f\u0131 zaman, di\u011fer bir goroutine o channel\u2019dan okuyana kadar pause / block olur. Yani goroutine channel\u2019dan okumak istedi ve okuyaca\u011f\u0131 bir de\u011fer (value) yoksa, de\u011fer gelene kadar o goroutine beklemeye devam eder...</p> <p>Asl\u0131nda bu ayn\u0131 linux/unix pipe\u2019lara benzer:</p> <pre><code>$ cat foo | grep 'bar' | cut -d'.' -F1\n#               |           |\n#               \u2193           |\n#          cat\u2019i bekler     |      \n#                           \u2193\n#                         grep\u2019i bekler \n</code></pre> <p>Channel\u2019\u0131 kapatmak, sizin art\u0131k o channel ile i\u015finizin kalmad\u0131\u011f\u0131 anlam\u0131na gelir.</p> <p>4 T\u00fcr channel var;</p> <ol> <li>Unbuffered</li> <li>Buffered</li> <li>Closed</li> <li>Nil</li> </ol> <p>3 T\u00fcr channel state var;</p> <ol> <li>nil -&gt; zero-value</li> <li>open -&gt; <code>make(...)</code></li> <li>close -&gt; <code>close(...)</code></li> </ol> <p>State\u2019ine g\u00f6re send/receive uygunlu\u011fu</p> example nil open closed send <code>ch &lt;- true</code> blocked allowed panic! receive <code>&lt;-ch</code> blocked allowed allowed <p>Garantileme durumuna g\u00f6re</p> Garanti Garanti Yok Gecikmeli Garanti <code>channel</code> Unbuffered Buffered <code>ch &gt; 1</code> Buffered <code>ch = 1</code> <p>Normalde channel\u2019\u0131 fonksiyona ge\u00e7erken bi-directional yani hem send hem de receive edebilir \u015fekilde ge\u00e7iyoruz;</p> <pre><code>func Foo(ch chan int){}\n</code></pre> <p>Bunu limitlemek m\u00fcmk\u00fcn. Yani duruma g\u00f6re receive-only ya da send-only yapmak da m\u00fcmk\u00fcn;</p> <pre><code>func receiveOnly(ch &lt;-chan int) {\nfmt.Println(\"read/receive\", &lt;-ch)\n}\n\nfunc sendOnly(ch chan&lt;- int) {\nch &lt;- 1\n}\n</code></pre> <p>\u00d6rnek</p> <pre><code>$ go run src/15/channels/send-only/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc returnReceiveOnly() &lt;-chan int {\nc := make(chan int)\n\ngo func() {\ndefer close(c)\n\n// bu fonksiyondan d\u00f6nen channel'\u0131 receive\n// eden her kimse, en fazla 100 tane say\u0131\n// receive edebilir.\n\n// loop bitiminde defer ile channel kapand\u0131\u011f\u0131\n// i\u00e7in, 100+ zero-value =&gt; 0 gelir...\nfor i := 0; i &lt; 100; i++ {\nc &lt;- i\n}\n}()\n\nreturn c\n}\n\nfunc main() {\nr := returnReceiveOnly() // returns receive-only channel\n\n// r &lt;- 10 // invalid operation: cannot send to receive-only type &lt;-chan int\n\nfor i := 0; i &lt; 200; i++ {\nfmt.Println(&lt;-r)\n}\n}\n\n// read/write-only channels are distinct types, the compiler can use its existing\n// type-checking mechanisms to ensure the caller does not try to write stuff\n// into a channel it has no business writing to.\n</code></pre> <p>Bi-directional channel ile teknik/performans fark\u0131 yok sadece compile-time\u2019da; receive only kullanmak istedi\u011finiz channel\u2019a send etmek isterseniz;</p> <pre><code>invalid operation: cannot send to receive-only type &lt;-chan int\n</code></pre> <p>gibi hata vererek kodu d\u00fczeltmenizi ister. \u015eimdi ilk yapt\u0131\u011f\u0131m\u0131z, hani <code>time.Sleep</code> kullanarak yapt\u0131\u011f\u0131m\u0131z \u00f6rne\u011fi channel kullanarak yapal\u0131m;</p> <p>\u00d6rnek</p> <p>https://go.dev/play/p/E8EzcHasNxE</p> <pre><code>$ go run src/15/channels/basic-goroutine-with-channel/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc main() {\nch := make(chan bool) // channel holds bool type!\n\ngo func() {\nfmt.Println(\"hello from goroutine!\")\nch &lt;- true // writing to ch channel\n}()\n\n&lt;-ch // channel'dan veri gelene kadar blok!, reading from ch channel\nfmt.Println(\"exit!\")\n}\n\n// hello from goroutine!\n// exit!\n</code></pre> <p></p>"},{"location":"15/02-channels/#unbuffered-channels","title":"Unbuffered Channels","text":"<p>Asl\u0131nda \u015fu ana kadar yapt\u0131\u011f\u0131m\u0131z \u00f6rnekler unbuffered channels \u00f6rnekleriydi. Yani channel, tampon olmaks\u0131z\u0131n, ayni unix/linux\u2019daki pipe mant\u0131\u011f\u0131yla al-g\u00fcl\u00fcm-ver-g\u00fcl\u00fcm \u015feklinde senkron \u015fekilde \u00e7al\u0131\u015ft\u0131. Yani alma-verme i\u015fi senkron, ayn\u0131 anda oldu. Bu kesin garantili bir y\u00f6ntem.</p> <p>Channel\u2019a g\u00f6nderme (send) ve channel\u2019dan okuma (receive) ayn\u0131 anda oldu. Yani almak i\u00e7in birinin g\u00f6ndermesi laz\u0131m. Aksi halde blocking i\u015flem oluyor. Bu durum unknown latency yani bilinmeyen bir gecikmeye sebep olur.</p> <p>\u015e\u00f6yle d\u00fc\u015f\u00fcn\u00fcn; <code>curl &lt;URL&gt; | grep 'foo'</code> e\u011fer indirmek istedi\u011finiz dosya \u00e7ok b\u00fcy\u00fckse, (gigabyte\u2019lar seviyesi) <code>grep</code> <code>curl</code>\u2019\u00fc download h\u0131z\u0131n\u0131z kadar beklemek zorunda.</p> <p>Garanti \u015fu anlamdad\u0131r: receive (yani channel\u2019dan alma), send\u2019den (yani channel\u2019a g\u00f6nderme) nano saniye kadar \u00f6nce olur.</p> <p>https://www.youtube.com/watch?v=LvgVSSpwND8</p>"},{"location":"15/02-channels/#done-pattern","title":"<code>done</code> Pattern","text":"<p>\u00d6rnek</p> <p>https://go.dev/play/p/kHzc8P2kcji</p> <pre><code>$ go run src/15/channels/done-pattern/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"crypto/rand\"\n\"fmt\"\n\"math/big\"\n)\n\nfunc main() {\namount := 10\n\nfmt.Println(\"channel'a\", amount, \"adet say\u0131 yollayaca\u011f\u0131z\")\n\nch := make(chan int)\ndone := make(chan struct{})\n\n// channel'a g\u00f6nder (send)\ngo func() {\nfor i := 0; i &lt; amount; i++ {\nrandomInt, _ := rand.Int(rand.Reader, big.NewInt(100))\nch &lt;- int(randomInt.Int64()) + 1 // randon say\u0131 0-100 araas\u0131\n}\n}()\n\n// channel'dan al (receive)\ngo func() {\nfmt.Println()\nfor i := 0; i &lt; amount; i++ {\nfmt.Println(\"gelen (received) say\u0131\", &lt;-ch)\n}\nfmt.Println()\nclose(ch)\n\nclose(done) // channel'\u0131 kapat ya da\n// done &lt;- struct{}{} // done i\u00e7in kullan\u0131lan channel'a bo\u015f struct koy, channel'a veri gitti\n}()\n\n&lt;-done // veri gelene kadar blokla...\n\nfmt.Println(\"bitti...\")\n}\n</code></pre>"},{"location":"15/02-channels/#deadlock","title":"Deadlock","text":"<p>Channel\u2019a yazan olmazsa, okumak isteyen havada kal\u0131r, bo\u015fu bo\u015funa bekler. Bu durumda goroutine\u2019ler uykuya dalar...</p> <p>fatal error: all goroutines are asleep - deadlock!</p> <p>\u00d6rnek</p> <p>https://go.dev/play/p/U4ulhb8DtVC</p> <pre><code>$ go run src/15/channels/deadlock/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\nch := make(chan int)\n\ngo count(ch)\n\n// sonsuz d\u00f6ng\u00fcde ch channel'\u0131ndan receive yap\u0131yoruz..\nfor {\nfmt.Println(&lt;-ch)\n}\n}\n\nfunc count(ch chan int) {\nfor i := 0; i &lt; 5; i++ {\nch &lt;- i\ntime.Sleep(time.Millisecond * 500) // yar\u0131m saniye bekletme, g\u00f6rmek i\u00e7im\n}\n// loop bitti ama yukar\u0131daki for{} halen okumak istiyor\n}\n\n// 0\n// 1\n// 2\n// 3\n// 4\n// fatal error: all goroutines are asleep - deadlock!\n//\n// goroutine 1 [chan receive]:\n// main.main()\n//  .../src/15/channels/deadlock/main.go:15 +0x7c\n// exit status 2\n</code></pre> <p>Neden deadlock olu\u015ftu? <code>count</code> fonksiyonundaki loop tamamland\u0131, fonksiyon i\u015fini bitirip \u00e7\u0131kt\u0131 ama biz halen channel\u2019a data gelmesini bekliyoruz <code>main()</code> i\u00e7indeki <code>for{}</code>\u2019da.</p> <p>Art\u0131k o channel\u2019a g\u00f6nderme (send) yapacak aktif bir goroutine yok. Bu bak\u0131mdan <code>main()</code> sonsuza kadar bekleyecek ve asla terminate olamayacak. Bu bak\u0131mdan go deadlock olu\u015fturarak program\u0131 durdurdu!</p> <p>Bu problem run-time\u2019da tespit edildi. Yani go bunu compile-time\u2019da de\u011fil run-time\u2019da alg\u0131layabiliyor. Alg\u0131layabilse zaten uyar\u0131 verirdi :) Bu bak\u0131mdan kod derlemesi ba\u015far\u0131l\u0131 olsa bile, \u00e7al\u0131\u015f\u0131rken bu t\u00fcr k\u00f6t\u00fc s\u00fcrprizler olabilir.</p> <p>Bu durum olu\u015ftu\u011fu an art\u0131k goroutine\u2019ler bir i\u015f yapam\u0131yor, uykuya ge\u00e7iyor. \u00c7\u00f6z\u00fcm ne? \u0130\u015f bitiminde kanal\u0131 kapatmak.</p>"},{"location":"15/02-channels/#unutmayin-altin-kural","title":"UNUTMAYIN! ALTIN KURAL","text":"<p>E\u011fer siz receiver\u2019san\u0131z (yani kanaldan okuyansan\u0131z <code>&lt;-ch</code>) asla channel\u2019\u0131 kapatmay\u0131n, sadece sender (<code>ch &lt;- true</code>) channel\u2019\u0131 kapatmal\u0131d\u0131r!</p> <p>Kanal\u0131 kapatacak olan i\u015fin bitti\u011finden emin olan olmal\u0131d\u0131r. Sender olan <code>count()</code> fonksiyonu, loop\u2019un bitti\u011fi an\u0131 o biliyor. Kapatacak olan da o!</p> <p>Channel\u2019a yazan (sender) her zaman ka\u00e7 tane goroutine oldu\u011funu bilir ama okuyan (receiver) bunu bilemez. <code>close</code> den her zaman yazan (sender) olmal\u0131d\u0131r!</p> <p>Ayn\u0131 \u00f6rnekte ufak bir de\u011fi\u015fiklik yapal\u0131m:</p> <p>\u00d6rnek</p> <p>https://go.dev/play/p/czqEVQxGg7J</p> <pre><code>$ go run src/15/channels/open-close-check/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\nch := make(chan int)\n\ngo count(ch)\n\n// sonsuz d\u00f6ng\u00fcde ch channel'\u0131ndan receive yap\u0131yoruz..\nfor {\n// channel'dan genel golang convention'\u0131ndaki gibi\n// value, ok := \u015feklinde\n// ch'daki de\u011fer ve channel'\u0131n a\u00e7\u0131k/kapal\u0131 olma bilgisini al\u0131yoruz\nmsg, open := &lt;-ch\nif !open {\nbreak // e\u011fer kapal\u0131ysa d\u00f6ng\u00fcden \u00e7\u0131k, main art\u0131k exit etsin, i\u015f bitsin\n}\n\nfmt.Println(msg)\n}\n}\n\nfunc count(ch chan int) {\nfor i := 0; i &lt; 5; i++ {\nch &lt;- i\ntime.Sleep(time.Millisecond * 500) // yar\u0131m saniye bekletme, g\u00f6rmek i\u00e7im\n}\nclose(ch)\n}\n</code></pre> <p><code>value, ok</code> yakla\u015f\u0131m\u0131 ile go bize, e\u011fer channel a\u00e7\u0131ksa (closed de\u011filse) channel\u2019\u0131n de\u011ferini d\u00f6ner. <code>if !open {break}</code> yani channel kapand\u0131ysa loop\u2019a devam etmeye gerek yok.</p> <p>Keza send i\u015flemi de bloklar;</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc main() {\nch := make(chan string)\nch &lt;- \"hello world\" // burada bloklar, ayn\u0131 anda birinin bunu okumas\u0131 laz\u0131m.\n\nfmt.Println(&lt;-ch)\n}\n\n// fatal error: all goroutines are asleep - deadlock!\n</code></pre> <p>\u00c7\u00f6z\u00fcm:</p> <p>https://go.dev/play/p/aZWYNsf7KnW</p> <p>\u00d6rnek</p> <pre><code>$ go run src/15/channels/unblock-send/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc main() {\nch := make(chan string)\ndone := make(chan struct{})\n\n// bu k\u0131s\u0131m main'den farkl\u0131 bir kulvarda \u00e7al\u0131\u015fmaya ba\u015flad\u0131\ngo func() {\nfmt.Println(&lt;-ch) // g\u00f6nder gelsin\ndone &lt;- struct{}{}\n}()\n\nch &lt;- \"hello world\" // g\u00f6nderdim\n&lt;-done\n\nfmt.Println(\"bitti\")\n}\n</code></pre> <p>Ya da buffered channels kullanmak</p>"},{"location":"15/02-channels/#range-over-channels","title":"Range Over Channels","text":"<p>Ayn\u0131 \u00f6rne\u011fi syntactic sugar kullanarak yani, zahmetsiz open/close kontrol\u00fc ve yeteri say\u0131da iterasyonla channel\u2019\u0131 t\u00fcketebiliriz:</p> <p>\u00d6rnek</p> <p>https://play.golang.org/p/qTwbWZpTSmi</p> <pre><code>$ go run src/15/channels/range-over-channels/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\nch := make(chan int)\n\ngo count(ch)\n\n// ch channel'\u0131 kapanana kadar i\u00e7inde iterasyon yap\u0131yoruz\n// bu y\u00f6ntemle kanal a\u00e7\u0131k m\u0131? kapal\u0131 m\u0131? bakmaya gerek kalm\u0131yor...\n// bu bir syntactic sugar\nfor msg := range ch {\nfmt.Println(msg)\n}\n}\n\nfunc count(ch chan int) {\nfor i := 0; i &lt; 5; i++ {\nch &lt;- i\ntime.Sleep(time.Millisecond * 500) // yar\u0131m saniye bekletme, g\u00f6rmek i\u00e7im\n}\nclose(ch)\n}\n</code></pre>"},{"location":"15/02-channels/#buffered-channels","title":"Buffered Channels","text":"<p>Send / receive i\u015fleminin asenkron yani birbirlerini beklememeleri i\u00e7in buffered yani tamponlu channels kullan\u0131r\u0131z. Buffer\u0131n bo\u015f olma ya da dolu olma durumuna g\u00f6re di\u011fer unbuffered channels\u2019a g\u00f6re bloklama i\u015flemi farkl\u0131 \u00e7al\u0131\u015f\u0131r.</p> <p>Asl\u0131nda bir t\u00fcr sender ve receiver aras\u0131na buffer ekliyoruz:</p> <p>\u00d6rnek</p> <p>https://go.dev/play/p/WRH9PNXlEoK</p> <pre><code>$ go run src/15/channels/unblock-send-with-buffered-ch/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc main() {\nch := make(chan string, 1) // ayn\u0131 slice capacity gibi, kapasitesi 1 olan channel\nch &lt;- \"hello world\"        // g\u00f6nder, bloklama yok\nfmt.Println(&lt;-ch)          // an\u0131nda g\u00f6r\u00fcnt\u00fc\n\nfmt.Println(\"bitti\")\n}\n</code></pre> <p>E\u011fer <code>capacity &gt; 1</code> ise, send/receive garantisi yoktur. Send, receive\u2019den \u00f6nce olur. Asl\u0131nda belirsiz gecikme s\u00fcresini d\u00fc\u015f\u00fcrmek amac\u0131yla kullan\u0131lmal\u0131d\u0131r. Buffer k\u00fc\u00e7\u00fck olmal\u0131 yani sadece i\u015fi yapabilecek kadar channel kapasitesi olan bir buffer yap\u0131lmal\u0131d\u0131r.</p> <p>Buffer dolduktan sonra o channel\u2019dan okuma yapabiliriz. Buffer dolana kadar bloklama olur. Buffer sonsuz de\u011fildir! Buffer dolunca ba\u015fka bir goroutine gidip buffer\u2019dakileri okumal\u0131d\u0131r.</p> <p>E\u011fer <code>capacity = 1</code> ise, bu gecikmeli garanti yani, send, receive\u2019i garanti edebilir. Receive, send\u2019den \u00f6nce olur. Sender, buffer dolana kadar blok olmadan g\u00f6nderir. Buffer dolunca block olur. Receiver, buffer bo\u015falana kadar blok olmadan receive eder, buffer bo\u015fal\u0131nca blok olur.</p> <p>Buffered channel\u2019lar in-memory FIFO queue yani, ilk g\u00f6nderilen (send) ilk al\u0131nan (receive) \u015feklinde \u00e7al\u0131\u015f\u0131r.</p> <p>\u00d6rnek</p> <p>https://go.dev/play/p/FrBCaAwfg_l</p> <pre><code>$ go run src/15/channels/buffered-channels/main.go\n</code></pre> <p>kod:</p> <pre><code>// nolint:dupword\npackage main\n\nimport \"fmt\"\n\nfunc main() {\nch := make(chan int, 4)     // Kapasitesi 4 olan buffered bir channel\ndone := make(chan struct{}) // sinyalizasyon i\u00e7in kullan\u0131lacak bir channel, buna done channel pattern denir\n\n// goroutine ate\u015fliyoruz...\ngo func() {\nch &lt;- 1\nch &lt;- 2\nch &lt;- 3\nch &lt;- 4\n// ch &lt;- 5 // bloklar!\nclose(ch) // channel'\u0131 kapat, art\u0131k yaz\u0131lamaz\n}()\n\ngo func() {\n// buffered channel'dan oku, y\u00f6ntem 1\n// for i := 0; i &lt; cap(ch); i++ {\n//  fmt.Println(&lt;-ch)\n// }\n\n// buffered channel'dan oku, y\u00f6ntem 2\n// fmt.Println(&lt;-ch)\n// fmt.Println(&lt;-ch)\n// fmt.Println(&lt;-ch)\n// fmt.Println(&lt;-ch)\n// fmt.Println(&lt;-ch) chan tipinint zero-value'su yani 0 gelir...\n// buffer 4 idi. biz 5.yi okumak istedik.\n\n// buffered channel'dan oku, y\u00f6ntem 3\nfor d := range ch {\nfmt.Println(d)\n}\n\ndone &lt;- struct{}{}\n}()\n\n&lt;-done\n}\n\n// 1\n// 2\n// 3\n// 4\n</code></pre>"},{"location":"15/02-channels/#semaphore-pattern","title":"Semaphore Pattern","text":"<p>\u015eimdi \u00e7\u0131k kullan\u0131lan Semaphore Pattern yakla\u015f\u0131m\u0131na bakal\u0131m. \u00d6rnekte 20 tane goroutine\u2019imiz var, ayn\u0131 anda maksimum 5 goroutine kullanmak istiyoruz.</p> <p>\u00d6rnek</p> <p>https://go.dev/play/p/u3_rB6lNDe-</p> <pre><code>$ go run src/15/channels/buffered-semaphore-pattern/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\nmaxGoroutines := 20 // const maxGoroutines = 20 // olabilirdi\nch := make(chan int, maxGoroutines) // 20 kapasitesi olan buffered channel\n\nmaxSemaphore := 5 // const maxSemaphore = 5 // olabilirdi\nsch := make(chan struct{}, maxSemaphore) // semafore channel'\u0131. kapasitesi 5\n\n// done := make(chan struct{})\n\nfor g := 0; g &lt; maxGoroutines; g++ {\ngo func(n int) {\nsch &lt;- struct{}{}       // kapasite dolana kadar blok yok (5 slot)\ntime.Sleep(time.Second) // sadece g\u00f6r\u00fcnt\u00fclemek amac\u0131yla bu goroutine'i beklet\n\nch &lt;- n // kapasite dolana kadar blok yok (20 slot)\n&lt;-sch   // 5 olunca blokla\n}(g)\n}\n\n// channel'dan okuyoruz, kuyru\u011fu t\u00fcketiyoruz...\nfor maxGoroutines &gt; 0 {\nfmt.Println(maxGoroutines, \"ch\", &lt;-ch)\nmaxGoroutines--\n}\n\nfmt.Println(\"bitti...\")\n}\n</code></pre> <p>Amac\u0131m\u0131z, 20 tane goroutine\u2019i ayn\u0131 anda \u00e7al\u0131\u015ft\u0131r\u0131yoruz ama hepsi ayn\u0131 anda \u00e7al\u0131\u015fmas\u0131n diye semafore kullanarak ayn\u0131 anda maksimum 5 tane goroutine \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011fl\u0131yoruz.</p>"},{"location":"15/02-channels/#fan-out-pattern","title":"Fan Out Pattern","text":"<p>\u00d6rnek</p> <pre><code>$ go run src/15/channels/buffered-fan-out-pattern/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n)\n\nfunc main() {\nmaxGoroutines := 20 // 20 goroutine kullanaca\u011f\u0131z.\n\nch := make(chan int, maxGoroutines) // buffered channel, goroutine say\u0131s\u0131 kadar kapasite\ndone := make(chan struct{})         // done channel, sinyalizasyon i\u00e7in\n\nfor g := 0; g &lt; maxGoroutines; g++ {\n// nolint her goroutine'nin kendi buffer\u0131 var, paralel olarak \u00e7al\u0131\u015f\u0131yor.\ngo func(n int) {\nch &lt;- n\nfmt.Println(\"ch &lt;- kanala yolluyoruz (send)\", n)\n}(g)\n}\nclose(done)\n\n// t\u00fcketiyoruz, gelenleri al\u0131yoruz.\nfor maxGoroutines &gt; 0 {\nfmt.Println(\"&lt;- kanaldan al\u0131yoruz (receive)\", &lt;-ch)\nmaxGoroutines--\n}\n\n&lt;-done\n}\n</code></pre>"},{"location":"15/02-channels/#select","title":"<code>select</code>","text":"<p>Ayn\u0131 anda birden fazla channel\u2019\u0131 dinlemek i\u00e7in kullan\u0131r\u0131z. Daha \u00f6nce g\u00f6rd\u00fc\u011f\u00fcm\u00fcz <code>switch</code> statement\u2019\u0131na \u00e7ok benzer.</p> <p>\u00d6rnek</p> <pre><code>$ go run src/15/channels/select/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\nch1 := make(chan string)\nch2 := make(chan string)\n\n// goroutine 1\ngo func() {\nfor {\nch1 &lt;- \"500ms\"\ntime.Sleep(time.Millisecond * 500)\n}\n}()\n\n// goroutine 2\ngo func() {\nfor {\ntime.Sleep(time.Second * 2)\nch2 &lt;- \"\\t2sn\"\n}\n}()\n\n// sonsuz d\u00f6ng\u00fcde kanallar\u0131 dinliyoruz.\n// \u00e7\u0131k\u0131\u015f i\u00e7in ctrl+c\nfor {\nselect {\ncase m1 := &lt;-ch1: // ch1'den gelirse\nfmt.Println(\"ch1:\", m1)\ncase m2 := &lt;-ch2: // ch2'den gelirse\nfmt.Println(\"ch2:\", m2)\n}\n}\n}\n</code></pre>"},{"location":"15/02-channels/#ticker","title":"Ticker","text":"<p>\u00d6rnek</p> <pre><code>$ go run src/15/channels/ticker/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\ngo func() {\nheartBeat := time.Tick(1 * time.Second)      // bize channel d\u00f6ner\notherHeartBeat := time.Tick(5 * time.Second) // bize channel d\u00f6ner\n\nfor {\nselect {\ncase &lt;-heartBeat:\nfmt.Println(\"-&gt; heartBeat (every second)\")\ncase &lt;-otherHeartBeat:\nfmt.Println(\"-&gt; otherHeartBeat (every 5 seconds)\")\n}\n}\n}()\n\n// sonsuz d\u00f6ng\u00fcde \"tick\"\nfor {\nfmt.Println(\"tick\")\ntime.Sleep(100 * time.Millisecond)\n}\n}\n</code></pre>"},{"location":"15/02-channels/#worker-pattern","title":"Worker Pattern","text":"<p>\u00d6rnek</p> <p>https://go.dev/play/p/zp6kAN83BTP</p> <pre><code>$ go run src/15/channels/buffered-worker-pattern/main.go </code></pre> <p>kod:</p> <pre><code>package main\n\nimport \"fmt\"\n\nconst (\nworkers   = 10 // \u00fcretenler\nconsumers = 20 // t\u00fcketenler\n)\n\nfunc main() {\njobs := make(chan int, 100)\nresults := make(chan int, 100)\n\n// go worker(jobs, results)\n\n// go worker(jobs, results)\n// go worker(jobs, results)\n// go worker(jobs, results)\n\n// 10 tane worker tetikliyoruz\nfor i := 0; i &lt; workers; i++ {\ngo worker(jobs, results)\n}\n\n// 100 kapasitesi var buffered channel\nfor i := 0; i &lt; cap(jobs); i++ {\njobs &lt;- i\n}\nclose(jobs)\n\n// 20'li 20'li t\u00fcketiyoruz\nfor i := 0; i &lt; consumers; i++ {\nfmt.Println(&lt;-results)\n}\nclose(results)\n}\n\n// jobs: send only channel\n// results: receive only channel\nfunc worker(jobs &lt;-chan int, results chan&lt;- int) {\nfor n := range jobs {\nresults &lt;- task(n)\n}\n}\n\nfunc task(n int) int {\npow := n * n\nfmt.Println(\"n=\", n, \",n * n=\", pow)\nreturn pow\n}\n</code></pre>"},{"location":"15/02-channels/#nil-channel","title":"<code>nil</code> Channel","text":"<pre><code>package main\n\nimport \"fmt\"\n\nvar ch chan bool\n\nfunc main() {\nfmt.Println(ch == nil) // true\n\n&lt;-ch // fatal error: all goroutines are asleep - deadlock!\n}\n</code></pre>"},{"location":"15/02-channels/#channela-nil-gondermek","title":"Channel\u2019a <code>nil</code> G\u00f6ndermek","text":"<p>\u00d6rnek</p> <p>https://go.dev/play/p/h1A45dC2x3k</p> <pre><code>$ go run -race src/15/channels/send-nil/main.go\n</code></pre> <p>kod:</p> <pre><code>package main\n\n/*\nPackage main implements channel merge and demonstrates setting channel to nil\n\n    https://medium.com/justforfunc/why-are-there-nil-channels-in-go-9877cc0b2308\n\n    Original code is authored by: Francesc Campoy\n\n*/\n\nimport (\n\"crypto/rand\"\n\"fmt\"\n\"math/big\"\n\"time\"\n)\n\nfunc merge(a, b &lt;-chan int) &lt;-chan int {\nc := make(chan int)\ngo func() {\ndefer close(c)\n\n// a ya da b channel'\u0131 a\u00e7\u0131k oldu\u011fu s\u00fcrece\nfor a != nil || b != nil {\nselect {\ncase v, ok := &lt;-a:\nif !ok {\nfmt.Println(\"a is done\")\na = nil\ncontinue\n}\nc &lt;- v\ncase v, ok := &lt;-b:\nif !ok {\nfmt.Println(\"b is done\")\nb = nil\ncontinue\n}\nc &lt;- v\n}\n}\n}()\nreturn c\n}\n\nfunc produceChan(vs ...int) &lt;-chan int {\nc := make(chan int)\ngo func() {\nfor _, v := range vs {\nc &lt;- v\nrandomInt, _ := rand.Int(rand.Reader, big.NewInt(1000))\n\n// sanki bir i\u015flem oluyormu\u015f gibi...\ntime.Sleep(time.Duration(int(randomInt.Int64())+1) * time.Millisecond)\n}\nclose(c)\n}()\nreturn c\n}\n\nfunc main() {\na := produceChan(1, 3, 5, 7)\nb := produceChan(2, 4, 6, 8)\n\nc := merge(a, b)\n\nfor v := range c {\nfmt.Println(v)\n}\n}\n</code></pre>"},{"location":"15/02-channels/#drop-pattern","title":"Drop Pattern","text":"<p>\u00d6rnek</p> <p>https://go.dev/play/p/2fx8kUobwCi</p> <pre><code>$ go run -race src/15/channels/drop-pattern/main.go </code></pre> <p>kod:</p> <pre><code>package main\n\n/*\nPackage main implements drop pattern approach\n\nAmac\u0131m\u0131z sanki \u00e7ok yo\u011fun bir a\u011f ortam\u0131nda herkes canl\u0131 video izliyor.\nA\u011fdaki yo\u011funluktan dolay\u0131 ak\u0131\u015f\u0131 bozmadan baz\u0131 paketleri drop edip hayat\u0131n\ndevam etmesini sa\u011fl\u0131yoruz.\n*/\n\nimport (\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\ncapacity := 5\nch := make(chan string, capacity) // 5 string slotu olan buffered channel\n\ngo func() {\n// bu goroutine'de receive eden taraf\u0131z, channel'a yaz\u0131lan\u0131 (send) buradan\n// okuyoruz\nfor v := range ch {\nfmt.Printf(\"(receive): %q\\n\", v)\n}\n}()\n\npackages := 20\n// k\u00fc\u00e7\u00fck bir event-loop sim\u00fclasyonu yap\u0131yoruz,\n// sanki bir network i\u00e7indeyiz ve tcp paketlerini okuyoruz\nfor p := 0; p &lt; packages; p++ { // 20 paket okur gibi...\n\n// hem send hem de receive ayn\u0131 anda olmak \u00fczere\n// select ile \u00e7oklu channel i\u015flemleri yapabiliriz\nselect {\ncase ch &lt;- fmt.Sprintf(\"paket %d\", p): // channel'a yaz\u0131yoruz, buffer dolunca duracak\nfmt.Printf(\"(send): paket %d\\n\", p)\ndefault: // non-blocking, buffer dolunca buras\u0131 hep \u00e7al\u0131\u015facak\n// buffer dolunca bloklamadan devam et\n// bu sayese;\n// network gecikme maaliyetinden kurtulduk\n// channel \u00fczerinde bask\u0131 olu\u015fturma maaliyetinden kurtulduk\n// bu i\u015f bir timeout azaltmas\u0131 de\u011fil, kapasite azaltmas\u0131d\u0131r.\nfmt.Printf(\"..(drop): paket %d\\n\", p) // buffer dolunca drop!\n}\n}\n\nclose(ch) // for p := range ch buras\u0131n\u0131 sonland\u0131r\u0131r\nfmt.Println(\"bitiyor\")\n\ntime.Sleep(time.Second)\n}\n</code></pre>"},{"location":"15/02-channels/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://go.dev/blog/pipelines</li> <li>https://talks.golang.org/2012/concurrency.slide#1</li> <li>https://go.dev/blog/io2013-talk-concurrency</li> <li>https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html</li> <li>https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html</li> </ul>"},{"location":"15/03-mutex/","title":"B\u00f6l\u00fcm 15/03: Concurrency","text":""},{"location":"15/03-mutex/#mutex","title":"Mutex","text":"<p>Mutex, mutual exclusion yani verilen ortak bir kararla d\u0131\u015flama i\u015flemi anlam\u0131ndad\u0131r. <code>sync</code> paketindeki <code>Mutex</code> type\u2019\u0131 da bu t\u00fcr durumlardaki senkronizasyonu sa\u011flar.</p> <p>\u00d6rne\u011fin haf\u0131zada bir say\u0131 var. 10 tane goroutine ate\u015fleyerek bu say\u0131y\u0131 artt\u0131r\u0131yoruz. Peki o esnada okumak istesek ne olacak? Baz\u0131 goroutine\u2019ler de\u011feri de\u011fi\u015ftirirken, baz\u0131lar\u0131 da okumaya \u00e7al\u0131\u015facak ve bu esnada DATA RACE olu\u015facak!</p> <p>\u015eimdi test konusunda i\u015fledi\u011fimiz \u00f6rne\u011fe geri d\u00f6nelim ve DATA RACE\u2019i \u00e7\u00f6zelim:</p> <pre><code>$ go test -v -race github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/15/mutex/kvstore\n=== RUN   TestDataRace\n--- PASS: TestDataRace (0.00s)\nPASS\nok      github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/15/mutex/kvstore   1.637s\n</code></pre> <p>kod:</p> <pre><code>package kvstore\n\nimport (\n\"errors\"\n\"sync\"\n)\n\nvar errKeyNotFound = errors.New(\"key not found\")\n\n// Store is key-value store!\ntype Store struct {\nmu sync.RWMutex\ndb map[string]string\n}\n\n// Set new key to store.\nfunc (s *Store) Set(k, v string) error {\ns.mu.Lock()\ndefer s.mu.Unlock()\n\ns.db[k] = v\nreturn nil\n}\n\n// Get accepts key, returns value and error.\nfunc (s *Store) Get(k string) (string, error) {\ns.mu.RLock()\ndefer s.mu.RUnlock()\n\nv, ok := s.db[k]\nif !ok {\nreturn \"\", errKeyNotFound\n}\nreturn v, nil\n}\n\n// New returns new Store instance.\nfunc New(db map[string]string) Store {\nreturn Store{db: db}\n}\n</code></pre> <p><code>Store</code> i\u00e7inde <code>sync.RWMutex</code> g\u00f6md\u00fck (embed, composition). Read ve Write i\u015flemlerinde kullanaca\u011f\u0131m\u0131z i\u00e7in <code>RWMutex</code> kulland\u0131k. E\u011fer sadece okuma yapsak; <code>Mutex</code> kullanmak yeterli olurdu. Okuma ve yazma i\u015flemlerinden \u00f6nce lock ederek bir t\u00fcr de\u011feri sahipleniyoruz ve o an biz unlock edene kadar kimse i\u015flem yapam\u0131yor. \u0130\u015f bitiminde kilidi a\u00e7\u0131yoruz ve ak\u0131\u015f devam ediyor.</p> <p>G\u00fcn\u00fcn sonunda biz bu i\u015fi <code>map</code>\u2019ten okuma, <code>map</code>\u2019e yazma i\u00e7in kullan\u0131yoruz, go\u2019da bu i\u015f i\u00e7in haz\u0131r bir tip var; <code>sync.Map</code>. Concurrent Safe Map yani e\u015f zamanl\u0131 i\u015flerde g\u00fcvenle kullanabilece\u011fimiz bir <code>map</code>. <code>map</code>\u2019in tipi: <code>map[string]any</code></p> <p>\u0130ki \u00f6zel durum i\u00e7in optimize edilmi\u015ftir:</p> <ol> <li>key\u2019in de\u011feri sadece bir kez yaz\u0131ld\u0131\u011f\u0131nda ama \u00e7ok kez okundu\u011funda    cache\u2019leme yapar </li> <li>Birden fazla goroutine okuyabilir, yazabilir ve varolan key\u2019in de\u011feri \u00fczerine    de\u011fi\u015fiklik yapabilir</li> </ol> <p>Bu t\u00fcr kullan\u0131mlar oldu\u011funda performans olarak <code>Mutex</code> ve <code>RWMutex</code>\u2019e g\u00f6re lock etme i\u015flerinde g\u00f6zle g\u00f6r\u00fcl\u00fcr derecede performansl\u0131 \u00e7al\u0131\u015f\u0131r.</p> <p>\u00f6rnek</p> <p>https://go.dev/play/p/k974sMo66ZD</p> <pre><code>$ go run -race src/15/mutex/sync-map/main.go   # DATA RACE varsa \u00e7\u0131ks\u0131n! -race\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"sync\"\n)\n\nvar (\nm  sync.Map\nwg sync.WaitGroup\n)\n\nfunc main() {\n// 10 tane goroutine kullanarak key:i, value: i\nfor i := 0; i &lt; 10; i++ {\nwg.Add(1)\n\ngo func(i int) {\ndefer wg.Done()\nm.Store(i, i)\n}(i)\n}\n\nwg.Wait() // goroutine'lerin i\u015fini bitirmesini bekle\n\nm.Store(\"foo\", \"bar\") // manual olarak key ekle\n\n// value, ok syntactic sugar, ekledi\u011fin key'i oku\n\nif v, ok := m.Load(\"foo\"); ok {\nfmt.Println(\"foo -&gt;\", v)\n}\n\n// goroutine'lerle i\u00e7in doldurdu\u011fun map'ten de\u011ferleri geri oku.\nfor i := 0; i &lt; 10; i++ {\nif v, ok := m.Load(i); ok {\nfmt.Printf(\"%d -&gt; %v\\n\", i, v)\n}\n}\n\nfmt.Println(\"bitti\")\n}\n</code></pre>"},{"location":"15/03-mutex/#channel-kendi-icinde-mutex-kullanr","title":"Channel Kendi i\u00e7inde Mutex Kullan\u0131r","text":"<p>Hemen \u00f6rne\u011fe bakal\u0131m; basit bir webserver. Her istek geldi\u011finde haf\u0131zadaki de\u011feri 1 artt\u0131r\u0131yor (sanki??)!</p> <p>\u00f6rnek</p> <pre><code>$ go run -race src/15/mutex/in-channel/main.go   # DATA RACE varsa \u00e7\u0131ks\u0131n! -race\n\n# \u015fimdi ayr\u0131 bir shell session a\u00e7\u0131p:\n$ hey \"http://localhost:9000\"   # 200 tane get iste\u011fi atacak.\n$ http \"http://localhost:9000\"  # bakal\u0131m counter ka\u00e7 oldu?\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"log\"\n\"net/http\"\n)\n\nvar counter = make(chan int)\n\nfunc main() {\ngo generator()\n\nhttp.HandleFunc(\"/\", handler)\n\nfmt.Println(\"listening on :9000\")\nlog.Fatal(http.ListenAndServe(\":9000\", nil)) // nolint\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\nlog.Printf(\"[%s] %s\", r.Method, r.URL.String())\nfmt.Fprintf(w, \"number %d\", &lt;-counter)\n}\n\nfunc generator() {\nfor i := 0; ; i++ {\ncounter &lt;- i\n}\n}\n</code></pre>"},{"location":"15/03-mutex/#syncatomic","title":"<code>sync/atomic</code>","text":"<p>Baz\u0131 durumlarda mutex i\u015fini cpu instruction\u2019lar\u0131n\u0131 kullanarak da \u00e7\u00f6zebiliriz. \u00d6rne\u011fimizde toplamda 10 goroutine ile 0\u2019dan-100\u2019e kadar sayarak, <code>counter</code> de\u011ferini atomic olarak artt\u0131r\u0131yoruz:</p> <p>\u00f6rnek</p> <p>https://go.dev/play/p/6AtJqNlGx18</p> <pre><code>$ go run -race src/15/mutex/atomic-waitgroup/main.go   # DATA RACE varsa \u00e7\u0131ks\u0131n! -race\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"sync\"\n\"sync/atomic\"\n)\n\nvar counter int64\n\nfunc main() {\nvar wg sync.WaitGroup\n\nfmt.Printf(\"[start] - %d\\n\", counter)\n\nfor i := 0; i &lt; 10; i++ {\nwg.Add(1)\n\ngo func() {\nfor j := 0; j &lt; 100; j++ {\natomic.AddInt64(&amp;counter, 1)\n}\nwg.Done()\n}()\n}\n\nwg.Wait()\n\nfmt.Printf(\"[end] - %d\\n\", counter)\n}\n</code></pre> <p>Ayn\u0131 i\u015fi done channel pattern\u2019i kullanarak yapal\u0131m:</p> <p>\u00f6rnek</p> <p>https://go.dev/play/p/G_ZM6by6Dph</p> <pre><code>$ go run -race src/15/mutex/atomic-done-channel/main.go   # DATA RACE varsa \u00e7\u0131ks\u0131n! -race\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"fmt\"\n\"sync/atomic\"\n)\n\nvar counter int64\n\nfunc main() {\ndone := make(chan struct{})\n\nfmt.Printf(\"[start] - %d\\n\", counter)\n\n// 10 tane goroutine\nfor i := 0; i &lt; 10; i++ {\ngo func() {\nfor j := 0; j &lt; 100; j++ {\natomic.AddInt64(&amp;counter, 1)\n}\ndone &lt;- struct{}{} // goroutine i\u015fi bitti\n}()\n}\n\n// 10 goroutine var, 10 kere okumam\u0131z laz\u0131m\nfor i := 0; i &lt; 10; i++ {\n&lt;-done // biteni al\n}\nclose(done)\n\nfmt.Printf(\"[end] - %d\\n\", counter)\n}\n</code></pre>"},{"location":"15/03-mutex/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://gobyexample.com/mutexes</li> <li>https://yourbasic.org/golang/mutex-explained/</li> </ul>"},{"location":"15/04-context/","title":"B\u00f6l\u00fcm 15/04: Concurrency","text":""},{"location":"15/04-context/#context","title":"Context","text":"<p>Goroutine\u2019leri kullanarak ba\u015fka goroutine\u2019lere, network \u00fczerindeki bir servise (database, rpc) ya da ba\u015fka bir backend servisine eri\u015fmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131 zaman, goroutine\u2019in ula\u015fmaya \u00e7al\u0131\u015ft\u0131\u011f\u0131 \u015feye ula\u015f\u0131p ula\u015famad\u0131\u011f\u0131n\u0131 ya da belirli bir s\u00fcre sonras\u0131nda bu operasyonu iptal edilmesini sa\u011flayan mekanizman\u0131n ad\u0131na <code>context</code> deniyor.</p> <p>Genelde Deadline, Cancellation ve di\u011fer request kapsam\u0131ndaki sinyallar\u0131 ta\u015f\u0131mak i\u00e7in kullan\u0131l\u0131r.</p> <p>En basit tan\u0131m\u0131yla, belli bir s\u00fcre sonra goroutine\u2019i durdurmak ya da bir http iste\u011fine e\u011fer 5sn\u2019de (\u00e7\u00fcnk\u00fc bu iste\u011fi yapan yine goroutine kullan\u0131yor) cevap gelemezse iptal etmemizi sa\u011flan ara\u00e7 olarak anlayabiliriz.</p> <ul> <li><code>WithTimeout</code></li> <li><code>WithCancel</code></li> <li><code>WithDeadline</code></li> <li><code>WithValue</code></li> </ul> <p>gibi fonksiyonlar\u0131 bulunur. Unutulmamas\u0131 gereken \u015fey; e\u011fer context kullan\u0131lacaksa her i\u015flemin kendi context\u2019i olmal\u0131, yani, \u015fu hatal\u0131 bir kullan\u0131\u015f:</p> <pre><code>// kesinlikle olmaz!!!\ntype Foo struct {\nctx context.Context\n}\n</code></pre> <p>bu \u015fekilde share edilebilir bir de\u011fer de\u011fildir. E\u011fer context alan bir fonksiyon olacaksa mutlaka ilk parametre olarak <code>ctx</code> almal\u0131 ve her seferinde s\u0131f\u0131r bir <code>ctx</code> instance\u2019\u0131 verilmelidir.</p> <pre><code>func DoSomething(ctx context.Context, arg Arg) error {\n// ... use ctx ...\n}\n\nfunc main(){\nduration := 150 * time.Millisecond\n\nctx, cancel := context.WithTimeout(context.Background(), duration)\ndefer cancel()\n\nDoSomething(ctx, ...)\n}\n</code></pre> <p><code>Context</code> bir a\u011fa\u00e7 (tree) yap\u0131s\u0131 \u015feklindedir. Mutlaka Parent / Root Context olur. Parent / Root Context asla cancel olmaz ama bundan t\u00fcreyen child Context\u2019lerde bu t\u00fcr cancel operasyonlar\u0131 yap\u0131labilir.</p> <p>Genelde parent / root olarak <code>context.Background()</code> kullan\u0131r\u0131z. Bazen <code>context.TODO()</code> da kullan\u0131labilir. <code>context.TODO()</code> bize <code>nil</code> olmayan bo\u015f bir <code>context</code> d\u00f6ner. Uygulama i\u00e7inde bir context ihtiyac\u0131 oldu\u011funu ama nas\u0131l kullanaca\u011f\u0131m\u0131za tam karar vermedi\u011fimiz durumlarda <code>context.TODO()</code> kullan\u0131r\u0131z.</p>"},{"location":"15/04-context/#withtimeout","title":"WithTimeout","text":"<p>\u00f6rnek</p> <p>https://go.dev/play/p/biXpvephej1</p> <pre><code>$ go run src/15/context/with-timeout/main.go \ntimeout!!! context deadline exceeded\n</code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"context\"\n\"fmt\"\n\"time\"\n)\n\nconst timeout = 1 * time.Millisecond // 1 mili saniye\n\nfunc main() {\nctx, cancel := context.WithTimeout(context.Background(), timeout)\ndefer cancel()\n\nselect {\ncase &lt;-time.After(1 * time.Second): // time.After geriye channel d\u00f6ner\nfmt.Println(\"1 saniye sonra...\")\ncase &lt;-ctx.Done():\nfmt.Println(\"timeout!!!\", ctx.Err()) // context deadline exceeded\n}\n}\n\n// timeout!!! context deadline exceeded\n</code></pre>"},{"location":"15/04-context/#withcancel","title":"WithCancel","text":"<p>\u00f6rnek</p> <p>https://go.dev/play/p/vZ2FD2wyDjN</p> <pre><code>$ go run src/15/context/with-cancel/main.go </code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"context\"\n\"fmt\"\n)\n\nfunc main() {\n// burada ba\u015flayan goroutine \"leak\" etmeden \"return\" ediyor...\ngen := func(ctx context.Context) &lt;-chan int {\ndst := make(chan int)\nn := 1\n\ngo func() {\nfor {\nselect {\ncase &lt;-ctx.Done():\nreturn // &lt;- leak etmeden return...\ncase dst &lt;- n:\nn++\n}\n}\n}()\n\nreturn dst\n}\n\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\n// a\u015fa\u011f\u0131daki loop bitince art\u0131k main func'dan exit etme i\u015flemi ba\u015flayacak\n// ve defer cancel() \u00e7al\u0131\u015facak!\n// cancel() bitince ctx.Done()'dan receive edilecek ve goroutine'den\n// \u00e7\u0131k\u0131lacak.\nfor n := range gen(ctx) {\nfmt.Println(n)\n\nif n == 5 {\nbreak\n}\n}\n// code buraya geldi\u011finde defer devreye girip cancel'\u0131 tetikleyecek.\n// goroutine'daki ctx.Done()'a sinyal gelecek ve goroutine g\u00fcvenli\n// bir \u015fekilde i\u015fini bitirip return edecek.\n}\n</code></pre>"},{"location":"15/04-context/#withdeadline","title":"WithDeadline","text":"<p>\u00f6rnek</p> <p>https://go.dev/play/p/3_c7JD2sKJG</p> <pre><code>$ go run src/15/context/with-dead-line/main.go </code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"context\"\n\"fmt\"\n\"time\"\n)\n\nfunc main() {\ntimeout := time.Now().Add(3 * 1000 * time.Millisecond) // 3sn\n\nctx, cancel := context.WithDeadline(context.Background(), timeout)\ndefer cancel()\n\nLOOP:\nfor {\nselect {\ncase &lt;-time.After(1 * time.Second):\nfmt.Println(\"1sn!\")\ncase &lt;-ctx.Done():\nfmt.Println(\"WithDeadline\", ctx.Err())\nbreak LOOP\n}\n}\n\nfmt.Println(\"exit\")\n}\n\n// 1sn!\n// 1sn!\n// 1sn!\n// WithDeadline context deadline exceeded\n// exit\n</code></pre>"},{"location":"15/04-context/#withvalue","title":"WithValue","text":"<p>\u00f6rnek</p> <p>https://go.dev/play/p/wFyT4vdYsey</p> <pre><code>$ go run src/15/context/with-value/main.go </code></pre> <p>kod:</p> <pre><code>package main\n\nimport (\n\"context\"\n\"fmt\"\n)\n\ntype ck string // custom key\n\nfunc hasKey(ctx context.Context, key ck) bool {\nif v := ctx.Value(key); v != nil {\nreturn true\n}\nreturn false\n}\n\nfunc main() {\nidKey := ck(\"id\")\nemailKey := ck(\"email\")\nsecretKey := ck(\"secret\")\n\n// parent context\nctx := context.Background()\n\n// child context\nctx = context.WithValue(ctx, idKey, 1)\n\n// child context\nctx = context.WithValue(ctx, emailKey, \"vigo@foo.com\")\n\nfmt.Println(\"idKey\", hasKey(ctx, idKey))\nfmt.Println(\"emailKey\", hasKey(ctx, emailKey))\nfmt.Println(\"secretKey\", hasKey(ctx, secretKey))\n\nif hasKey(ctx, idKey) {\nfmt.Println(\"value of id\", ctx.Value(idKey))\n}\nif hasKey(ctx, emailKey) {\nfmt.Println(\"value of email\", ctx.Value(emailKey))\n}\n}\n</code></pre>"},{"location":"15/04-context/#context-waitgroup-channels-ve-deadline","title":"Context, WaitGroup, Channels ve Deadline","text":"<p>Elimizde <code>1000</code> tane mesaj var, bunlar\u0131 d\u0131\u015f d\u00fcnyada bir web api\u2019ya (servise) g\u00f6ndermek istiyoruz. \u0130stek e\u011fer 300 milisaniyeden uzun s\u00fcrerse i\u015flemi iptal etmek istiyoruz, 10 tane <code>worker</code> ile bu mesajlar\u0131 eritmek istiyoruz.</p> <p>\u00f6rnek</p> <p>https://go.dev/play/p/Kift5XwSh2q</p> <pre><code>$ go run -race src/15/context/waitgroup-channel-deadline/main.go \n-&gt; (sending ?) - workerID 3 mesaj 7 s\u00fcre 207ms\n-&gt; (sending ?) - workerID 2 mesaj 1 s\u00fcre 429ms\n-&gt; (sending ?) - workerID 4 mesaj 4 s\u00fcre 719ms\n-&gt; (sending ?) - workerID 0 mesaj 0 s\u00fcre 922ms\n-&gt; (sending ?) - workerID 5 mesaj 6 s\u00fcre 447ms\n-&gt; (sending ?) - workerID 8 mesaj 3 s\u00fcre 452ms\n-&gt; (sending ?) - workerID 6 mesaj 8 s\u00fcre 178ms\n-&gt; (sending ?) - workerID 9 mesaj 5 s\u00fcre 174ms\n-&gt; (sending ?) - workerID 7 mesaj 9 s\u00fcre 76ms\n-&gt; (sending ?) - workerID 1 mesaj 2 s\u00fcre 990ms\n(sent) - workerID 7 mesaj 9 s\u00fcre 76ms\n-&gt; (sending ?) - workerID 7 mesaj 10 s\u00fcre 773ms\n(sent) - workerID 9 mesaj 5 s\u00fcre 174ms\n-&gt; (sending ?) - workerID 9 mesaj 11 s\u00fcre 34ms\n(sent) - workerID 6 mesaj 8 s\u00fcre 178ms\n-&gt; (sending ?) - workerID 6 mesaj 12 s\u00fcre 752ms\n(sent) - workerID 3 mesaj 7 s\u00fcre 207ms\n-&gt; (sending ?) - workerID 3 mesaj 13 s\u00fcre 556ms\n(sent) - workerID 9 mesaj 11 s\u00fcre 34ms\n-&gt; (sending ?) - workerID 9 mesaj 14 s\u00fcre 526ms\n(sent) - workerID 4 mesaj 4 s\u00fcre 719ms\n---&gt; (timeout) - workerID 4\n---&gt; (timeout/cancel) mesaj: 15\n(sent) - workerID 3 mesaj 13 s\u00fcre 556ms\n---&gt; (timeout) - workerID 3\n(sent) - workerID 9 mesaj 14 s\u00fcre 526ms\n---&gt; (timeout) - workerID 9\n(sent) - workerID 6 mesaj 12 s\u00fcre 752ms\n---&gt; (timeout) - workerID 6\n(sent) - workerID 7 mesaj 10 s\u00fcre 773ms\n(closed) - workerID 7\n(sent) - workerID 8 mesaj 3 s\u00fcre 452ms\n(closed) - workerID 8\n(sent) - workerID 1 mesaj 2 s\u00fcre 990ms\n(closed) - workerID 1\n(sent) - workerID 2 mesaj 1 s\u00fcre 429ms\n---&gt; (timeout) - workerID 2\n(sent) - workerID 0 mesaj 0 s\u00fcre 922ms\n---&gt; (timeout) - workerID 0\n(sent) - workerID 5 mesaj 6 s\u00fcre 447ms\n(closed) - workerID 5\nbitti\n</code></pre>"},{"location":"15/04-context/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://go.dev/blog/context</li> <li>https://talks.golang.org/2014/gotham-context.slide#1</li> <li>https://www.ardanlabs.com/blog/2019/09/context-package-semantics-in-go.html</li> </ul>"},{"location":"16/01-naming-conventions/","title":"B\u00f6l\u00fcm 16/01: \u0130simlendirme Kurallar\u0131","text":"<p>Kural\u0131m\u0131z hep \u015fu:</p> <p>Conventions over configuration / Coding by convention</p> <p>Yani, \u015fartlar ne olursa olsun, kafam\u0131za g\u00f6re i\u015f yapmayaca\u011f\u0131z ve geleneklere ba\u011fl\u0131 kalaca\u011f\u0131z. Her zaman belirlenmi\u015f standartlara sad\u0131k kalmak olarak da izah edebiliriz.</p> <p>https://en.wikipedia.org/wiki/Convention_over_configuration</p> <p>Bir yaz\u0131l\u0131m \u00fcr\u00fcn\u00fcn\u00fcn ya da k\u00fct\u00fcphanesinin, kullan\u0131c\u0131lara bol miktarda yap\u0131land\u0131rma se\u00e7ene\u011fi sunmak yerine, belirli varsay\u0131lan davran\u0131\u015flara veya 'standartlara' sahip olmas\u0131n\u0131 tercih eden bir yakla\u015f\u0131md\u0131r.</p> <p>Bu bak\u0131mdan, isimlendirme yaparken bu kurallara dikkat etmemiz gerekir.</p>"},{"location":"16/01-naming-conventions/#degisken-adlar","title":"De\u011fi\u015fken Adlar\u0131","text":"<p>De\u011fi\u015fken ad\u0131, de\u011fi\u015fkenin tuttu\u011fu de\u011feri tarif etmeli, de\u011fi\u015fkenin tipini de\u011fil! Yanl\u0131\u015f (k\u00f6t\u00fc) \u00f6rnekler;</p> <pre><code>var usersMap     map[string]*User\nvar companiesMap map[string]*Company\nvar productsMap  map[string]*Product\nvar usersList    []User\n</code></pre> <p>Do\u011frusu:</p> <pre><code>// ...Maps son ekine ihtiya\u00e7 yok\n\nvar users     map[string]*User      // i\u00e7inde User\u2019lar olan koleksiyon (map ya da slice)\nvar users     []User\n\nvar companies map[string]*Company   // i\u00e7inde Company\u2019ler olan koleksiyon (map ya da slice)\nvar companies []Company             // i\u00e7inde Company\u2019ler olan koleksiyon (map ya da slice)\nvar products  []Product             // i\u00e7inde Product\u2019lar olan koleksiyon (map ya da slice)\n</code></pre> <p>Tahmin edilebilir, anla\u015f\u0131l\u0131r adlar kullan\u0131n:</p> <ul> <li><code>i</code>, <code>j</code>, <code>k</code> gibi k\u0131sa de\u011fi\u015fkenleri <code>for</code> loop\u2019lar\u0131nda</li> <li><code>n</code> saya\u00e7, toplam ya da miktar\u2019\u0131 temsil ederken</li> <li><code>map</code>\u2019lerde, <code>v</code> -&gt; <code>value</code>, <code>k</code> -&gt; <code>key</code> gibi...</li> <li><code>a</code>, <code>b</code> ayn\u0131 tipteki nesneleri ifade ederken (kar\u015f\u0131la\u015ft\u0131rma vs), yerleri de de\u011fi\u015febilir</li> <li><code>x</code>, <code>y</code> kar\u015f\u0131la\u015ft\u0131rma yaparken olu\u015fturulan yerel (local) de\u011fi\u015fkenlerin genel ad\u0131</li> <li><code>s</code> genelde <code>string</code> tipindekilerin k\u0131saltmas\u0131 olarak</li> <li>Koleksiyonlar (map, slice, array) mutlaka \u00e7o\u011ful olmal\u0131</li> </ul>"},{"location":"16/01-naming-conventions/#fonksiyon-adlar","title":"Fonksiyon Adlar\u0131","text":"<p>Fonksiyonlar d\u00f6nd\u00fcrd\u00fckleri sonuca g\u00f6re adland\u0131r\u0131lmal\u0131d\u0131r.</p> <ul> <li>Mutlaka karakter ile ba\u015flamal\u0131d\u0131r, say\u0131 ile ba\u015flamaz, i\u00e7inde <code>&lt;space&gt;</code>   karakteri olamaz</li> <li>Exportable\u2019lar b\u00fcy\u00fck harfle ba\u015flar ve mutlaka <code>comment</code> olarak dok\u00fcman\u0131 yaz\u0131l\u0131r</li> <li>B\u00fcy\u00fck/k\u00fc\u00e7\u00fck harfe duyarl\u0131d\u0131r (case-sensitive)</li> </ul> <pre><code>func Add(a, b) int {}\n// describes only the operation\n</code></pre> <p>ama daha da iyisi;</p> <pre><code>func Sum(a, b) int {}  // sonu\u00e7 ne? iki say\u0131n\u0131n toplam\u0131ndan \u00e7\u0131kan yeni de\u011fer\n// returned thing is a sum of a and b...\n// this describes the result, not the operation...\n</code></pre> <p>K\u00f6t\u00fc \u00f6rnek:</p> <pre><code>package grpc\n\nfunc NewClient() *Client\nfunc NewClientWithTimeout(timeout time.Duration) *Client\n</code></pre> <p>Bu \u015fekilde daha iyi yap\u0131labilir (functional options pattern);</p> <pre><code>type Option func(*Client) *Client\n\nfunc NewClient(opts ...Option)\n\nfunc WithTimeout(timeout time.Duration) func(c *Client) *Client\n\nclient := grpc.NewClient(grpc.WithTimeout(10 * time.Seconds))\n\n// same constructor with different options\n</code></pre>"},{"location":"16/01-naming-conventions/#metot-adlar","title":"Metot Adlar\u0131","text":"<p>Yapt\u0131klar\u0131 eylemi anlatacak \u015fekilde adland\u0131r\u0131lmal\u0131d\u0131r. Fonksiyon adland\u0131rmas\u0131n\u0131n tam tersidir:</p> <p>https://go.dev/play/p/lYSUe8VC-qG</p> <pre><code>package main\n\nimport \"fmt\"\n\ntype user struct {\nemail    string\npassword string\nfullName string\n}\n\n// Email is a getter for user.email\nfunc (u user) Email() string {\nreturn u.email\n}\n\n// SetEmail is a setter for user.email\nfunc (u *user) SetEmail(email string) {\nu.email = email\n}\n\n// resetPassword resets user's password\nfunc (u *user) resetPassword() error {\nfmt.Println(\"example reset password\")\nu.password = \"reset\"\nreturn nil\n}\n\nfunc main() {\nu := &amp;user{}\nu.SetEmail(\"vigo@me.com\")\nu.resetPassword()\n\nfmt.Println(\"email\", u.Email())\nfmt.Printf(\"%+v\\n\", u)\n}\n// example reset password\n// email vigo@me.com\n// &amp;{email:vigo@me.com password:reset fullName:}\n</code></pre>"},{"location":"16/01-naming-conventions/#interface-adlar","title":"Interface Adlar\u0131","text":"<p><code>interface</code> i\u00e7in davran\u0131\u015flar\u0131 belirler dedik, bu bak\u0131mdan da sonuna <code>er</code> tak\u0131s\u0131 al\u0131r; i\u00e7inde <code>Read()</code> tan\u0131m\u0131 olan paketin <code>XxxReader</code> olma ihtimali y\u00fcksek. Sadece <code>Read()</code> ve <code>Write()</code> (yani sadece 2 fonksiyon) varsa <code>XxxReadWriter</code>, e\u011fer <code>Read()</code>, <code>Write()</code>, <code>Count()</code> (3 fonksiyon) varsa; <code>XxxReadWriteCounter</code> olabilir.</p> <p>Kodun testini yazmak i\u00e7in illaki <code>interface</code> tan\u0131m\u0131 yapmak ve bu <code>interface</code>\u2019leri test i\u00e7inde kand\u0131rmak (mock\u2019lamak) gerekir. Bu bak\u0131mdan da; ger\u00e7ek d\u00fcnyada, go\u2019nun standart k\u00fct\u00fcphanesindeki gibi bir, iki ya da maksimum 3 tane fonksiyon tan\u0131m\u0131 olan interface yapmak neredeyse imkans\u0131za yak\u0131nd\u0131r.</p> <p>Veritaban\u0131 katman\u0131 i\u00e7in (storage) tan\u0131m yap\u0131yorsunuz:</p> <pre><code>type Storer interface {  // \u015fimdi i\u00e7eride Store diye bir fonksiyon olmas\u0131n\u0131 bekliyoruz\nGet()\nCreate()\nUpdate()\nDelete()\nList()\n}\n</code></pre> <p>Belkide;</p> <pre><code>type Getter interface {\nGet()\n}\n\ntype Creater interface {\nCreate()\n}\n\ntype Updater interface {\nUpdate()\n}\n\ntype Deleter interface {\nDelete()\n}\n\ntype Lister interface {\nList()\n}\n\ntype Storage interface {\nGetter\nCreater\nUpdater\nDeleter\nLister\n}\n\n// ya da\ntype GetCreateUpdateDeleteLister interface {\nGetter\nCreater\nUpdater\nDeleter\nLister\n}\n</code></pre> <p>Ben olsam; <code>type Storer interface</code> ya da <code>type Storage interface</code> ile ilerlerim.</p>"},{"location":"16/01-naming-conventions/#paket-adlar","title":"Paket Adlar\u0131","text":"<p>Belkide go\u2019daki en zor, en kritik isimlendirme paket isimlendirmesidir. \u0130smi, paketin amac\u0131n\u0131 anlatmal\u0131d\u0131r. </p> <ul> <li>\u0130yi bir paket ad\u0131nda sadece harfler olur; <code>strings</code>, <code>strconv</code>, <code>fmt</code>, <code>io</code>, <code>os</code>...</li> <li><code>stringUtils</code>, <code>foo_tools</code>, <code>x11Package</code> gibi isimler olmaz!</li> <li><code>base</code>, <code>common</code>, <code>util</code>, <code>helpers</code> gibi genel-ge\u00e7er paket ad\u0131 olmamal\u0131 ***</li> <li>Paket ad\u0131, olas\u0131 g\u00fczel de\u011fi\u015fken ad\u0131 kullan\u0131m\u0131na engel olmamal\u0131 *</li> <li>Paketinizi i\u00e7erdiklerine g\u00f6re de\u011fil, sa\u011flad\u0131klar\u0131na g\u00f6re adland\u0131r\u0131n</li> <li>S\u0131n\u0131fa ya da t\u00fcre g\u00f6re adland\u0131rmay\u0131n</li> <li>Paket d\u00fczeyindeki de\u011fi\u015fkenler, t\u00fcm program\u0131 kapsad\u0131\u011f\u0131 i\u00e7in daha uzun   tan\u0131mlay\u0131c\u0131lar\u0131 (method ad\u0131, de\u011fi\u015fken ad\u0131 vs...) olmal\u0131d\u0131r.</li> <li>Ba\u015fka paketlerin ya da fonksiyon / metotlar\u0131n da kullanabilece\u011fi isimlerden ka\u00e7\u0131n\u0131n</li> <li>\u0130\u00e7eri\u011fi ba\u011flam\u0131nda do\u011fru miktarda bilgi ta\u015f\u0131yan en k\u0131sa ad\u0131 kullan\u0131n</li> </ul> <pre><code>import \"github.com/pkg/term/v2\" // k\u00f6t\u00fc\nimport \"github.com/pkg/v2/term\" // daha iyi\n\nfunc WriteLog(context context.Context, message string) // Don\u2019t, context is stolen\nfunc WriteLog(ctx context.Context, message string)     // Good\n</code></pre> <p>Peki k\u00f6t\u00fc paket adlar\u0131 nas\u0131l olur? Anlams\u0131z paket adlar\u0131ndan ka\u00e7\u0131nmak laz\u0131m. <code>util</code>, <code>common</code> ya da <code>misc</code> adl\u0131 paketler, kullan\u0131c\u0131ya paketin ne i\u00e7erdi\u011fi konusunda hi\u00e7bir fikir vermez. Bu, kullan\u0131c\u0131n\u0131n paketi kullanmas\u0131n\u0131 zorla\u015ft\u0131r\u0131r ve paketin bak\u0131m\u0131n\u0131 (maintenance) zorla\u015ft\u0131r\u0131r. \u00d6rne\u011fin;</p> <pre><code>package util\nfunc NewStringSet(...string) map[string]bool {...}\nfunc SortStringSet(map[string]bool) []string {...}\n</code></pre> <p>olsa a\u015fa\u011f\u0131daki gibi kullan\u0131l\u0131r:</p> <pre><code>set := util.NewStringSet(\"c\", \"a\", \"b\")\nfmt.Println(util.SortStringSet(set))\n</code></pre> <p>Halbuki;</p> <pre><code>package stringset\nfunc New(...string) map[string]bool {...}\nfunc Sort(map[string]bool) []string {...}\n</code></pre> <p>\u015feklinde olsa;</p> <pre><code>set := stringset.New(\"c\", \"a\", \"b\")\nfmt.Println(stringset.Sort(set))\n</code></pre> <p>olur ve daha idiomatic (dilin \u00f6zelliklerini ta\u015f\u0131yan) bir hal al\u0131r! Yeni \u00f6zellikler geli\u015ftirmeler geldik\u00e7e;</p> <pre><code>package stringset\n\ntype Set map[string]bool\n\nfunc (s Set) Sort() []string {...}  // art\u0131k bu method\u2019a d\u00f6n\u00fc\u015ft\u00fc!\n\n\nfunc New(...string) Set {...}\n</code></pre> <p>ilerler..</p>"},{"location":"16/01-naming-conventions/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://go.dev/blog/package-names</li> <li>https://rakyll.org/style-packages/</li> <li>https://go.dev/blog/package-names#bad-package-names-h2</li> <li>https://github.com/vigo/stringutils-demo</li> </ul> <p>Paket isminin d\u00fc\u015f\u00fcn\u00fcrken hep kafamda \u015fu an\u0131 canland\u0131r\u0131r\u0131m: <code>paketAd\u0131.New()</code> ile \u00e7a\u011f\u0131raca\u011f\u0131m; \u00f6rne\u011fin 3. parti bir servis i\u00e7in client geli\u015ftirmesi yapmam gerekiyor; servis sa\u011flay\u0131c\u0131 ad\u0131: <code>acme</code>, ben de bu servisten kullan\u0131c\u0131n\u0131n upload etti\u011fi dosyalar\u0131n listesini \u00e7eken bir client yazaca\u011f\u0131m;</p> <ul> <li>Akl\u0131ma <code>http</code> paketi geliyor, <code>http.Client</code> var;</li> <li><code>xxxxx.New</code> dedi\u011fim zaman bana acme http client vermeli</li> <li><code>acme</code> diye firman\u0131n \u00e7\u0131kartt\u0131\u011f\u0131 bir paket var m\u0131?</li> <li><code>acmeclient.New</code></li> </ul> <p>Paket ad\u0131, olas\u0131 g\u00fczel de\u011fi\u015fken ad\u0131 kullan\u0131m\u0131na engel olmamal\u0131</p> <p>https://dave.cheney.net/2019/01/29/you-shouldnt-name-your-variables-after-their-types-for-the-same-reason-you-wouldnt-name-your-pets-dog-or-cat</p> <p>\u00d6rne\u011fin <code>context</code> paket ad\u0131 y\u00fcz\u00fcnden, kullan\u0131ld\u0131\u011f\u0131 yerlede <code>var context = ...</code> \u015feklinde bir kullan\u0131m yapam\u0131yoruz \u00e7\u00fcnk\u00fc paketi i\u00e7eri ald\u0131\u011f\u0131m\u0131 i\u00e7in <code>context</code> anahtar kelimesi art\u0131k o kapsam i\u00e7inde kullan\u0131l\u0131r durumda.</p> <p>Bu bak\u0131mdan da <code>func WriteLog(ctx context.Context, message string)</code> oldu\u011fu gibi <code>ctx</code> \u015feklinde kullanmak zorunda kal\u0131yoruz.</p>"},{"location":"17/01-kurulumlar/","title":"B\u00f6l\u00fcm 17/01: Golang Paketi Geli\u015ftirmek","text":"<p>Geli\u015ftirme yapmaya ba\u015flamadan \u00f6nce baz\u0131 yard\u0131mc\u0131 ara\u00e7lara ihtiyac\u0131m\u0131z var. Bunlar\u0131n ba\u015f\u0131nda da <code>golangci-linter</code> geliyor.</p> <p>https://golangci-lint.run/</p> <p>Kurulumu;</p> <p>https://golangci-lint.run/usage/install/#local-installation</p> <p>adresinden takip ederek yapabilirsiniz. <code>golangci-linter</code> \u00e7al\u0131\u015f\u0131rken config yaml dosyas\u0131 arar, bu dosya belli lokasyonlarda olabilir. Genelde <code>go.mod</code> dosyas\u0131n\u0131n bulundu\u011fu, projenin ROOT dizinine koyar\u0131z bu dosyay\u0131.</p> <p>Komut sat\u0131r\u0131nda, ROOT dizindeyken;</p> <pre><code>$ golangci-lint run\n</code></pre> <p>diyerek t\u00fcm kontrolleri \u00e7al\u0131\u015ft\u0131rabilirsiniz. E\u011fer hata yoksa geriye hi\u00e7bir \u015fey d\u00f6nmez, bu durum i\u015flerin yolunda oldu\u011fu anlam\u0131ndad\u0131r.</p> <p>Go, <code>gofmt</code> komutu ile beraber gelir;</p> <pre><code>$ command -v gofmt\n/opt/homebrew/opt/go/libexec/bin/gofmt\n</code></pre> <p>Bu ara\u00e7 sayesinde yazd\u0131\u011f\u0131n\u0131z kodun otomatik olarak formatlanmas\u0131, yani d\u00fczg\u00fcn \u015fekilde g\u00f6r\u00fcnmesini sa\u011flar:</p> <pre><code>$ gofmt -h\n$ gofmt &lt;dosya.go&gt;      # d\u00fczeltilmi\u015f kodu stdout\u2019a yazar\n$ gofmt -w &lt;dosya.go&gt;   # d\u00fczeltilmi\u015f kodu &lt;dosya.go&gt; \u00fczerine yazar\n</code></pre> <p><code>gofumpt</code> ise <code>gofmt</code>\u2019un daha da kat\u0131/kuralc\u0131 halidir ve ayn\u0131 \u015fekilde \u00e7al\u0131\u015f\u0131r;</p> <pre><code>$ go install mvdan.cc/gofumpt@latest\n$ gofumpt -h\n$ gofumpt &lt;dosya.go&gt;      # d\u00fczeltilmi\u015f kodu stdout\u2019a yazar\n$ gofumpt -w &lt;dosya.go&gt;   # d\u00fczeltilmi\u015f kodu &lt;dosya.go&gt; \u00fczerine yazar\n</code></pre> <p>Otomatik olarak <code>import</code> ifadelerinin tamamlanmas\u0131 i\u015fini <code>goimports</code> yapar;</p> <pre><code>$ go install golang.org/x/tools/cmd/goimports@latest\n$ goimports -h\n\n$ nano /tmp/main.go\n</code></pre> <p>\u015eimdi \u00f6zellikle yamuk yumuk, import\u2019u eksik bir go kodu:</p> <pre><code>package main\n\nfunc main(){\nfmt.Println(\"ok\")\n}\n</code></pre> <p>\u015eimdi;</p> <pre><code>$ gofmt /tmp/main.go # sadece stdout\u2019a \u00e7\u0131kt\u0131\npackage main\n\nfunc main() {\n    fmt.Println(\"ok\")\n}\n\n$ gofmt -w /tmp/main.go\n$ gofumpt -w /tmp/main.go\n$ goimports -w /tmp/main.go\n\n$ cat /tmp/main.go \npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"ok\")\n}\n</code></pre> <p>Go otomatik olarak girintileme i\u00e7in (indentation) <code>TAB</code> kullan\u0131r. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi kod otomatik olarak d\u00fczeltildi.</p> <p><code>golines</code> ile otomatik olarak uzun sat\u0131rlar\u0131 daha okunur hale getirebiliriz.</p> <pre><code>$ go install github.com/segmentio/golines@latest\n$ golines --help\n$ golines -m 120 -w &lt;dosya.go&gt;\n</code></pre> <p><code>go vet</code> asl\u0131nda <code>go</code> ile built-in gelen, yine kodu analiz edip belli d\u00fczeltmeleri bize s\u00f6yler.</p> <pre><code>$ go vet ./...         # t\u00fcm paketleri vet\u2019le\n$ go vet &lt;PAKET&gt;       # &lt;PAKET&gt; vet\u2019le\n$ go vet github.com/vbyazilim/maoyyk2023-golang-101-kursu/src/15/mutex/kvstore # gibi\n</code></pre> <p><code>vet</code> yaparken yan ara\u00e7lar da kullan\u0131r\u0131z: <code>shadow</code>;</p> <pre><code>$ go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest\n$ shadow -h\n</code></pre> <p><code>shadow</code> bize istemeden yapt\u0131\u011f\u0131m\u0131z Variable Shadowing\u2019leri g\u00f6sterir. \u00d6zellikle <code>if val, ok := function; !ok{}</code> gibi ifadelerde istemeden de\u011fi\u015fken g\u00f6lgeleme yapm\u0131\u015f olabiliriz.</p> <pre><code>$ go vet -vettool \"$(command -v shadow)\" ./...\n$ go vet -vettool \"$(command -v shadow)\" &lt;PAKET&gt;\n</code></pre> <p>Kulland\u0131\u011f\u0131n\u0131z kod edit\u00f6rleri genelde t\u00fcm bu linter/checker i\u015flerini otomatik olarak yapman\u0131z\u0131 sa\u011flar. Gerekli kurulumlar\u0131 yapt\u0131ktan sonra kod edit\u00f6r\u00fcn\u00fcz\u00fc de ayarlaman\u0131z gerekir.</p> <p><code>goimports</code> bazen hata yapar. Mesela <code>uuid</code> paketi. E\u011fer ba\u015fka projelerde; <code>github.com/gofrs/uuid</code> kullanm\u0131\u015fsan\u0131z ve yeni projede <code>github.com/google/uuid</code> kulan\u0131rsan\u0131z, <code>goimports</code> ilk buldu\u011fu paketi otomatik olarak takar :) Yani siz <code>github.com/google/uuid</code> bulmas\u0131n\u0131 beklerken di\u011ferini g\u00f6r\u00fcrseniz elle d\u00fczeltme yapmak gerekir.</p> <p>Kurulan t\u00fcm paketler;</p> <pre><code>$ cd $(go env GOMODCACHE)\n</code></pre> <p>alt\u0131na clone (<code>git clone</code>) edilir.</p>"},{"location":"17/02-go-modul-anotomisi/","title":"B\u00f6l\u00fcm 17/02: Golang Paketi Geli\u015ftirmek","text":"<p>\u015eimdi \u00f6rnek bir <code>go.mod</code> dosyas\u0131na bakal\u0131m;</p> <pre><code>module github.com/my/library\n|\n\u2514---- bu mod\u00fcl\u00fcn host edildi\u011fi yer, import path\n\ngo 1.16       &lt;---- mod\u00fcl develop edilirken kullan\u0131lan golang\u2019in versiyonu\n\nrequire (     &lt;---- mod\u00fcl\u00fcn ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131n tan\u0131m\u0131n\u0131n ba\u011flad\u0131\u011f\u0131 yer\ngithub.com/dep/one v1.0.0 github.com/dep/two/v2 v2.3.0 github.com/vigo/stringutils-demo v0.1.1 // indirect\n|\n\u2514---- bu paket \"go get github.com/vigo/stringutils-demo\" ile kurulmu\u015f ama\nhen\u00fcz kod i\u00e7inde kullan\u0131lmam\u0131\u015f, bu bak\u0131mdan \"indirect\"\nba\u011f\u0131ml\u0131l\u0131k olarak verilmi\u015f ama hi\u00e7bir yerde kullan\u0131lmam\u0131\u015f.\ngithub.com/dep/other v0.0.0-20180523231146-b3f5c0f6e5f1\n|\n\u2514---- Bu asl\u0131nda \"pseudo-version\" yani esas bir tag\u2019e de\u011fil, commit\u2019e bak\u0131yor.\nTarih bilgisi      - Commit Hash\n2018-05-23-23:11:46-b3f5c0f6e5f1\n\ngithub.com/dep/legacy v2.0.0+incompatible\n|\n\u2514---- \"incompatible\" \u00e7\u00fcnk\u00fc bu paket hen\u00fcz \"go mod\" yap\u0131s\u0131na ge\u00e7memi\u015f.\n)\n\nexclude github.com/dep/legacy v1.9.2\n\u2514---- Belirli bir mod\u00fcl s\u00fcr\u00fcm\u00fcn\u00fcn kullan\u0131lmas\u0131n\u0131 engelle\nreplace github.com/dep/one =&gt; github.com/fork/one\n\u2514---- github.com/dep/one paketini github.com/fork/one ile de\u011fi\u015ftir\n</code></pre> <p>Keza <code>go.mod</code> \u00fczerinde otomatik de\u011fi\u015fiklikler yapmak i\u00e7in a\u015fa\u011f\u0131daki komutlara bakal\u0131m:</p> <pre><code>$ go get -d github.com/path/to/module       # build ya da install etmeden sadece go.mod\u2019u g\u00fcncelle\n# ve paketi build etmek i\u00e7in gereken kodu \u00e7ek\n# (add/upgrade dependency)\n\n$ go get -d github.com/dep/two/v2@v2.1.0    # v2.1.0 i\u00e7in build ya da install etmeden sadece go.mod\u2019u g\u00fcncelle\n# ve paketi build etmek i\u00e7in gereken kodu \u00e7ek\n# (use specific version)\n\n$ go get -d github.com/dep/commit@branch    # verilen branch i\u00e7in build ya da install etmeden sadece go.mod\u2019u g\u00fcncelle\n# ve paketi build etmek i\u00e7in gereken kodu \u00e7ek\n# (use specific branch)\n\n$ go get -d -u ./...                        # t\u00fcm paketler i\u00e7in build ya da install etmeden sadece go.mod\u2019u g\u00fcncelle\n# ve paketi build etmek i\u00e7in gereken kodu \u00e7ek\n# (upgrade all!)\n\n$ go get -d github.com/dep/legacy@none      # @none ile bu pakete ba\u011f\u0131ml\u0131l\u0131\u011f\u0131 siliyoruz, go.mod\u2019dan da u\u00e7uyor\n# sonras\u0131nda `go mod tidy` laz\u0131m\n# (remove dependency)\n\n$ go mod tidy                               # go.mod ve go.sum\u2019\u0131 d\u00fczenler, temizler, eksikleri fazlal\u0131klar\u0131 d\u00fczenler ayarlar.\n\n$ go mod download                           # ba\u011f\u0131ml\u0131\u011f\u0131 module cache\u2019e atar.\n# t\u00fcm indirilenler, bilgisayar\u0131n\u0131zda `GOMODCACHE` neresiyse oraya kaydolur...\n\n$ ls -al $(go env GOMODCACHE)/github.com/vigo\ntotal 0\ndrwxr-xr-x  5 vigo staff  160 Nov 13 22:53 .\ndrwxr-xr-x 74 vigo staff 2.4K Nov 12 19:35 ..\ndr-xr-xr-x 14 vigo staff  448 Nov 10 20:09 lsvirtualenvs@v0.1.0\ndr-xr-xr-x 12 vigo staff  384 Nov 13 22:47 stringutils-demo@v0.0.0-20211113192943-449a20582367\ndr-xr-xr-x 12 vigo staff  384 Nov 13 22:53 stringutils-demo@v0.1.1\n\n$ go mod init github.com/path/to/module     # yeni mod\u00fcl ba\u015flat\n\n$ go mod why -m github.com/path/to/module   # verilen mod\u00fcl neden bir ba\u011f\u0131ml\u0131l\u0131k?\n\n$ cd /path/to/github.com/vigo/stringutils-demo/\n$ go mod why -m github.com/vigo/stringutils-demo\n# github.com/vigo/stringutils-demo\ngithub.com/vigo/golang102-custom-package-demo\ngithub.com/vigo/stringutils-demo\n\n$ go install github.com/path/to/bin@latest  # ilgili paketi hem \u00e7ek hem de varsa binary\u2019sini build edip\n# GOPATH\u2019in alt\u0131ndaki bin/\u2019e at\n$ ls -al $(go env GOPATH)/bin\n\n# go mod edit -replace SOURCE=TARGET\n$ go mod edit -replace github.com/pselle/bar=/Users/pselle/Projects/bar\n</code></pre>"},{"location":"17/02-go-modul-anotomisi/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://golang.org/doc/tutorial/create-module</li> <li>https://golang.org/doc/modules/managing-dependencies</li> <li>https://thewebivore.com/using-replace-in-go-mod-to-point-to-your-local-module/</li> </ul>"},{"location":"17/03-ornek-paket/","title":"B\u00f6l\u00fcm 17/03: Golang Paketi Geli\u015ftirmek","text":"<p>S\u0131k kulland\u0131\u011f\u0131m\u0131z yard\u0131mc\u0131 fonksiyonlar\u0131 bir k\u00fct\u00fcphane haline getirebiliriz. B\u00f6ylece ba\u015fka projelerde de bu paketten faydalanabiliriz. Reusable yani tekrar kullan\u0131labilir kod par\u00e7alar\u0131 olu\u015fturabiliriz.</p> <p>Paket asl\u0131nda bir dizin (folder). \u00d6rneklerde s\u0131k kulland\u0131\u011f\u0131m\u0131z <code>fmt</code> paketi. Hemen kaynak koda bakal\u0131m:</p> <pre><code>$ ls -al \"$(go env GOROOT)/src/fmt\"\ntotal 236K\ndrwxr-xr-x 16 vigo admin  512 Aug  4 23:14 .\ndrwxr-xr-x 73 vigo admin 2.3K Aug  4 23:14 ..\n-rw-r--r--  1 vigo admin  15K Aug  4 23:14 doc.go\n-rw-r--r--  1 vigo admin 1.7K Aug  4 23:14 errors.go\n-rw-r--r--  1 vigo admin 3.7K Aug  4 23:14 errors_test.go\n-rw-r--r--  1 vigo admin  12K Aug  4 23:14 example_test.go\n-rw-r--r--  1 vigo admin  219 Aug  4 23:14 export_test.go\n-rw-r--r--  1 vigo admin  59K Aug  4 23:14 fmt_test.go\n-rw-r--r--  1 vigo admin  14K Aug  4 23:14 format.go\n-rw-r--r--  1 vigo admin 1.6K Aug  4 23:14 gostringer_example_test.go\n-rw-r--r--  1 vigo admin  32K Aug  4 23:14 print.go\n-rw-r--r--  1 vigo admin  32K Aug  4 23:14 scan.go\n-rw-r--r--  1 vigo admin  40K Aug  4 23:14 scan_test.go\n-rw-r--r--  1 vigo admin 1.5K Aug  4 23:14 state_test.go\n-rw-r--r--  1 vigo admin  551 Aug  4 23:14 stringer_example_test.go\n-rw-r--r--  1 vigo admin 2.2K Aug  4 23:14 stringer_test.go\n</code></pre> <p><code>doc.go</code>\u2019ya bakal\u0131m:</p> <pre><code>$ cat \"$(go env GOROOT)/src/fmt/doc.go\"\n// Copyright 2009 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n/*\nPackage fmt implements formatted I/O with functions analogous\nto C's printf and scanf.  The format 'verbs' are derived from C's but\nare simpler.\n\n# Printing\n\nThe verbs:\n.\n.\n.\nNote: Fscan etc. can read one character (rune) past the input\nthey return, which means that a loop calling a scan routine\nmay skip some of the input.  This is usually a problem only\nwhen there is no space between input values.  If the reader\nprovided to Fscan implements ReadRune, that method will be used\nto read characters.  If the reader also implements UnreadRune,\nthat method will be used to save the character and successive\ncalls will not lose data.  To attach ReadRune and UnreadRune\nmethods to a reader without that capability, use\nbufio.NewReader.\n*/\npackage fmt\n</code></pre> <p>Kocaaaaman bir comment ve son sat\u0131rda paketin ad\u0131 <code>package fmt</code> yaz\u0131yor. Bu dizindeki t\u00fcm dosyalar\u0131n <code>package</code> deklarasyon k\u0131sm\u0131na baksak hepsinde de <code>package fmt</code> yazd\u0131\u011f\u0131n\u0131 g\u00f6r\u00fcr\u00fcz. Mant\u0131k \u015fu;</p> <pre><code>paket1/\npaket2/\npaket2.go\npaket1.go\n</code></pre> <p>Dikkat ettiyseniz <code>fmt</code> paketini <code>import</code> ederken;</p> <pre><code>import \"fmt\"\n</code></pre> <p>\u015feklinde kullan\u0131yoruz. yani;</p> <pre><code>import foo/bar/baz/go/1.21.0/libexec/src/fmt\n</code></pre> <p>gibi bir tan\u0131m yok, \u00e7\u00fcnk\u00fc <code>go</code> kurulunca otomatik olarak built-in paketlerin nereye kuruldu\u011funu biliyor;</p> <pre><code>$ go env GOROOT\n/opt/homebrew/Cellar/go/1.21.0/libexec\n</code></pre> <p>ve paketlerin da <code>src/</code> alt\u0131nda oldu\u011funu biliyor. Asl\u0131nda biz <code>import \"fmt\"</code> dedi\u011fimizde <code>go</code> otomatik olarak; <code>/opt/homebrew/Cellar/go/1.21.0/libexec/src/</code> de\u011ferini ekliyor.</p>"},{"location":"17/03-ornek-paket/#stringutils-paketi","title":"<code>stringutils</code> Paketi","text":"<p>Evet, bir pakete ihtiyac\u0131m\u0131z var. \u0130\u00e7inde <code>string</code>\u2019lerle ilgili k\u00fc\u00e7\u00fck k\u00fc\u00e7\u00fck fonksiyonlar olacak. <code>func Reverse(string)string</code> mesela. Bu paket i\u00e7in nas\u0131l isim verece\u011fiz?</p> <p>Paket ad\u0131n\u0131 d\u00fc\u015f\u00fcn\u00fcrken hep nas\u0131l import edece\u011fimi, paket i\u00e7inden fonksiyonlar\u0131 nas\u0131l \u00e7a\u011f\u0131raca\u011f\u0131m\u0131 d\u00fc\u015f\u00fcn\u00fcr\u00fcm. E\u011fer <code>python</code> ya da <code>ruby</code> kodu yaz\u0131yor olsak; <code>utils.py</code> ya da <code>helper.rb</code> ya da <code>common.py</code> gibi bir dosya yapar ge\u00e7erdik.</p> <p>Go\u2019da isimlendirme kurallar\u0131nda bahsetmi\u015ftik; </p> <ul> <li>Paketin amac\u0131na uygun bir isim olmal\u0131</li> <li>Olas\u0131 ba\u015fka paket adlar\u0131yla \u00e7ak\u0131\u015fmamal\u0131. Ben olsam <code>uuid</code> diye bir paket   yapmak durumunda kalsam, ayr\u0131\u015ft\u0131r\u0131c\u0131 bir isim d\u00fc\u015f\u00fcn\u00fcr\u00fcm: <code>simpleuuid</code> mesela...</li> <li>Paket ad\u0131 m\u00fcmk\u00fcnse tek kelime olsun.</li> </ul> <p>Dedik ya, <code>string</code>\u2019ler i\u00e7in k\u00fc\u00e7\u00fck yard\u0131mc\u0131 fonksiyonlar. Bu bak\u0131mdan ad\u0131na; <code>stringutils</code> diyorum ve bu paketi ben dahil herkes kullanabilsin diye GitHub\u2019a koymay\u0131 planl\u0131yorum:</p> <pre><code>$ cd /path/to/development/\n$ mkdir stringutils &amp;&amp; cd stringutils\n\n# go mod init github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/stringutils\n$ go mod init github.com/vigo/stringutils\ngo: creating new go.mod: module github.com/vigo/stringutils\n\n$ ls\ngo.mod\n\n$ cat go.mod \nmodule github.com/vigo/stringutils\n\ngo 1.21.0\n</code></pre> <p>Mod\u00fcl olarak initialize edilince, <code>go.mod</code> ad\u0131nda bir dosya olu\u015fur. Bu dosya i\u00e7inde; paketin ad\u0131 ve paketin ba\u011f\u0131ml\u0131l\u0131klar\u0131 yazar. Uygulamaya kat\u0131lacak her ba\u011f\u0131ml\u0131l\u0131k sonras\u0131, yani kod i\u00e7inde kulland\u0131\u011f\u0131n\u0131z her ilave paketin bu dosyada yer almas\u0131 i\u00e7in, paket kurulumundan sonra mutlaka  <code>go mod tidy</code> yapmak gerekiyor!.</p> <p>Otomatik olarak, paket ekleyip \u00e7\u0131kartt\u0131k\u00e7a <code>go.sum</code> dosyas\u0131 da g\u00fcncelleniyor. Bu dosyada geriye d\u00f6n\u00fck uyumluluk ad\u0131na, kurulan t\u00fcm paketlerin ve hatta o paketlerin de ba\u011f\u0131ml\u0131 oldu\u011fu paketlerin bir hash-checksum listesi duruyor.</p> <p>Baze bu <code>go.mod</code> ve <code>go.sum</code> dosyalar\u0131 can\u0131m\u0131z\u0131 s\u0131kabiliyor. Hatta bazen bu module summary olay\u0131n\u0131 komple kapat\u0131yoruz. <code>GONOSUMDB</code> environment variable\u2019\u0131 sayesinde;</p> <pre><code>GONOSUMDB=\"github.com/vigo\"\n</code></pre> <p>kurulan paketlerden ba\u015f\u0131 <code>github.com/vigo</code> ba\u015flayanlar\u0131n <code>go.sum</code> k\u0131sm\u0131n\u0131 i\u015fleme katma diyoruz.</p> <p>Bazen k\u00fct\u00fcphanelerimiz GitHub\u2019a koyar\u0131z ama repo sadece bize eri\u015filebilir olur, yani repo PRIVATE olur. Bu t\u00fcr durumlarda <code>GOPRIVATE</code> environment variable\u2019\u0131 ile build mekanizmalar\u0131n\u0131n private repo\u2019lara ula\u015fmalar\u0131n\u0131 da sa\u011fl\u0131yoruz;</p> <pre><code>$ GOPRIVATE=\"github.com/vbyazilim,*.vbyazilim,vigo.io/private\"\n</code></pre> <p>\u015feklinde birden fazla domain ve regex kullan\u0131m\u0131 ile bu ayarlamay\u0131 yap\u0131yoruz.</p> <p>Art\u0131k bu k\u00fct\u00fcphane birileri taraf\u0131ndan kod i\u00e7inde kullan\u0131laca\u011f\u0131 zaman <code>github.com/vigo/stringutils</code> \u00fczerinden fonksiyonlara ula\u015facaklar.</p> <p>\u015eimdi dosyalar\u0131 olu\u015ftural\u0131m:</p> <pre><code>$ touch stringutils.go stringutils_test.go\n</code></pre> <p>\u015eimdi <code>stringutils.go</code> i\u00e7in;</p> <pre><code>/*\nPackage stringutils implements basic string utility functions for demo\npurposes only!\n*/\npackage stringutils\n\n// Reverse reverses given string!\nfunc Reverse(s string) string {\nr := []rune(s)\nlr := len(r)\nss := make([]rune, lr)\n\nfor i := 0; i &lt; lr; i++ {\nss[lr-1-i] = r[i]\n}\n\nreturn string(ss)\n}\n</code></pre> <p>ve <code>stringutils_test.go</code> i\u00e7in;</p> <pre><code>package stringutils_test\n\nimport (\n\"fmt\"\n\"testing\"\n\n\"github.com/vigo/stringutils\"\n)\n\nfunc TestReverse(t *testing.T) {\ntcs := map[string]struct {\ninput []string\nwant  []string\n}{\n\"none Turkish letters\": {\ninput: []string{\"hello\", \"this is vigo\"},\nwant:  []string{\"olleh\", \"ogiv si siht\"},\n},\n\"with Turkish letters\": {\ninput: []string{\"u\u011fur\", \"k\u0131rm\u0131z\u0131 \u015fapka ve \u00d6\u011eRENC\u0130\"},\nwant:  []string{\"ru\u011fu\", \"\u0130CNER\u011e\u00d6 ev akpa\u015f \u0131z\u0131mr\u0131k\"},\n},\n\"with German letters\": {\ninput: []string{\"Pr\u00e4zisionsme\u00dfger\u00e4t\"},\nwant:  []string{\"t\u00e4reg\u00dfemsnoisiz\u00e4rP\"},\n},\n}\n\nfor name, tc := range tcs {\nt.Run(name, func(t *testing.T) {\nfor i, in := range tc.input {\ngot := stringutils.Reverse(in)\n\nif got != tc.want[i] {\nfmt.Println(len(got), len(tc.want[i]))\nt.Errorf(\"want: %v; got: %v\", tc.want[i], got)\n}\n}\n})\n}\n}\n\nvar gs string\n\nfunc BenchmarkReverse(b *testing.B) {\nvar s string\nb.ResetTimer()\nfor i := 0; i &lt; b.N; i++ {\ns = stringutils.Reverse(\"merhaba d\u00fcnya!\")\n}\n\ngs = s\n}\n\nfunc ExampleReverse() {\nfmt.Println(stringutils.Reverse(\"vigo\"))\n// Output: ogiv\n}\n</code></pre> <p>Hemen testleri \u00e7al\u0131\u015ft\u0131ral\u0131m:</p> <pre><code>$ go test -v # ./... ya da paket ad\u0131 vermedik!\n=== RUN   TestReverse\n=== RUN   TestReverse/none_Turkish_letters\n=== RUN   TestReverse/with_Turkish_letters\n=== RUN   TestReverse/with_German_letters\n--- PASS: TestReverse (0.00s)\n--- PASS: TestReverse/none_Turkish_letters (0.00s)\n--- PASS: TestReverse/with_Turkish_letters (0.00s)\n--- PASS: TestReverse/with_German_letters (0.00s)\n=== RUN   ExampleReverse\n--- PASS: ExampleReverse (0.00s)\nPASS\nok      github.com/vigo/stringutils 0.911s\n</code></pre> <p>Paket art\u0131k da\u011f\u0131t\u0131ma haz\u0131r?</p>"},{"location":"17/04-paketi-dagitmak/","title":"B\u00f6l\u00fcm 17/04: Golang Paketi Geli\u015ftirmek","text":""},{"location":"17/04-paketi-dagitmak/#paketi-dagtmak-paylasmak","title":"Paketi Da\u011f\u0131tmak / Payla\u015fmak","text":"<p>\u015eimdi paketi GitHub\u2019a g\u00f6ndermeden \u00f6nce a\u00e7\u0131k kaynak projelerin olmazsa olmazlar\u0131n\u0131 ekleyelim, hemen \u00f6rnek projeden gereken dosyalar\u0131 alal\u0131m:</p> <ul> <li><code>README.md</code></li> <li><code>LICENSE</code></li> <li><code>CODE_OF_CONDUCT.md</code></li> </ul>"},{"location":"17/04-paketi-dagitmak/#readmemd","title":"<code>README.md</code>","text":"<p>\u0130yi bir <code>README</code> dosyas\u0131nda;</p> <ul> <li>Projenin ad\u0131 ve k\u0131sa tan\u0131m\u0131 bulunmal\u0131</li> <li>Nas\u0131l kurulumu yap\u0131l\u0131r?</li> <li>Nas\u0131l kullan\u0131l\u0131r? \u00d6rnek kod par\u00e7alar\u0131</li> <li>\u0130lave komutlar (Makefile, Rakefile) varsa a\u00e7\u0131klamas\u0131</li> <li>Katk\u0131 sa\u011flayanlar\u0131n listesi</li> <li>Nas\u0131l katk\u0131 yap\u0131laca\u011f\u0131 bilgisi</li> <li>Lisans</li> <li><code>CODE_OF_CONDUCT</code> yani Katk\u0131c\u0131 Ahdi Topluluk S\u00f6zle\u015fmesi</li> </ul> <p>olsa tad\u0131ndan yenmez.</p> <p>Ek olarak bu bir go projesi oldu\u011fu i\u00e7in, GitHub action\u2019lar\u0131 kullanarak, linter/checker ve build i\u015flemlerini otomatize edebiliriz. img.shields.io kullanarak README dosyas\u0131na badge\u2019ler (version, ci/cd bilgileri gibi...) ekleyebiliriz.</p> <p>T\u00fcm bu i\u015flemleri yapt\u0131ktan sonra projemizin GitHub linkini internet ortam\u0131nda yayabiliriz. Repo\u2019muz public yani herkese a\u00e7\u0131k oldu\u011fu i\u00e7in <code>go get</code> ile kolayca kurulup kullan\u0131labilir durumda.</p> <p>E\u011fer repo private olsayd\u0131, sadece repo\u2019ya eri\u015febilenler <code>go get</code> yapabilecekti.</p>"},{"location":"18/01-http-paketi/","title":"B\u00f6l\u00fcm 18/01: In-Memory Key-Value Store","text":"<p>Basit bir rest-api geli\u015ftirece\u011fiz. K\u00fc\u00e7\u00fck ve basit bir REDIS klonu. Klon ama \u00e7ok primitif bir klon. Key/Value \u00e7iftlerini haf\u0131zada tutan, listeleme, ekleme, silme, okuma ve g\u00fcncelleme yani <code>CRUDL</code> (Create, Read, Update, Delete, List) operasyonlar\u0131 yapabilece\u011fimiz bir servis. Di\u011fer bir amac\u0131m\u0131z da hi\u00e7bir ek paket kullanmadan, go ile gelen paketleri kullanarak bu servisi geli\u015ftirmek.</p> <p>Nelere ihtiyac\u0131m\u0131z var;</p> <ul> <li>HTTP Server</li> <li>Storage (haf\u0131zada tutaca\u011f\u0131m\u0131z map)</li> </ul>"},{"location":"18/01-http-paketi/#http-server","title":"HTTP Server","text":"<p>Go, standart k\u00fct\u00fcphanesine production grade yani canl\u0131 ortamda g\u00f6n\u00fcl rahatl\u0131\u011f\u0131yla kullanabilece\u011fimiz http sunucuyla birlikte geliyor. Hatta sadece sunucu de\u011fil istemcisi de var (http client). T\u00fcm bu \u00f6zellikler <code>net/http</code> paketi i\u00e7inde.</p> <p><code>net/http</code> bize neler sa\u011flar?</p> <ul> <li>Web uygulamalar\u0131 yapabiliriz</li> <li>Statik dosya sunucusu olarak kullanabiliriz</li> <li>Routing</li> <li>Cookie y\u00f6netimi yapabiliriz</li> </ul> <p>Keza pek \u00e7ok pop\u00fcler web frameworkleri de altta bu paketi kullan\u0131r:</p> <ul> <li>https://github.com/go-chi/chi</li> <li>https://github.com/valyala/fasthttp</li> <li>https://github.com/labstack/echo</li> <li>https://github.com/gofiber/fiber</li> <li>https://github.com/gin-gonic/gin</li> <li>https://github.com/go-kratos/kratos (microservice)</li> <li>https://github.com/go-kit/kit (microservice)</li> </ul> <p><code>godoc</code>\u2019ta:</p> <ul> <li>https://pkg.go.dev/net/http@go1.21.0 (http)</li> <li>https://pkg.go.dev/net/http@go1.21.0#hdr-Servers (server)</li> </ul> <p>Bizim ilgilendi\u011fimiz k\u0131s\u0131m Server type:</p> <pre><code>type Server struct {\n// Addr optionally specifies the TCP address for the server to listen on,\n// in the form \"host:port\". If empty, \":http\" (port 80) is used.\n// The service names are defined in RFC 6335 and assigned by IANA.\n// See net.Dial for details of the address format.\nAddr string\n\nHandler Handler // handler to invoke, http.DefaultServeMux if nil\n\n// others\n}\n</code></pre> <p><code>Handler</code> field\u2019\u0131, <code>Handler</code> tipinde; Peki nedir bu?</p> <pre><code>type Handler interface {\nServeHTTP(ResponseWriter, *Request)\n}\n</code></pre> <p>Evet, bu bir <code>interface</code>. Herhangi bir tipin <code>(ResponseWriter, *Request)</code> alan bir fonksiyonu olursa o art\u0131k bir HTTP handler oluyor.</p> <p>HTTP Handler ne yapar? istemcinin sunucudan yapt\u0131\u011f\u0131 istekleri yakalayan ve geriye cevap d\u00f6nen (byte cinsinden) \u015feydir.</p> <p>Soru: <code>ServeHTTP</code> neden <code>*Request</code> (pointer) al\u0131rken <code>ResponseWriter</code>\u2019\u0131 (value) olarak al\u0131yor? ResponseWriter dok\u00fcman\u0131.</p> <p>\u00d6zetle; bizim \u015f\u00f6yle bir tipimiz olsa;</p> <pre><code>type foo struct {}\nfunc (foo)ServeHTTP(http.ResponseWriter, *http.Request){\n}\n</code></pre> <p>art\u0131k <code>foo</code> bir HTTP Handler olarak kullan\u0131labilir.</p> <p>\u00f6rnek</p> <p>https://go.dev/play/p/8dMERh1XZvg</p> <pre><code>$ go run src/18/basic-http-server/main.go\n</code></pre> <p>sonra taray\u0131c\u0131y\u0131 a\u00e7\u0131p;</p> <ul> <li>http://127.0.0.1:9090/foo</li> <li>http://127.0.0.1:9090/bar</li> </ul> <p>tebrikler, art\u0131k bir web sunucunuz var!</p> <p>Biz, servisimizi geli\u015ftirirken biraz daha geli\u015fmi\u015f \u00f6zellikleri olan <code>http.Server</code>\u2019\u0131 kullanaca\u011f\u0131z. Bizim bir k\u0131s\u0131m endpoint\u2019leri yakalamam\u0131z gerekiyor. Bunun i\u00e7in request multiplexer\u2019a ihtiyac\u0131m\u0131z var.</p> <p>Hemen godoc\u2019tan bir \u00f6rne\u011fe bakal\u0131m:</p> <p>\u00f6rnek</p> <p>https://go.dev/play/p/T38GlxCvEpL</p> <pre><code>$ go run src/18/basic-mux/main.go\n</code></pre> <p>sonra taray\u0131c\u0131y\u0131 a\u00e7\u0131p:</p> <ul> <li>http://127.0.0.1:9090/</li> <li>http://127.0.0.1:9090/api/</li> </ul> <p><code>http.Server</code> kulland\u0131\u011f\u0131m\u0131z zaman;</p> <pre><code>http.Server{\nAddr:         \":8000\",\nHandler:      mux,\nReadTimeout:  ServerReadTimeout,\nWriteTimeout: ServerWriteTimeout,\nIdleTimeout:  ServerIdleTimeout,\n}\n</code></pre> <p>gibi ek parametrelerde kullanabiliyoruz.</p>"},{"location":"18/02-ddd-basics/","title":"B\u00f6l\u00fcm 18/02: In-Memory Key-Value Store","text":""},{"location":"18/02-ddd-basics/#domain-driven-design-ddd","title":"Domain Driven Design (DDD)","text":"<p>Domain Driven Design (DDD), yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecinde karma\u015f\u0131k i\u015f domain\u2019lerini anlamak ve bu domain\u2019leri daha iyi modellemek i\u00e7in kullan\u0131lan bir yakla\u015f\u0131m\u0131 ifade eder. </p> <p>DDD, i\u015f d\u00fcnyas\u0131n\u0131n gereksinimlerini, kullan\u0131c\u0131lar\u0131n ihtiya\u00e7lar\u0131n\u0131 ve yaz\u0131l\u0131m\u0131n tasar\u0131m\u0131n\u0131 bir araya getirerek daha iyi bir anlay\u0131\u015f ve etkili bir kod olu\u015fturmay\u0131 ama\u00e7lar. \u0130\u015fte Domain Driven Design\u2019\u0131n temel kavramlar\u0131 ve ana prensipleri:</p>"},{"location":"18/02-ddd-basics/#domain","title":"Domain","text":"<p>\u0130\u015finizin odakland\u0131\u011f\u0131 konu veya i\u015f kolu. DDD\u2019de, bu domain\u2019i anlamak ve modellemek temel ama\u00e7t\u0131r.</p>"},{"location":"18/02-ddd-basics/#model","title":"Model","text":"<p>DDD, ger\u00e7ek d\u00fcnyadaki nesneleri ve ili\u015fkileri yaz\u0131l\u0131m nesnelerine d\u00f6n\u00fc\u015ft\u00fcrmeyi i\u00e7erir. Bu, karma\u015f\u0131k i\u015f domain\u2019lerini daha iyi anlamak ve y\u00f6netmek i\u00e7in kullan\u0131l\u0131r. Veritaban\u0131ndaki tablo\u2019nun kar\u015f\u0131l\u0131\u011f\u0131 gibi d\u00fc\u015f\u00fcn\u00fclebilir.</p>"},{"location":"18/02-ddd-basics/#servis","title":"Servis","text":"<p>DDD\u2019de, baz\u0131 i\u015flemler modele ait olmayabilir. Bu durumlarda servisler kullan\u0131l\u0131r. \u00d6rne\u011fin, bir \u00f6deme i\u015flemi bir servis taraf\u0131ndan y\u00f6netilebilir.</p>"},{"location":"18/02-ddd-basics/#repository-storage","title":"Repository (Storage)","text":"<p>Veritaban\u0131 ile etkile\u015fimde bulunan bir bile\u015fen. Repository, veritaban\u0131 i\u015flemlerini y\u00f6netir ve s\u0131n\u0131f nesnelerini saklar.</p> <p>Bizim uygulamam\u0131zda ise; gelen http iste\u011fi s\u0131ras\u0131yla;</p> <ol> <li>HTTP Handler Katman\u0131: gelen iste\u011fi al\u0131p, validate edecek.</li> <li>Servis Katman\u0131: Yapaca\u011f\u0131 i\u015fe g\u00f6re ilgili servisi, istekten ald\u0131\u011f\u0131 verileri kullanarak \u00e7a\u011f\u0131racak.</li> <li>Storage Katman\u0131: Servis, ilgili storage\u2019lar\u0131 kullanarak veritaban\u0131 ile konu\u015facak</li> </ol> <p>sonra; yine s\u0131ras\u0131yla geri d\u00f6n\u00fc\u015f ba\u015flayacak;</p> <ol> <li>Storage -&gt; Servis</li> <li>Servis -&gt; HTTP Handler</li> <li>HTTP Hander -&gt; \u0130ste\u011fi atan istemci (client)</li> </ol> <p>Her zaman, HTTP handler input\u2019u alacak, kontrollerini yapacak, gerekti\u011fi gibi gelmi\u015f mi diye. Sonra g\u00f6revi burada bitip, ilgili servisi \u00e7a\u011f\u0131racak. Servis esas yap\u0131lacak i\u015ften sorumlu. E\u011fer veritaban\u0131 ile i\u015fi varsa Storage ile ileti\u015fim kuracak. Her \u015fey yolunda giderse, Storage\u2019dan ald\u0131klar\u0131n\u0131 HTTP handler\u2019a iletecek. HTTP handler yine her \u015fey yolunda giderse client\u2019a cevap (response) d\u00f6necek ve ak\u0131\u015f tamamlanm\u0131\u015f olacak.</p>"},{"location":"18/02-ddd-basics/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://programmingpercy.tech/blog/how-to-domain-driven-design-ddd-golang/</li> <li>https://dev.to/stevensunflash/using-domain-driven-design-ddd-in-golang-3ee5</li> <li>https://medium.com/@gsigety/domain-driven-design-golang-kata-1-d76d01459806</li> </ul>"},{"location":"18/03-development/","title":"B\u00f6l\u00fcm 18/03: In-Memory Key-Value Store","text":""},{"location":"18/03-development/#development","title":"Development","text":"<p>Di\u011fer pek \u00e7ok framework\u2019\u00fcn belli bir yo\u011furt yeme tarz\u0131 olur. Python\u2019cular\u0131n \u00e7ok sevdi\u011fi Django, Ruby\u2019cilerin Ruby on Rails, PHP\u2019cilerin Laravel, Node\u2019cular\u0131n Express gibi sizin ad\u0131n\u0131za pek \u00e7ok sorunu \u00e7\u00f6zd\u00fckleri harika framework\u2019leri var. \u0130\u00e7inde bir \u00e7ok fonksiyon ve mant\u0131k bar\u0131nd\u0131ran devasa kod y\u0131\u011f\u0131nlar\u0131.</p> <p>Go\u2019da bu t\u00fcr u\u00e7tan-uca her derde deva bir framework ne yaz\u0131k ki yok. E\u011fer http server ihtiyac\u0131m\u0131z varsa, sadece http katman\u0131n\u0131 \u00e7\u00f6zen, sadece veritaban\u0131 katman\u0131n\u0131 \u00e7\u00f6zen, ayn\u0131 lego par\u00e7alar\u0131 gibi ayr\u0131-ayr\u0131 k\u00fct\u00fcphaneler bulunur. Bunlar\u0131 birbirine ba\u011flamak da geli\u015ftirciye kal\u0131r :)</p> <p>Dolay\u0131s\u0131yla, go i\u00e7in en fazla best practice\u2019ler (en iyi pratikler) s\u00f6z konusudur. GitHub\u2019ta pek \u00e7ok \"go application / project structre\" gibi repo\u2019lar bulmak m\u00fcmk\u00fcn.</p> <p>Genelde ben, go\u2019nun kaynak kodunu referans al\u0131yorum, acaba go\u2019yu icad edenler ne t\u00fcr bir yakla\u015f\u0131m i\u00e7ine girmi\u015fler, neler uygulam\u0131\u015flar hep bunlara bak\u0131yorum.</p> <p>Bu ba\u011flamda proje yap\u0131m\u0131z:</p> <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n\u251c\u2500\u2500 apiserver\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apiserver.go\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 middlewares.go\n\u251c\u2500\u2500 internal\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 service\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kvstoreservice\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 storage\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 memory\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 transport\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 http\n\u2514\u2500\u2500 releaseinfo\n</code></pre> <p>\u015feklinde. <code>src/internal/</code> dizini alt\u0131nda;</p> <ol> <li><code>storage/</code></li> <li><code>service/</code></li> <li><code>transport/http</code></li> </ol> <p>paket tan\u0131mlar\u0131m\u0131z\u0131 yap\u0131yoruz. Neden <code>internal/</code> kullan\u0131yoruz, e\u011fer bu projeyi herhangi bir kullan\u0131c\u0131 <code>go get</code> ile sanki bir k\u00fct\u00fcphaneymi\u015f gibi projesine eklerse, <code>internal/</code> alt\u0131ndaki hi\u00e7bir pakete eri\u015fimi olamayacak! \u015eu an sadece;</p> <ul> <li><code>src/apiserver</code></li> <li><code>src/releaseinfo</code></li> </ul> <p>Paketleri exportable yani <code>import</code> edilebilir durumda. Esas uygulaman\u0131n \u00e7al\u0131\u015faca\u011f\u0131 yer <code>cmd/server/</code> alt\u0131ndaki <code>main.go</code> dosyas\u0131 olacak. Server ile ilgili tan\u0131mlamalar\u0131 <code>apiserver/</code> alt\u0131nda yapaca\u011f\u0131z. \u00d6zel bir <code>error</code> tipimiz var: <code>kverror</code>.</p> <p><code>storage/memory/</code> kullanaca\u011f\u0131m\u0131z in-memory storage davran\u0131\u015f\u0131 ve i\u015fi yapan fonksiyonlar burada olacak. Yar\u0131n \"art\u0131k veritaban\u0131 kullanan\u0131m\" dersek; <code>storage/postgresql/</code> alt\u0131na gereken davran\u0131\u015flar\u0131 ve fonksiyonlar\u0131 tan\u0131mlayabiliriz.</p> <p>Keza, ayn\u0131 \u015fekilde, yar\u0131n sadece <code>http</code> protokol\u00fc yerine <code>rpc</code> ya da <code>grpc</code> sunmak istersek: <code>transport/rpc/</code> ya da <code>transport/grpc/</code> gibi ilerleyebiliriz.</p>"},{"location":"18/03-development/#go-mod-init","title":"go mod init","text":"<p>\u015eimdi geli\u015ftirme yapaca\u011f\u0131m\u0131z dizine gidip projeyi ba\u015flatal\u0131m:</p> <pre><code>$ cd /path/to/development/\n$ mkdir kvstore\n$ cd kvstore/\n$ git init\n$ git commit --allow-empty -m '[root] add initial commit'\n</code></pre> <p>\u015eimdi https://gitignore.io sitesinden projemiz i\u00e7in gereken <code>.gitignore</code> dosyas\u0131n\u0131 al\u0131yoruz ve projenin ana dizininde (root) <code>touch .gitignore</code> yaparak i\u00e7ine paste ediyoruz;</p> <pre><code>$ git add .\n$ git commit -m 'add gitignore file'\n</code></pre> <p>\u015eimdi go mod\u00fcl\u00fcm\u00fcz\u00fc olu\u015ftural\u0131m;</p> <pre><code>$ go mod init github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore\n$ git add .\n$ git commit -m 'add go.mod file'\n</code></pre> <p>\u0130lk olarak storage katman\u0131ndan ba\u015fl\u0131yoruz;</p> <pre><code>$ mkdir -p src/internal/storage/memory/kvstorage\n$ tree .\n.\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 internal\n        \u2514\u2500\u2500 storage\n            \u2514\u2500\u2500 memory\n                \u2514\u2500\u2500 kvstorage   &lt;--- paket ad\u0131\n</code></pre> <p>\u015eimdi storage ile ilgili tan\u0131mlar\u0131 yapmak i\u00e7in;</p> <pre><code>$ touch src/internal/storage/memory/kvstorage/base.go\n</code></pre> <p>\u015eimdi projeyi kod edit\u00f6r\u00fcnde a\u00e7al\u0131m ve <code>src/internal/storage/memory/kvstorage/base.go</code> dosyas\u0131na \u015funu yazal\u0131m ve kaydedelim:</p> <pre><code>package kvstorage\n</code></pre> <p>Go koduna ba\u015flad\u0131k, hemen linter konfig\u00fcrasyon dosyam\u0131z\u0131 root dizine atal\u0131m, sonra <code>base.go</code> dosyas\u0131n\u0131 a\u015fa\u011f\u0131daki gibi d\u00fczenleyelim;</p> <pre><code>package kvstorage\n\nimport (\n\"sync\"\n)\n\nvar _ Storer = (*memoryStorage)(nil) // compile time proof\n\n// MemoryDB is a custom type definition uses map[string]any for in memory-db type.\ntype MemoryDB map[string]any\n\n// Storer defines storage behaviours.\ntype Storer interface {\nSet(key string, value any) (any, error)\nGet(key string) (any, error)\nUpdate(key string, value any) (any, error)\nDelete(key string) error\nList() MemoryDB\n}\n\ntype memoryStorage struct {\nmu sync.RWMutex // guarding db only\ndb MemoryDB\n}\n\n// StorageOption represents storage option type.\ntype StorageOption func(*memoryStorage)\n\n// WithMemoryDB sets db option.\nfunc WithMemoryDB(db MemoryDB) StorageOption {\nreturn func(s *memoryStorage) {\ns.db = db\n}\n}\n\n// New instantiates new storage instance.\nfunc New(options ...StorageOption) Storer {\nms := &amp;memoryStorage{}\n\nfor _, o := range options {\no(ms)\n}\n\nreturn ms\n}\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'start storage implementation'\n</code></pre> <p>\u015eimdi t\u00fcm metotlar\u0131 implemente edelim:</p> <pre><code>$ touch src/internal/storage/memory/kvstorage/{delete,get,list,set,update}.go\n$ tree .\n.\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 internal\n        \u2514\u2500\u2500 storage\n            \u2514\u2500\u2500 memory\n                \u2514\u2500\u2500 kvstorage\n                    \u251c\u2500\u2500 base.go\n                    \u251c\u2500\u2500 delete.go\n                    \u251c\u2500\u2500 get.go\n                    \u251c\u2500\u2500 list.go\n                    \u251c\u2500\u2500 set.go\n                    \u2514\u2500\u2500 update.go\n</code></pre> <p>\u015eimdi bize \u00f6zel error tipimizi olu\u015ftural\u0131m;</p> <pre><code>$ mkdir -p src/internal/kverror\n$ touch src/internal/kverror/kverror.go\n</code></pre> <p><code>src/internal/kverror/kverror.go</code></p> <pre><code>package kverror\n\nvar (\n_ error   = (*Error)(nil) // compile time proof\n_ KVError = (*Error)(nil) // compile time proof\n)\n\n// sentinel errors.\nvar (\nErrKeyExists   = New(\"key exist\", true)\nErrKeyNotFound = New(\"key not found\", false)\nErrUnknown     = New(\"unknown error\", true)\n)\n\n// KVError defines custom error behaviours.\ntype KVError interface {\nWrap(err error) KVError\nUnwrap() error\nAddData(any) KVError\nDestoryData() KVError\nError() string\n}\n\n// Error is a custom type definition uses struct, custom error.\ntype Error struct {\nErr      error\nMessage  string\nData     any `json:\"-\"`\nLoggable bool\n}\n\n// AddData adds extra data to error.\nfunc (e *Error) AddData(data any) KVError {\ne.Data = data\nreturn e\n}\n\n// Unwrap unwraps error.\nfunc (e *Error) Unwrap() error {\nreturn e.Err\n}\n\n// DestoryData removes added data from error.\nfunc (e *Error) DestoryData() KVError {\ne.Data = nil\nreturn e\n}\n\n// Wrap wraps given error.\nfunc (e *Error) Wrap(err error) KVError {\ne.Err = err\nreturn e\n}\n\nfunc (e *Error) Error() string {\nif e.Err != nil {\nreturn e.Err.Error() + \", \" + e.Message\n}\nreturn e.Message\n}\n\n// New instantiates new Error instance.\nfunc New(m string, l bool) KVError {\nreturn &amp;Error{\nMessage:  m,\nLoggable: l,\n}\n}\n</code></pre> <p>sonra;</p> <pre><code>$ git add src/internal/kverror/kverror.go\n$ git commit -m 'implement custom error type'\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/delete.go</code></p> <pre><code>package kvstorage\n\nfunc (ms *memoryStorage) Delete(key string) error {\nif _, err := ms.Get(key); err != nil { // can not delete! key doesn't exist\nreturn err\n}\n\nms.mu.Lock()\ndefer ms.mu.Unlock()\n\ndelete(ms.db, key)\nreturn nil\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/get.go</code></p> <pre><code>package kvstorage\n\nimport (\n\"fmt\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n)\n\nfunc (ms *memoryStorage) Get(key string) (any, error) {\nms.mu.RLock()\ndefer ms.mu.RUnlock()\n\nvalue, ok := ms.db[key]\nif !ok {\nreturn nil, fmt.Errorf(\"%w\", kverror.ErrKeyNotFound.AddData(\"'\"+key+\"' does not exist\"))\n}\nreturn value, nil\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/list.go</code></p> <pre><code>package kvstorage\n\nfunc (ms *memoryStorage) List() MemoryDB {\nms.mu.RLock()\ndefer ms.mu.RUnlock()\nreturn ms.db\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/set.go</code></p> <pre><code>package kvstorage\n\nimport (\n\"fmt\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n)\n\nfunc (ms *memoryStorage) Set(key string, value any) (any, error) {\nif _, err := ms.Get(key); err == nil {\nreturn nil, fmt.Errorf(\"%w\", kverror.ErrKeyExists.AddData(\"'\"+key+\"' already exist\"))\n}\n\nms.mu.Lock()\ndefer ms.mu.Unlock()\n\nms.db[key] = value\nreturn value, nil\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/update.go</code></p> <pre><code>package kvstorage\n\nfunc (ms *memoryStorage) Update(key string, value any) (any, error) {\nif _, err := ms.Get(key); err != nil { // can not update! key doesn't exist\nreturn nil, err\n}\n\nms.mu.Lock()\ndefer ms.mu.Unlock()\n\nms.db[key] = value\nreturn value, nil\n}\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'implement memory storage'\n</code></pre> <p>Nedir son durum ?</p> <pre><code>$ tree .\n.\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 internal\n        \u251c\u2500\u2500 kverror\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 kverror.go\n        \u2514\u2500\u2500 storage\n            \u2514\u2500\u2500 memory\n                \u2514\u2500\u2500 kvstorage\n                    \u251c\u2500\u2500 base.go\n                    \u251c\u2500\u2500 delete.go\n                    \u251c\u2500\u2500 get.go\n                    \u251c\u2500\u2500 list.go\n                    \u251c\u2500\u2500 set.go\n                    \u2514\u2500\u2500 update.go\n</code></pre>"},{"location":"18/03-development/#service-layer","title":"Service Layer","text":"<pre><code>$ mkdir -p src/internal/service/kvstoreservice\n$ touch src/internal/service/kvstoreservice/base.go\n</code></pre> <p><code>src/internal/service/kvstoreservice/base.go</code></p> <pre><code>package kvstoreservice\n\nimport (\n\"context\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n)\n\nvar _ KVStoreService = (*kvStoreService)(nil) // compile time proof\n\n// KVStoreService defines service behaviours.\ntype KVStoreService interface {\nSet(context.Context, *SetRequest) (*ItemResponse, error)\nGet(context.Context, string) (*ItemResponse, error)\nUpdate(context.Context, *UpdateRequest) (*ItemResponse, error)\nDelete(context.Context, string) error\nList(context.Context) (*ListResponse, error)\n}\n\ntype kvStoreService struct {\nstorage kvstorage.Storer\n}\n\n// ServiceOption represents service option type.\ntype ServiceOption func(*kvStoreService)\n\n// WithStorage sets storage option.\nfunc WithStorage(strg kvstorage.Storer) ServiceOption {\nreturn func(s *kvStoreService) {\ns.storage = strg\n}\n}\n\n// New instantiates new service instance.\nfunc New(options ...ServiceOption) KVStoreService {\nkvs := &amp;kvStoreService{}\n\nfor _, o := range options {\no(kvs)\n}\n\nreturn kvs\n}\n</code></pre> <p>sonra;</p> <pre><code>$ touch src/internal/service/kvstoreservice/{delete,get,list,requests,responses,set,update}.go\n$ tree .\n.\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 internal\n        \u251c\u2500\u2500 kverror\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 kverror.go\n        \u251c\u2500\u2500 service\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 kvstoreservice\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 base.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 get.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 list.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 requests.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 responses.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 set.go\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 update.go\n        \u2514\u2500\u2500 storage\n            \u2514\u2500\u2500 memory\n                \u2514\u2500\u2500 kvstorage\n                    \u251c\u2500\u2500 base.go\n                    \u251c\u2500\u2500 delete.go\n                    \u251c\u2500\u2500 get.go\n                    \u251c\u2500\u2500 list.go\n                    \u251c\u2500\u2500 set.go\n                    \u2514\u2500\u2500 update.go\n</code></pre> <p><code>src/internal/service/kvstoreservice/delete.go</code></p> <pre><code>package kvstoreservice\n\nimport (\n\"context\"\n\"fmt\"\n)\n\nfunc (s *kvStoreService) Delete(ctx context.Context, key string) error {\nselect {\ncase &lt;-ctx.Done():\nreturn ctx.Err()\ndefault:\nif err := s.storage.Delete(key); err != nil {\nreturn fmt.Errorf(\"kvstoreservice.Set storage.Delete err: %w\", err)\n}\nreturn nil\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/get.go</code></p> <pre><code>package kvstoreservice\n\nimport (\n\"context\"\n\"fmt\"\n)\n\nfunc (s *kvStoreService) Get(ctx context.Context, key string) (*ItemResponse, error) {\nselect {\ncase &lt;-ctx.Done():\nreturn nil, ctx.Err()\ndefault:\nvalue, err := s.storage.Get(key)\nif err != nil {\nreturn nil, fmt.Errorf(\"kvstoreservice.Set storage.Get err: %w\", err)\n}\nreturn &amp;ItemResponse{\nKey:   key,\nValue: value,\n}, nil\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/list.go</code></p> <pre><code>package kvstoreservice\n\nimport (\n\"context\"\n)\n\nfunc (s *kvStoreService) List(ctx context.Context) (*ListResponse, error) {\nselect {\ncase &lt;-ctx.Done():\nreturn nil, ctx.Err()\ndefault:\nitems := s.storage.List()\nresponse := make(ListResponse, len(items))\n\nvar i int\nfor k, v := range items {\nresponse[i] = ItemResponse{\nKey:   k,\nValue: v,\n}\ni++\n}\nreturn &amp;response, nil\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/requests.go</code></p> <pre><code>package kvstoreservice\n\n// SetRequest is an input payload for Set behaviour.\ntype SetRequest struct {\nKey   string\nValue any\n}\n\n// UpdateRequest is an input payload for Update behaviour.\ntype UpdateRequest struct {\nKey   string\nValue any\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/responses.go</code></p> <pre><code>package kvstoreservice\n\n// ItemResponse represents common k/v response element.\ntype ItemResponse struct {\nKey   string\nValue any\n}\n\n// ListResponse is a collection on ItemResponse.\ntype ListResponse []ItemResponse\n</code></pre> <p><code>src/internal/service/kvstoreservice/set.go</code></p> <pre><code>package kvstoreservice\n\nimport (\n\"context\"\n\"fmt\"\n)\n\nfunc (s *kvStoreService) Set(ctx context.Context, sr *SetRequest) (*ItemResponse, error) {\nselect {\ncase &lt;-ctx.Done():\nreturn nil, ctx.Err()\ndefault:\nif _, err := s.storage.Set(sr.Key, sr.Value); err != nil {\nreturn nil, fmt.Errorf(\"kvstoreservice.Set storage.Set err: %w\", err)\n}\n\nreturn &amp;ItemResponse{\nKey:   sr.Key,\nValue: sr.Value,\n}, nil\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/update.go</code></p> <pre><code>package kvstoreservice\n\nimport (\n\"context\"\n\"fmt\"\n)\n\nfunc (s *kvStoreService) Update(ctx context.Context, sr *UpdateRequest) (*ItemResponse, error) {\nselect {\ncase &lt;-ctx.Done():\nreturn nil, ctx.Err()\ndefault:\nvalue, err := s.storage.Update(sr.Key, sr.Value)\nif err != nil {\nreturn nil, fmt.Errorf(\"kvstoreservice.Set storage.Update err: %w\", err)\n}\nreturn &amp;ItemResponse{\nKey:   sr.Key,\nValue: value,\n}, nil\n}\n}\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'implement service layer'\n</code></pre>"},{"location":"18/03-development/#http-handler-layer","title":"HTTP Handler Layer","text":"<pre><code>$ mkdir -p src/internal/transport/http/{basehttp,kvstore}handler\n$ touch src/internal/transport/http/basehttphandler/basehttphandler.go\n$ touch src/internal/transport/http/kvstorehandler/base.go\n\n$ tree .\n.\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 internal\n        \u251c\u2500\u2500 kverror\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 kverror.go\n        \u251c\u2500\u2500 service\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 kvstoreservice\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 base.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 get.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 list.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 requests.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 responses.go\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 set.go\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 update.go\n        \u251c\u2500\u2500 storage\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 memory\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 kvstorage\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 base.go\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete.go\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 get.go\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 list.go\n        \u2502\u00a0\u00a0         \u251c\u2500\u2500 set.go\n        \u2502\u00a0\u00a0         \u2514\u2500\u2500 update.go\n        \u2514\u2500\u2500 transport\n            \u2514\u2500\u2500 http\n                \u251c\u2500\u2500 basehttphandler\n                \u2502\u00a0\u00a0 \u2514\u2500\u2500 basehttphandler.go\n                \u2514\u2500\u2500 kvstorehandler\n                    \u251c\u2500\u2500 base.go\n                    \u251c\u2500\u2500 delete.go\n                    \u251c\u2500\u2500 get.go\n                    \u251c\u2500\u2500 list.go\n                    \u251c\u2500\u2500 set.go\n                    \u2514\u2500\u2500 update.go\n</code></pre> <p><code>src/internal/transport/http/basehttphandler/basehttphandler.go</code></p> <pre><code>package basehttphandler\n\nimport (\n\"encoding/json\"\n\"log/slog\"\n\"net/http\"\n\"time\"\n)\n\n// Handler respresents common http handler functionality.\ntype Handler struct {\nServerEnv     string\nLogger        *slog.Logger\nCancelTimeout time.Duration\n}\n\n// JSON generates json response.\nfunc (h *Handler) JSON(w http.ResponseWriter, status int, d any) {\nj, err := json.Marshal(d)\nif err != nil {\nhttp.Error(w, err.Error(), http.StatusInternalServerError)\nreturn\n}\nw.Header().Set(\"Content-Type\", \"application/json\")\nw.WriteHeader(status)\n\n_, _ = w.Write(j)\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/base.go</code></p> <pre><code>package kvstorehandler\n\nimport (\n\"log/slog\"\n\"net/http\"\n\"time\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/basehttphandler\"\n)\n\nvar _ KVStoreHTTPHandler = (*kvstoreHandler)(nil) // compile time proof\n\n// KVStoreHTTPHandler defines /store/ http handler behaviours.\ntype KVStoreHTTPHandler interface {\nSet(http.ResponseWriter, *http.Request)\nGet(http.ResponseWriter, *http.Request)\nUpdate(http.ResponseWriter, *http.Request)\nDelete(http.ResponseWriter, *http.Request)\nList(http.ResponseWriter, *http.Request)\n}\n\ntype kvstoreHandler struct {\nbasehttphandler.Handler\n\nservice kvstoreservice.KVStoreService\n}\n\n// StoreHandlerOption represents store handler option type.\ntype StoreHandlerOption func(*kvstoreHandler)\n\n// WithService sets service option.\nfunc WithService(srvc kvstoreservice.KVStoreService) StoreHandlerOption {\nreturn func(s *kvstoreHandler) {\ns.service = srvc\n}\n}\n\n// WithContextTimeout sets handler context cancel timeout.\nfunc WithContextTimeout(d time.Duration) StoreHandlerOption {\nreturn func(s *kvstoreHandler) {\ns.Handler.CancelTimeout = d\n}\n}\n\n// WithServerEnv sets handler server env.\nfunc WithServerEnv(env string) StoreHandlerOption {\nreturn func(s *kvstoreHandler) {\ns.Handler.ServerEnv = env\n}\n}\n\n// WithLogger sets handler logger.\nfunc WithLogger(l *slog.Logger) StoreHandlerOption {\nreturn func(s *kvstoreHandler) {\ns.Handler.Logger = l\n}\n}\n\n// New instantiates new kvstoreHandler instance.\nfunc New(options ...StoreHandlerOption) KVStoreHTTPHandler {\nkvsh := &amp;kvstoreHandler{\nHandler: basehttphandler.Handler{},\n}\n\nfor _, o := range options {\no(kvsh)\n}\n\nreturn kvsh\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/delete.go</code></p> <pre><code>package kvstorehandler\n\nimport (\n\"context\"\n\"errors\"\n\"net/http\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n)\n\nfunc (h *kvstoreHandler) Delete(w http.ResponseWriter, r *http.Request) {\nif r.Method != http.MethodDelete {\nh.JSON(\nw,\nhttp.StatusMethodNotAllowed,\nmap[string]string{\"error\": \"method \" + r.Method + \" not allowed\"},\n)\nreturn\n}\n\nif len(r.URL.Query()) == 0 {\nh.JSON(\nw,\nhttp.StatusNotFound,\nmap[string]string{\"error\": \"key query param required\"},\n)\nreturn\n}\n\nkeys, ok := r.URL.Query()[\"key\"]\nif !ok {\nh.JSON(\nw,\nhttp.StatusNotFound,\nmap[string]string{\"error\": \"key not present\"},\n)\nreturn\n}\n\nkey := keys[0]\n\nctx, cancel := context.WithTimeout(r.Context(), h.CancelTimeout)\ndefer cancel()\n\nif err := h.service.Delete(ctx, key); err != nil {\nif errors.Is(err, context.DeadlineExceeded) {\nh.JSON(\nw,\nhttp.StatusGatewayTimeout,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nvar kvErr *kverror.Error\n\nif errors.As(err, &amp;kvErr) {\nclientMessage := kvErr.Message\nif kvErr.Data != nil {\ndata, ok := kvErr.Data.(string)\nif ok {\nclientMessage = clientMessage + \", \" + data\n}\n}\n\nif kvErr.Loggable {\nh.Logger.Error(\"kvstorehandler Delete service.Delete\", \"err\", clientMessage)\n}\n\nif kvErr == kverror.ErrKeyNotFound {\nh.JSON(w, http.StatusNotFound, map[string]string{\"error\": clientMessage})\nreturn\n}\n}\nh.JSON(\nw,\nhttp.StatusInternalServerError,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nw.Header().Set(\"Content-Type\", \"application/json\")\nw.WriteHeader(http.StatusNoContent)\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/get.go</code></p> <pre><code>package kvstorehandler\n\nimport (\n\"context\"\n\"errors\"\n\"net/http\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n)\n\nfunc (h *kvstoreHandler) Get(w http.ResponseWriter, r *http.Request) {\nif r.Method != http.MethodGet {\nh.JSON(\nw,\n            http.StatusMethodNotAllowed,\n            map[string]string{\"error\": \"method \" + r.Method + \" not allowed\"},\n        )\nreturn\n}\n\nif len(r.URL.Query()) == 0 {\nh.JSON(\nw,\n            http.StatusNotFound,\n            map[string]string{\"error\": \"key query param required\"},\n        )\nreturn\n}\n\nkeys, ok := r.URL.Query()[\"key\"]\nif !ok {\nh.JSON(\nw,\n            http.StatusNotFound,\n            map[string]string{\"error\": \"key not present\"},\n        )\nreturn\n}\n\nkey := keys[0]\n\nctx, cancel := context.WithTimeout(r.Context(), h.CancelTimeout)\ndefer cancel()\n\nserviceResponse, err := h.service.Get(ctx, key)\nif err != nil {\nif errors.Is(err, context.DeadlineExceeded) {\nh.JSON(\nw,\n                http.StatusGatewayTimeout,\n                map[string]string{\"error\": err.Error()},\n            )\nreturn\n}\n\nvar kvErr *kverror.Error\n\n        if errors.As(err, &amp;kvErr) {\nclientMessage := kvErr.Message\n            if kvErr.Data != nil {\ndata, ok := kvErr.Data.(string)\nif ok {\nclientMessage = clientMessage + \", \" + data\n                }\n}\n\nif kvErr.Loggable {\nh.Logger.Error(\"kvstorehandler Get service.Get\", \"err\", clientMessage)\n}\n\nif kvErr == kverror.ErrKeyNotFound {\nh.JSON(w, http.StatusNotFound, map[string]string{\"error\": clientMessage})\nreturn\n}\n}\nh.JSON(\nw,\n            http.StatusInternalServerError,\n            map[string]string{\"error\": err.Error()},\n        )\nreturn\n}\n\nhandlerResponse := ItemResponse{\nKey:   serviceResponse.Key,\n        Value: serviceResponse.Value,\n    }\n\nh.JSON(\nw,\n        http.StatusOK,\n        handlerResponse,\n    )\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/list.go</code></p> <pre><code>package kvstorehandler\n\nimport (\n\"context\"\n\"errors\"\n\"net/http\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n)\n\nfunc (h *kvstoreHandler) List(w http.ResponseWriter, r *http.Request) {\nif r.Method != http.MethodGet {\nh.JSON(\nw,\nhttp.StatusMethodNotAllowed,\nmap[string]string{\"error\": \"method \" + r.Method + \" not allowed\"},\n)\nreturn\n}\n\nctx, cancel := context.WithTimeout(r.Context(), h.CancelTimeout)\ndefer cancel()\n\nserviceResponse, err := h.service.List(ctx)\nif err != nil {\nif errors.Is(err, context.DeadlineExceeded) {\nh.JSON(\nw,\nhttp.StatusGatewayTimeout,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nvar kvErr *kverror.Error\nif errors.As(err, &amp;kvErr) {\nclientMessage := kvErr.Message\nif kvErr.Data != nil {\ndata, ok := kvErr.Data.(string)\nif ok {\nclientMessage = clientMessage + \", \" + data\n}\n}\n\nif kvErr.Loggable {\nh.Logger.Error(\"kvstorehandler List service.List\", \"err\", clientMessage)\n}\n}\n\nh.JSON(\nw,\nhttp.StatusInternalServerError,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nvar handlerResponse ListResponse\nfor _, item := range *serviceResponse {\nhandlerResponse = append(handlerResponse, ItemResponse{\nKey:   item.Key,\nValue: item.Value,\n})\n}\n\nif len(handlerResponse) == 0 {\nh.JSON(\nw,\nhttp.StatusNotFound,\nmap[string]string{\"error\": \"nothing found\"},\n)\nreturn\n}\n\nh.JSON(\nw,\nhttp.StatusOK,\nhandlerResponse,\n)\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/requests.go</code></p> <pre><code>package kvstorehandler\n\n// SetRequest is an input payload for creating new k/v item.\ntype SetRequest struct {\nKey   string `json:\"key\"`\nValue any    `json:\"value\"`\n}\n\n// UpdateRequest is an input payload for updating existing k/v item.\ntype UpdateRequest struct {\nKey   string `json:\"key\"`\nValue any    `json:\"value\"`\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/responses.go</code></p> <pre><code>package kvstorehandler\n\n// ItemResponse represents k/v item.\ntype ItemResponse struct {\nKey   string `json:\"key\"`\nValue any    `json:\"value\"`\n}\n\n// ListResponse represents collection of ItemResponse.\ntype ListResponse []ItemResponse\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/set.go</code></p> <pre><code>package kvstorehandler\n\nimport (\n\"context\"\n\"encoding/json\"\n\"errors\"\n\"io\"\n\"net/http\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nfunc (h *kvstoreHandler) Set(w http.ResponseWriter, r *http.Request) {\nif r.Method != http.MethodPost {\nh.JSON(\nw,\nhttp.StatusMethodNotAllowed,\nmap[string]string{\"error\": \"method \" + r.Method + \" not allowed\"},\n)\nreturn\n}\n\nbody, err := io.ReadAll(r.Body)\nif err != nil {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nif len(body) == 0 {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": \"empty body/payload\"},\n)\nreturn\n}\n\nvar handlerRequest SetRequest\nif err = json.Unmarshal(body, &amp;handlerRequest); err != nil {\nh.JSON(\nw,\nhttp.StatusInternalServerError,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nif handlerRequest.Key == \"\" {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": \"key is empty\"},\n)\nreturn\n}\n\nif handlerRequest.Value == nil {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": \"value is empty\"},\n)\nreturn\n}\n\nctx, cancel := context.WithTimeout(r.Context(), h.CancelTimeout)\ndefer cancel()\n\nexistingItem, err := h.service.Get(ctx, handlerRequest.Key)\nif err != nil {\nif errors.Is(err, context.DeadlineExceeded) {\nh.JSON(\nw,\nhttp.StatusGatewayTimeout,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nvar kvErr *kverror.Error\nif errors.As(err, &amp;kvErr) {\nclientMessage := kvErr.Message\nif kvErr.Data != nil {\ndata, ok := kvErr.Data.(string)\nif ok {\nclientMessage = clientMessage + \", \" + data\n}\n}\n\nif kvErr.Loggable {\nh.Logger.Error(\"kvstorehandler Set service.Get\", \"err\", clientMessage)\n}\n\nif kvErr != kverror.ErrKeyNotFound {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": clientMessage},\n)\nreturn\n}\n}\n}\n\n// this should be nil. means, key does not exist\nif existingItem != nil {\nh.JSON(\nw,\nhttp.StatusConflict,\nmap[string]string{\"error\": \"can not set, '\" + handlerRequest.Key + \"' already exists\"},\n)\nreturn\n}\n\nserviceRequest := kvstoreservice.SetRequest{\nKey:   handlerRequest.Key,\nValue: handlerRequest.Value,\n}\n\nserviceResponse, err := h.service.Set(ctx, &amp;serviceRequest)\nif err != nil {\nvar kvErr *kverror.Error\n\nif errors.As(err, &amp;kvErr) {\nclientMessage := kvErr.Message\nif kvErr.Data != nil {\ndata, ok := kvErr.Data.(string)\nif ok {\nclientMessage = clientMessage + \", \" + data\n}\n}\n\nif kvErr.Loggable {\nh.Logger.Error(\"kvstorehandler Set service.Set\", \"err\", clientMessage)\n}\n\nif kvErr == kverror.ErrKeyExists {\nh.JSON(w, http.StatusConflict, map[string]string{\"error\": clientMessage})\nreturn\n}\n}\n\nh.JSON(\nw,\nhttp.StatusInternalServerError,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nhandlerResponse := ItemResponse{\nKey:   serviceResponse.Key,\nValue: serviceResponse.Value,\n}\n\nh.JSON(\nw,\nhttp.StatusCreated,\nhandlerResponse,\n)\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/update.go</code></p> <pre><code>package kvstorehandler\n\nimport (\n\"context\"\n\"encoding/json\"\n\"errors\"\n\"io\"\n\"net/http\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nfunc (h *kvstoreHandler) Update(w http.ResponseWriter, r *http.Request) {\nif r.Method != http.MethodPut {\nh.JSON(\nw,\nhttp.StatusMethodNotAllowed,\nmap[string]string{\"error\": \"method \" + r.Method + \" not allowed\"},\n)\nreturn\n}\n\nbody, err := io.ReadAll(r.Body)\nif err != nil {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nif len(body) == 0 {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": \"empty body/payload\"},\n)\nreturn\n}\n\nvar handlerRequest UpdateRequest\nif err = json.Unmarshal(body, &amp;handlerRequest); err != nil {\nh.JSON(\nw,\nhttp.StatusInternalServerError,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nif handlerRequest.Key == \"\" {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": \"key is empty\"},\n)\nreturn\n}\n\nif handlerRequest.Value == nil {\nh.JSON(\nw,\nhttp.StatusBadRequest,\nmap[string]string{\"error\": \"value is empty\"},\n)\nreturn\n}\n\nctx, cancel := context.WithTimeout(r.Context(), h.CancelTimeout)\ndefer cancel()\n\nserviceRequest := kvstoreservice.UpdateRequest{\nKey:   handlerRequest.Key,\nValue: handlerRequest.Value,\n}\n\nserviceResponse, err := h.service.Update(ctx, &amp;serviceRequest)\nif err != nil {\nif errors.Is(err, context.DeadlineExceeded) {\nh.JSON(\nw,\nhttp.StatusGatewayTimeout,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nvar kvErr *kverror.Error\n\nif errors.As(err, &amp;kvErr) {\nclientMessage := kvErr.Message\nif kvErr.Data != nil {\ndata, ok := kvErr.Data.(string)\nif ok {\nclientMessage = clientMessage + \", \" + data\n}\n}\n\nif kvErr.Loggable {\nh.Logger.Error(\"kvstorehandler Update service.Update\", \"err\", clientMessage)\n}\n\nif kvErr == kverror.ErrKeyNotFound {\nh.JSON(w, http.StatusNotFound, map[string]string{\"error\": clientMessage})\nreturn\n}\n}\n\nh.JSON(\nw,\nhttp.StatusInternalServerError,\nmap[string]string{\"error\": err.Error()},\n)\nreturn\n}\n\nhandlerResponse := ItemResponse{\nKey:   serviceResponse.Key,\nValue: serviceResponse.Value,\n}\n\nh.JSON(\nw,\nhttp.StatusOK,\nhandlerResponse,\n)\n}\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'implement http handlers'\n</code></pre>"},{"location":"18/03-development/#releaseinfo-paketi","title":"releaseinfo paketi","text":"<pre><code>$ mkdir -p src/releaseinfo\n$ touch src/releaseinfo/releaseinfo.go\n</code></pre> <p><code>src/releaseinfo/releaseinfo.go</code></p> <pre><code>package releaseinfo\n\n// Version is the current version of service.\nconst Version string = \"0.0.0\"\n\n// BuildInformation holds current build information.\nvar BuildInformation string\n</code></pre> <p>sonra;</p> <pre><code>$ git add src/releaseinfo/releaseinfo.go\n$ git commit -m 'add release information package'\n</code></pre>"},{"location":"18/03-development/#apiserver-paketi","title":"apiserver paketi","text":"<pre><code>$ mkdir -p src/apiserver\n$ touch src/apiserver/{apiserver,middlewares}.go\n\n$ tree .\n.\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 apiserver\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 apiserver.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 middlewares.go\n    \u251c\u2500\u2500 internal\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kverror.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 service\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kvstoreservice\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 requests.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 responses.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 storage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 memory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 kvstorage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 transport\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 http\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 basehttphandler\n    \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 basehttphandler.go\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 kvstorehandler\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 update.go\n    \u2514\u2500\u2500 releaseinfo\n        \u2514\u2500\u2500 releaseinfo.go\n</code></pre> <p><code>src/apiserver/apiserver.go</code></p> <pre><code>package apiserver\n\nimport (\n\"context\"\n\"encoding/json\"\n\"fmt\"\n\"log/slog\"\n\"net/http\"\n\"os\"\n\"os/signal\"\n\"syscall\"\n\"time\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/releaseinfo\"\n)\n\n// constants.\nconst (\nContextCancelTimeout = 5 * time.Second\nShutdownTimeout      = 10 * time.Second\nServerReadTimeout    = 10 * time.Second\nServerWriteTimeout   = 10 * time.Second\nServerIdleTimeout    = 60 * time.Second\n\napiV1Prefix = \"/api/v1\"\n)\n\ntype apiServer struct {\ndb        kvstorage.MemoryDB\nlogLevel  slog.Level\nlogger    *slog.Logger\nserverEnv string\n}\n\n// Option represents api server option type.\ntype Option func(*apiServer)\n\n// WithLogger sets logger option.\nfunc WithLogger(l *slog.Logger) Option {\nreturn func(s *apiServer) {\ns.logger = l\n}\n}\n\n// WithServerEnv sets serverEnv option.\nfunc WithServerEnv(env string) Option {\nreturn func(s *apiServer) {\ns.serverEnv = env\n}\n}\n\n// WithLogLevel sets logLevel option.\nfunc WithLogLevel(level string) Option {\nreturn func(s *apiServer) {\nvar logLevel slog.Level\n\nswitch level {\ncase \"DEBUG\":\nlogLevel = slog.LevelDebug\ncase \"WARN\":\nlogLevel = slog.LevelWarn\ncase \"ERROR\":\nlogLevel = slog.LevelError\ndefault:\nlogLevel = slog.LevelInfo\n}\n\ns.logLevel = logLevel\n}\n}\n\n// New instantiates new server instance.\nfunc New(options ...Option) error {\napisrvr := &amp;apiServer{\ndb:       kvstorage.MemoryDB(make(map[string]any)), // default db\nlogLevel: slog.LevelInfo,\n}\n\nfor _, o := range options {\no(apisrvr)\n}\n\n// default logging options if logger not present.\nif apisrvr.logger == nil {\nlogHandlerOpts := &amp;slog.HandlerOptions{Level: apisrvr.logLevel}\nlogHandler := slog.NewJSONHandler(os.Stdout, logHandlerOpts)\napisrvr.logger = slog.New(logHandler)\n}\nslog.SetDefault(apisrvr.logger)\n\nif apisrvr.serverEnv == \"\" {\napisrvr.serverEnv = \"production\" // default server environment\n}\n\nlogger := apisrvr.logger\n\nstorage := kvstorage.New(\nkvstorage.WithMemoryDB(apisrvr.db),\n)\nservice := kvstoreservice.New(\nkvstoreservice.WithStorage(storage),\n)\nkvStoreHandler := kvstorehandler.New(\nkvstorehandler.WithService(service),\nkvstorehandler.WithContextTimeout(ContextCancelTimeout),\nkvstorehandler.WithServerEnv(apisrvr.serverEnv),\nkvstorehandler.WithLogger(logger),\n)\n\nmux := http.NewServeMux()\n\nmux.HandleFunc(\"/healthz/live/\", func(w http.ResponseWriter, r *http.Request) {\nw.Header().Set(\"Content-Type\", \"application/json\")\nw.WriteHeader(http.StatusOK)\n\nj, _ := json.Marshal(map[string]any{\n\"server\":            apisrvr.serverEnv,\n\"version\":           releaseinfo.Version,\n\"build_information\": releaseinfo.BuildInformation,\n\"message\":           \"liveness is OK!, server is ready to accept connections\",\n})\n_, _ = w.Write(j)\n})\nmux.HandleFunc(\"/healthz/ready/\", func(w http.ResponseWriter, r *http.Request) {\nw.Header().Set(\"Content-Type\", \"application/json\")\nw.WriteHeader(http.StatusOK)\n\nj, _ := json.Marshal(map[string]any{\n\"server\":            apisrvr.serverEnv,\n\"version\":           releaseinfo.Version,\n\"build_information\": releaseinfo.BuildInformation,\n\"message\":           \"readiness is OK!, server is ready to accept connections\",\n})\n_, _ = w.Write(j)\n})\n\nmux.HandleFunc(apiV1Prefix+\"/set/\", kvStoreHandler.Set)\nmux.HandleFunc(apiV1Prefix+\"/get/\", kvStoreHandler.Get)\nmux.HandleFunc(apiV1Prefix+\"/update/\", kvStoreHandler.Update)\nmux.HandleFunc(apiV1Prefix+\"/delete/\", kvStoreHandler.Delete)\nmux.HandleFunc(apiV1Prefix+\"/list/\", kvStoreHandler.List)\n\napi := &amp;http.Server{\nAddr:         \":8000\",\nHandler:      appendSlashMiddleware(httpLoggingMiddleware(logger, mux)),\nReadTimeout:  ServerReadTimeout,\nWriteTimeout: ServerWriteTimeout,\nIdleTimeout:  ServerIdleTimeout,\n}\n\nshutdown := make(chan os.Signal, 1)\napiError := make(chan error, 1)\nsignal.Notify(shutdown, syscall.SIGINT, syscall.SIGTERM)\n\ngo func() {\nlogger.Info(\"starting api server\", \"listening\", api.Addr, \"env\", apisrvr.serverEnv)\napiError &lt;- api.ListenAndServe()\n}()\n\nselect {\ncase err := &lt;-apiError:\nreturn fmt.Errorf(\"listen and server err: %w\", err)\ncase sig := &lt;-shutdown:\nlogger.Info(\"starting shutdown\", \"pid\", sig)\ndefer logger.Info(\"shutdown completed\", \"pid\", sig)\n\nctx, cancel := context.WithTimeout(context.Background(), ShutdownTimeout)\ndefer cancel()\n\nif err := api.Shutdown(ctx); err != nil {\nif errr := api.Close(); errr != nil {\nlogger.Error(\"api close\", \"err\", errr)\n}\nreturn fmt.Errorf(\"could not stop server gracefully: %w\", err)\n}\n}\n\nreturn nil\n}\n</code></pre> <p><code>src/apiserver/middlewares.go</code></p> <pre><code>package apiserver\n\nimport (\n\"log/slog\"\n\"net/http\"\n\"strings\"\n)\n\nfunc httpLoggingMiddleware(l *slog.Logger, h http.Handler) http.Handler {\nfn := func(w http.ResponseWriter, r *http.Request) {\nh.ServeHTTP(w, r)\n\nuri := r.URL.String()\nmethod := r.Method\n\nl.Info(\"http request\", \"method\", method, \"uri\", uri)\n}\n\nreturn http.HandlerFunc(fn)\n}\n\nfunc appendSlashMiddleware(h http.Handler) http.Handler {\nfn := func(w http.ResponseWriter, r *http.Request) {\nif r.URL.Path != \"/\" &amp;&amp; !strings.HasSuffix(r.URL.Path, \"/\") {\nredirectURL := r.URL.Path + \"/\"\nif r.URL.RawQuery != \"\" {\nredirectURL += \"?\" + r.URL.RawQuery\n}\nhttp.Redirect(w, r, redirectURL, http.StatusPermanentRedirect)\nreturn\n}\nh.ServeHTTP(w, r)\n}\nreturn http.HandlerFunc(fn)\n}\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'add apiserver'\n</code></pre> <p>Art\u0131k esas sunucuyu \u00e7al\u0131\u015ft\u0131racak k\u0131sma geldik;</p> <pre><code>$ mkdir -p cmd/server\n$ touch cmd/server/main.go\n</code></pre> <p><code>cmd/server/main.go</code></p> <pre><code>package main\n\nimport (\n\"log\"\n\"os\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/apiserver\"\n)\n\nfunc main() {\nif err := apiserver.New(\napiserver.WithServerEnv(os.Getenv(\"SERVER_ENV\")),\napiserver.WithLogLevel(os.Getenv(\"LOG_LEVEL\")),\n); err != nil {\nlog.Fatal(err)\n}\n}\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'add server'\n</code></pre> <p>Evet, \u015fimdi kodumuzu linter\u2019dan ge\u00e7irelim;</p> <pre><code>$ golangci-lint version    # v1.54.1\n$ golangci-lint run\n</code></pre> <p>e\u011fer her \u015fey OK ise;</p> <pre><code>$ go run -race cmd/server/main.go\n</code></pre>"},{"location":"18/03-development/#istekleri-yapalm","title":"\u0130stekleri Yapal\u0131m","text":"<p>Evet, \u015fu an sunucumuz \u00e7al\u0131\u015f\u0131yor. \u0130ster <code>curl</code> ister <code>httpie</code> ile denemelere ba\u015flayal\u0131m:</p> <p><code>curl</code> \u00f6rnekleri:</p> <pre><code># add new key/value\n$ curl -L -s -X POST -H \"Content-Type: application/json\" -d '{\"key\": \"success\", \"value\": true}' \"http://localhost:8000/api/v1/set\" | jq\n{\n\"key\": \"success\",\n  \"value\": true\n}\n\n$ curl -L -s -X POST -H \"Content-Type: application/json\" -d '{\"key\": \"server_env\", \"value\": \"production\"}' \"http://localhost:8000/api/v1/set\" | jq\n{\n\"key\": \"server_env\",\n  \"value\": \"production\"\n}\n\n$ curl -L -s -H \"Content-Type: application/json\" \"http://localhost:8000/api/v1/list\" | jq\n[\n{\n\"key\": \"success\",\n    \"value\": true\n},\n  {\n\"key\": \"server_env\",\n    \"value\": \"production\"\n}\n]\n\n$ curl -L -s -X PUT -H \"Content-Type: application/json\" -d '{\"key\": \"success\", \"value\": false}' \"http://localhost:8000/api/v1/update\" | jq\n{\n\"key\": \"success\",\n  \"value\": false\n}\n\n$ curl -L -s -H \"Content-Type: application/json\" \"http://localhost:8000/api/v1/list\" | jq\n[\n{\n\"key\": \"success\",\n    \"value\": false\n},\n  {\n\"key\": \"server_env\",\n    \"value\": \"production\"\n}\n]\n\n$ curl -L -s -H \"Content-Type: application/json\" \"http://localhost:8000/api/v1/get?key=success\" | jq\n{\n\"key\": \"success\",\n  \"value\": false\n}\n\n$ curl -L -s -X DELETE -H \"Content-Type: application/json\" -o /dev/null -w '%{http_code}\\n' \"http://localhost:8000/api/v1/delete?key=success\"\n204\n\n$ curl -L -s -H \"Content-Type: application/json\" \"http://localhost:8000/api/v1/list\" | jq\n[\n{\n\"key\": \"server_env\",\n    \"value\": \"production\"\n}\n]\n</code></pre> <p><code>httpie</code> \u00f6rnekleri:</p> <pre><code>$ http POST \"http://localhost:8000/api/v1/set\" key=\"success\" value:=true\n$ http POST \"http://localhost:8000/api/v1/set\" key=\"server_env\" value=\"production\"\n$ http \"http://localhost:8000/api/v1/list\"\n$ http PUT \"http://localhost:8000/api/v1/update\" key=\"success\" value:=false\n$ http \"http://localhost:8000/api/v1/get?key=success\"\n$ http DELETE \"http://localhost:8000/api/v1/delete?key=success\"\n</code></pre>"},{"location":"18/03-development/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>https://github.com/avelino/awesome-go#project-layout</li> <li>https://go.dev/blog/slog</li> </ul>"},{"location":"18/04-testing/","title":"B\u00f6l\u00fcm 18/04: In-Memory Key-Value Store","text":""},{"location":"18/04-testing/#test","title":"Test","text":"<p>Go, test first bir dil. Yani testler hayati derecede \u00f6nemli. Bir projenin ne kadar iyi test coverage\u2019\u0131 olursa, o proje / k\u00fct\u00fcphane / servis o kadar sa\u011flam \u00e7al\u0131\u015f\u0131r anlam\u0131na gelir.</p> <p>Kabaca, yazd\u0131\u011f\u0131m\u0131z her sat\u0131r kod, fonksiyon, metot, yani her \u015fey test edilebilir \u015feylerdir. E\u011fer yazd\u0131\u011f\u0131n\u0131z kodu test edemiyorsan\u0131z, o zaman bir s\u0131k\u0131nt\u0131 var demektir. Bir \u015feyleri hatal\u0131 yapm\u0131\u015f ya da atlam\u0131\u015fs\u0131n\u0131zd\u0131r.</p> <p>Nelerin testlerini yapmam\u0131z iyi olur?</p> <ul> <li>Ek paket yapt\u0131k m\u0131? (<code>kverror</code>)</li> <li>Storage katman\u0131 (t\u00fcm metotlar\u0131)</li> <li>Service katman\u0131 (t\u00fcm metotlar\u0131)</li> <li>HTTP Handler katman\u0131 (t\u00fcm metotlar\u0131)</li> </ul> <p>\u0130yi bir test coverage y\u00fczdesi ~ <code>%80</code> civar\u0131ndad\u0131r. Yani yaz\u0131lan kodun en az <code>%80</code>\u2019i cover edilmi\u015fse bu i\u015f OK\u2019dir. (%80 - %20 yakla\u015f\u0131m\u0131) Coverage ne kadar y\u00fcksek olursa kendimizi o kadar g\u00fcvende hissederiz.</p> <p>\u015eimdi testlere ba\u015flayal\u0131m; \u00f6nce <code>kverror</code>:</p> <pre><code>$ touch src/internal/kverror/kverror_test.go\n</code></pre> <p><code>src/internal/kverror/kverror_test.go</code></p> <pre><code>package kverror_test\n\nimport (\n\"errors\"\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n)\n\nfunc TestError(t *testing.T) {\nerr := kverror.New(\"some error\", true)\nvar kvErr *kverror.Error\n\nif !errors.As(err, &amp;kvErr) {\nt.Errorf(\"error does not match the target type, want: %T, got: %v\", kvErr, err)\n}\n\nshouldEqual := \"some error\"\nif kvErr.Message != shouldEqual {\nt.Errorf(\"error message does not match, want: %s, got: %s\", shouldEqual, kvErr.Message)\n}\n\nshouldLoggable := true\nif kvErr.Loggable != shouldLoggable {\nt.Errorf(\"error should be loggable, want: %t, got: %t\", shouldLoggable, kvErr.Loggable)\n}\n}\n\nfunc TestWrap(t *testing.T) {\nerr := kverror.New(\"some error\", false)\nwrappedErr := err.Wrap(errors.New(\"inner\")) // nolint\n\nvar kvErr *kverror.Error\n\nif !errors.As(wrappedErr, &amp;kvErr) {\nt.Errorf(\"error does not match the target type, want: %T, got: %v\", kvErr, err)\n}\n\nif kvErr.Err == nil {\nt.Errorf(\"wrapped error can not be nil, want: %v, got: nil\", kvErr.Err)\n}\n\nshouldEqual := \"inner, some error\"\nif err.Error() != shouldEqual {\nt.Errorf(\"wrapped error does not match, want: %s, got: %s\", shouldEqual, err.Error())\n}\n}\n\nfunc TestUnwrap(t *testing.T) {\nerr := kverror.New(\"some error\", false)\nwrappedErr := err.Wrap(errors.New(\"inner\")) // nolint\n\nvar kvErr *kverror.Error\n\nif !errors.As(wrappedErr, &amp;kvErr) {\nt.Errorf(\"error does not match the target type, want: %T, got: %v\", kvErr, err)\n}\n\nshouldEqual := \"inner\"\nunwrappedErr := kvErr.Unwrap()\nif unwrappedErr.Error() != shouldEqual {\nt.Errorf(\"unwrapped error does not match, want: %s, got: %s\", shouldEqual, unwrappedErr.Error())\n}\n}\n\nfunc TestAddDataDestroyData(t *testing.T) {\nerr := kverror.New(\"some error\", false).AddData(\"hello\")\n\nvar kvErr *kverror.Error\n\nif !errors.As(err, &amp;kvErr) {\nt.Errorf(\"error does not match the target type, want: %T, got: %v\", kvErr, err)\n}\n\nif kvErr.Data == nil {\nt.Errorf(\"data should not be nil, want: %v, got: nil\", kvErr.Data)\n}\n\nshouldEqual := \"hello\"\ndata, ok := kvErr.Data.(string)\nif !ok {\nt.Error(\"data should be assertable to string\")\n}\n\nif data != shouldEqual {\nt.Errorf(\"data does not match, want: %s, got: %s\", shouldEqual, data)\n}\n\nshouldEqual = \"some error\"\nif err.Error() != shouldEqual {\nt.Errorf(\"error does not match, want: %s, got: %s\", shouldEqual, err.Error())\n}\n\nerr = err.DestoryData()\nif !errors.As(err, &amp;kvErr) {\nt.Errorf(\"error does not match the target type, want: %T, got: %v\", kvErr, err)\n}\n\nif kvErr.Data != nil {\nt.Errorf(\"data should be nil, want: nil, got: %v\", kvErr.Data)\n}\n}\n</code></pre> <p>\u015fimdi testi \u00e7al\u0131\u015ft\u0131ral\u0131m; \u00f6nce paketleri bulal\u0131m;</p> <pre><code>$ go list ./... | grep 'kverror'\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\n\n$ go test -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\n$ go test -cover -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\n:\n:\ncoverage: 100.0% of statements\n</code></pre> <p>sonra;</p> <pre><code>$ git add src/internal/kverror/kverror_test.go\n$ git commit -m 'add kverror test'\n</code></pre>"},{"location":"18/04-testing/#storage-testleri","title":"Storage Testleri","text":"<pre><code>$ touch src/internal/storage/memory/kvstorage/{delete,get,list,set,update}_test.go\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/delete_test.go</code></p> <pre><code>package kvstorage_test\n\nimport (\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n)\n\nfunc TestDeleteEmpty(t *testing.T) {\nstorage := kvstorage.New()\n\nif err := storage.Delete(\"key\"); err == nil {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestDelete(t *testing.T) {\nkey := \"key\"\nmemoryStorage := map[string]any{\nkey: \"value\",\n}\nstorage := kvstorage.New(\nkvstorage.WithMemoryDB(memoryStorage),\n)\n\nif err := storage.Delete(key); err != nil {\nt.Error(\"error occurred\")\n}\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/get_test.go</code></p> <pre><code>package kvstorage_test\n\nimport (\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n)\n\nfunc TestGetEmpty(t *testing.T) {\nstorage := kvstorage.New()\n\nif _, err := storage.Get(\"key\"); err == nil {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestGet(t *testing.T) {\nkey := \"key\"\nmemoryStorage := map[string]any{\nkey: \"value\",\n}\nstorage := kvstorage.New(\nkvstorage.WithMemoryDB(memoryStorage),\n)\n\nvalue, err := storage.Get(key)\nif err != nil {\nt.Error(\"error occurred\")\n}\n\nif value != \"value\" {\nt.Error(\"value not equal\")\n}\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/list_test.go</code></p> <pre><code>package kvstorage_test\n\nimport (\n\"reflect\"\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n)\n\nfunc TestList(t *testing.T) {\nkey := \"key\"\nmemoryStorage := kvstorage.MemoryDB(map[string]any{\nkey: \"value\",\n})\nstorage := kvstorage.New(\nkvstorage.WithMemoryDB(memoryStorage),\n)\n\nvalue := storage.List()\n\nif !reflect.DeepEqual(value, memoryStorage) {\nt.Error(\"value not equal\")\n}\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/set_test.go</code></p> <pre><code>package kvstorage_test\n\nimport (\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n)\n\nfunc TestSet(t *testing.T) {\nkey := \"key\"\nmemoryStorage := kvstorage.MemoryDB(map[string]any{})\nstorage := kvstorage.New(\nkvstorage.WithMemoryDB(memoryStorage),\n)\n\nval, err := storage.Set(key, \"value\")\nif err != nil {\nt.Errorf(\"want: value, got: %v, err: %v\", val, err)\n}\n\nif _, err := storage.Set(key, \"xxx\"); err == nil {\nt.Error(\"error not occurred\")\n}\n}\n</code></pre> <p><code>src/internal/storage/memory/kvstorage/update_test.go</code></p> <pre><code>package kvstorage_test\n\nimport (\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n)\n\nfunc TestUpdateEmpty(t *testing.T) {\nstorage := kvstorage.New()\n\nif _, err := storage.Update(\"key\", \"value\"); err == nil {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestUpdate(t *testing.T) {\nkey := \"key\"\nmemoryStorage := map[string]any{\nkey: \"value\",\n}\nstorage := kvstorage.New(\nkvstorage.WithMemoryDB(memoryStorage),\n)\n\nvalue, err := storage.Update(key, \"value2\")\nif err != nil {\nt.Error(\"error occurred\")\n}\n\nif value != \"value2\" {\nt.Error(\"value not equal\")\n}\n}\n</code></pre> <p>Durum ne?</p> <pre><code>$ tree .\n.\n\u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 apiserver\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 apiserver.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 middlewares.go\n    \u251c\u2500\u2500 internal\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kverror_test.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 service\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kvstoreservice\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 requests.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 responses.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 storage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 memory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 kvstorage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 get_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 list_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 set_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 update_test.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 transport\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 http\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 basehttphandler\n    \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 basehttphandler.go\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 kvstorehandler\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 base.go\n    \u2514\u2500\u2500 releaseinfo\n        \u2514\u2500\u2500 releaseinfo.go\n</code></pre> <p>\u015fimdi testi \u00e7al\u0131\u015ft\u0131ral\u0131m; \u00f6nce paketleri bulal\u0131m;</p> <pre><code>$ go list ./... | grep 'kvstorage'\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\n\n$ go test -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\n$ go test -cover -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\n:\n:\ncoverage: 100.0% of statements\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'add storage tests'\n</code></pre>"},{"location":"18/04-testing/#service-testleri","title":"Service Testleri","text":"<pre><code>$ touch src/internal/service/kvstoreservice/{base,delete,get,list,set,update}_test.go\n$ tree .\n.\n\u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 apiserver\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 apiserver.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 middlewares.go\n    \u251c\u2500\u2500 internal\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kverror_test.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 service\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kvstoreservice\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 base_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 get_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 list_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 requests.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 responses.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 set_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 update_test.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 storage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 memory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 kvstorage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 get_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 list_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 set_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 update_test.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 transport\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 http\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 basehttphandler\n    \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 basehttphandler.go\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 kvstorehandler\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 update.go\n    \u2514\u2500\u2500 releaseinfo\n        \u2514\u2500\u2500 releaseinfo.go\n</code></pre> <p><code>src/internal/service/kvstoreservice/base_test.go</code></p> <pre><code>package kvstoreservice_test\n\nimport (\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage\"\n)\n\nvar _ kvstorage.Storer = (*mockStorage)(nil) // compile time proof\n\ntype mockStorage struct {\ndeleteErr error\ngetErr    error\nupdateErr error\nsetErr    error\n\nmemoryDB kvstorage.MemoryDB\n}\n\nfunc (m *mockStorage) Delete(k string) error {\nif m.deleteErr == nil {\ndelete(m.memoryDB, k)\nreturn nil\n}\nreturn m.deleteErr\n}\n\nfunc (m *mockStorage) Get(k string) (any, error) {\nif m.getErr == nil {\nv, ok := m.memoryDB[k]\nif !ok {\nreturn nil, m.getErr\n}\nreturn v, nil\n}\nreturn nil, m.getErr\n}\n\nfunc (m *mockStorage) List() kvstorage.MemoryDB {\nreturn m.memoryDB\n}\n\nfunc (m *mockStorage) Set(k string, v any) (any, error) {\nif m.setErr == nil {\nif _, ok := m.memoryDB[k]; ok {\nreturn nil, m.setErr\n}\n\nm.memoryDB[k] = v\nreturn v, nil\n\n}\nreturn nil, m.setErr\n}\n\nfunc (m *mockStorage) Update(k string, v any) (any, error) {\nif m.updateErr == nil {\nif _, ok := m.memoryDB[k]; !ok {\nreturn nil, m.updateErr\n}\n\nm.memoryDB[k] = v\nreturn v, nil\n}\nreturn nil, m.updateErr\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/delete_test.go</code></p> <pre><code>package kvstoreservice_test\n\nimport (\n\"context\"\n\"errors\"\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nfunc TestDeleteWithCancel(t *testing.T) {\nmockStorage := &amp;mockStorage{}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nctx, cancel := context.WithCancel(context.Background())\ncancel()\n\nif err := kvsStoreService.Delete(ctx, \"key\"); !errors.Is(err, ctx.Err()) {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestDeleteWithStorageError(t *testing.T) {\nmockStorage := &amp;mockStorage{\ndeleteErr: kverror.ErrKeyNotFound,\n}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nerr := kvsStoreService.Delete(context.Background(), \"key\")\nif err == nil {\nt.Error(\"error not occurred\")\n}\n\nvar kvErr *kverror.Error\n\nif !errors.As(err, &amp;kvErr) {\nt.Error(\"error must be kverror.ErrKeyNotFound\")\n}\n}\n\nfunc TestDelete(t *testing.T) {\nmockStorage := &amp;mockStorage{\nmemoryDB: map[string]any{\n\"key\": \"value\",\n},\n}\n\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nif err := kvsStoreService.Delete(context.Background(), \"key\"); err != nil {\nt.Error(\"error occurred\")\n}\n\n_, ok := mockStorage.memoryDB[\"key\"]\nif ok {\nt.Error(\"delete is not working!\")\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/get_test.go</code></p> <pre><code>package kvstoreservice_test\n\nimport (\n\"context\"\n\"errors\"\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nfunc TestGetWithCancel(t *testing.T) {\nmockStorage := &amp;mockStorage{}\nkvsStoreService := kvstoreservice.New(kvstoreservice.WithStorage(mockStorage))\n\nctx, cancel := context.WithCancel(context.Background())\ncancel()\n\nif _, err := kvsStoreService.Get(ctx, \"key\"); !errors.Is(err, ctx.Err()) {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestGetWithStorageError(t *testing.T) {\nmockStorage := &amp;mockStorage{\ngetErr: kverror.ErrKeyNotFound, // get raises ErrKeyNotFound\n}\nkvsStoreService := kvstoreservice.New(kvstoreservice.WithStorage(mockStorage))\n\nres, err := kvsStoreService.Get(context.Background(), \"key\")\nif err == nil {\nt.Error(\"error not occurred\")\n}\n\nif res != nil {\nt.Errorf(\"response must be nil!\")\n}\n\nvar kvErr *kverror.Error\n\nif !errors.As(err, &amp;kvErr) {\nt.Error(\"error must be kverror.ErrKeyNotFound\")\n}\n}\n\nfunc TestGet(t *testing.T) {\nmockStorage := &amp;mockStorage{\nmemoryDB: map[string]any{\n\"key\": \"value\",\n},\n}\nkvsStoreService := kvstoreservice.New(kvstoreservice.WithStorage(mockStorage))\n\nres, err := kvsStoreService.Get(context.Background(), \"key\")\nif err != nil {\nt.Error(\"error occurred\")\n}\n\nif res == nil {\nt.Error(\"result should not be nil\")\n}\n\nif res != nil {\nval := *res\nif val.Value != \"value\" {\nt.Errorf(\"want: value, got: %s\", val.Value)\n}\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/list_test.go</code></p> <pre><code>package kvstoreservice_test\n\nimport (\n\"context\"\n\"errors\"\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nfunc TestListWithCancel(t *testing.T) {\nmockStorage := &amp;mockStorage{}\nkvsStoreService := kvstoreservice.New(kvstoreservice.WithStorage(mockStorage))\n\nctx, cancel := context.WithCancel(context.Background())\ncancel()\n\nif _, err := kvsStoreService.List(ctx); !errors.Is(err, ctx.Err()) {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestList(t *testing.T) {\nmockStorage := &amp;mockStorage{\nmemoryDB: map[string]any{\n\"key\": \"value\",\n},\n}\nkvsStoreService := kvstoreservice.New(kvstoreservice.WithStorage(mockStorage))\n\nif _, err := kvsStoreService.List(context.Background()); err != nil {\nt.Error(\"error occurred\")\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/set_test.go</code></p> <pre><code>package kvstoreservice_test\n\nimport (\n\"context\"\n\"errors\"\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nfunc TestSetWithCancel(t *testing.T) {\nmockStorage := &amp;mockStorage{}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nctx, cancel := context.WithCancel(context.Background())\ncancel()\n\nif _, err := kvsStoreService.Set(ctx, nil); !errors.Is(err, ctx.Err()) {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestSetWithStorageError(t *testing.T) {\nmockStorage := &amp;mockStorage{\nsetErr: kverror.ErrKeyExists,\n}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nserviceRequest := kvstoreservice.SetRequest{\nKey:   \"vigo\",\nValue: \"lego\",\n}\n\nres, err := kvsStoreService.Set(context.Background(), &amp;serviceRequest)\n\nif res != nil {\nt.Errorf(\"response must be nil!\")\n}\n\nvar kvErr *kverror.Error\n\nif !errors.As(err, &amp;kvErr) {\nt.Error(\"error must be kverror.ErrKeyExists\")\n}\n}\n\nfunc TestSet(t *testing.T) {\nmockStorage := &amp;mockStorage{\nmemoryDB: map[string]any{},\n}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nsetRequest := kvstoreservice.SetRequest{\nKey:   \"username\",\nValue: \"vigo\",\n}\n\nres, err := kvsStoreService.Set(context.Background(), &amp;setRequest)\nif err != nil {\nt.Errorf(\"error occurred, err: %v\", err)\n}\n\nif res == nil {\nt.Error(\"result should not be nil\")\n}\n\nif res != nil {\nval := *res\n\nif val.Value != \"vigo\" {\nt.Errorf(\"want: vigo, got: %s\", val.Value)\n}\n}\n}\n</code></pre> <p><code>src/internal/service/kvstoreservice/update_test.go</code></p> <pre><code>package kvstoreservice_test\n\nimport (\n\"context\"\n\"errors\"\n\"testing\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nfunc TestUpdateWithCancel(t *testing.T) {\nmockStorage := &amp;mockStorage{}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nctx, cancel := context.WithCancel(context.Background())\ncancel()\n\nif _, err := kvsStoreService.Update(ctx, nil); !errors.Is(err, ctx.Err()) {\nt.Error(\"error not occurred\")\n}\n}\n\nfunc TestUpdateWithStorageError(t *testing.T) {\nmockStorage := &amp;mockStorage{\nupdateErr: kverror.ErrKeyNotFound, // raises kverror.ErrKeyNotFound\n}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nupdateRequest := kvstoreservice.UpdateRequest{\nKey:   \"key\",\nValue: \"value\",\n}\n\nres, err := kvsStoreService.Update(context.Background(), &amp;updateRequest)\nif res != nil {\nt.Errorf(\"response must be nil!\")\n}\n\nvar kvErr *kverror.Error\n\nif !errors.As(err, &amp;kvErr) {\nt.Error(\"error must be kverror.ErrKeyNotFound\")\n}\n}\n\nfunc TestUpdate(t *testing.T) {\nmockStorage := &amp;mockStorage{\nmemoryDB: map[string]any{\n\"key\": \"value\",\n},\n}\nkvsStoreService := kvstoreservice.New(\nkvstoreservice.WithStorage(mockStorage),\n)\n\nupdateRequest := kvstoreservice.UpdateRequest{\nKey:   \"key\",\nValue: \"vigo\",\n}\n\nres, err := kvsStoreService.Update(context.Background(), &amp;updateRequest)\nif err != nil {\nt.Errorf(\"error occurred, err: %v\", err)\n}\n\nif res == nil {\nt.Error(\"result should not be nil\")\n}\n\nif res != nil {\nval := *res\n\nif val.Value != \"vigo\" {\nt.Errorf(\"want: vigo, got: %s\", val.Value)\n}\n}\n}\n</code></pre> <p>\u015fimdi testi \u00e7al\u0131\u015ft\u0131ral\u0131m; \u00f6nce paketleri bulal\u0131m;</p> <pre><code>$ go list ./... | grep 'kvstoreservice'\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\n\n$ go test -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\n$ go test -cover -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\n:\n:\ncoverage: 100.0% of statements\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'add service tests'\n</code></pre>"},{"location":"18/04-testing/#http-handler-testleri","title":"HTTP Handler Testleri","text":"<pre><code>$ touch src/internal/transport/http/kvstorehandler/{base,delete,get,list,set,update}_test.go\n$ tree .\n.\n\u251c\u2500\u2500 cmd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.go\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 apiserver\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 apiserver.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 middlewares.go\n    \u251c\u2500\u2500 internal\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 kverror.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kverror_test.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 service\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 kvstoreservice\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 base_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 delete_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 get_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 list_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 requests.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 responses.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 set_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 update_test.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 storage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 memory\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 kvstorage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 delete_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 get_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 list_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 set_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 update.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 update_test.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 transport\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 http\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 basehttphandler\n    \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 basehttphandler.go\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 kvstorehandler\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 base.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 base_test.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 delete.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 delete_test.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 get.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 get_test.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 list.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 list_test.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 set.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 set_test.go\n    \u2502\u00a0\u00a0             \u251c\u2500\u2500 update.go\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 update_test.go\n    \u2514\u2500\u2500 releaseinfo\n        \u2514\u2500\u2500 releaseinfo.go\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/base_test.go</code></p> <pre><code>package kvstorehandler_test\n\nimport (\n\"context\"\n\"log/slog\"\n\"os\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n)\n\nvar logger = slog.New(slog.NewJSONHandler(os.Stdout, nil))\n\ntype mockService struct {\ndeleteErr      error\ngetErr         error\ngetResponse    *kvstoreservice.ItemResponse\nlistErr        error\nlistResponse   *kvstoreservice.ListResponse\nsetErr         error\nsetResponse    *kvstoreservice.ItemResponse\nupdateErr      error\nupdateResponse *kvstoreservice.ItemResponse\n}\n\nfunc (m *mockService) Delete(_ context.Context, _ string) error {\nreturn m.deleteErr\n}\n\nfunc (m *mockService) Get(_ context.Context, _ string) (*kvstoreservice.ItemResponse, error) {\nreturn m.getResponse, m.getErr\n}\n\nfunc (m *mockService) List(_ context.Context) (*kvstoreservice.ListResponse, error) {\nreturn m.listResponse, m.listErr\n}\n\nfunc (m *mockService) Set(_ context.Context, _ *kvstoreservice.SetRequest) (*kvstoreservice.ItemResponse, error) {\nreturn m.setResponse, m.setErr\n}\n\nfunc (m *mockService) Update(_ context.Context, _ *kvstoreservice.UpdateRequest) (*kvstoreservice.ItemResponse, error) {\nreturn m.updateResponse, m.updateErr\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/delete_test.go</code></p> <pre><code>package kvstorehandler_test\n\nimport (\n\"context\"\n\"net/http\"\n\"net/http/httptest\"\n\"strings\"\n\"testing\"\n\"time\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\"\n)\n\nfunc TestDeleteInvalidMethod(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodGet, \"/key\", nil)\nw := httptest.NewRecorder()\n\nhandler.Delete(w, req)\n\nif w.Code != http.StatusMethodNotAllowed {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusMethodNotAllowed, w.Code)\n}\n\nshouldContain := \"method GET not allowed\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestDeleteQueryParamRequired(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodDelete, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.Delete(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n\nshouldContain := \"key query param required\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestDeleteQueryParamKeyNotFound(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodDelete, \"/?foo=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Delete(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n\nshouldContain := \"key not present\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestDeleteTimeout(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithContextTimeout(time.Second*-1),\nkvstorehandler.WithService(&amp;mockService{\ndeleteErr: context.DeadlineExceeded,\n}),\n)\n\nreq := httptest.NewRequest(http.MethodDelete, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Delete(w, req)\n\nif w.Code != http.StatusGatewayTimeout {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusGatewayTimeout, w.Code)\n}\n\nshouldContain := \"context deadline exceeded\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestDeleteErrUnknown(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\ndeleteErr: kverror.ErrUnknown,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\nreq := httptest.NewRequest(http.MethodDelete, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Delete(w, req)\n\nif w.Code != http.StatusInternalServerError {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusInternalServerError, w.Code)\n}\n\nshouldContain := \"unknown error\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestDeleteErrKeyNotFound(t *testing.T) {\n_ = kverror.ErrKeyNotFound.AddData(\"key=test\") // ignore error.\n\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\ndeleteErr: kverror.ErrKeyNotFound,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\nreq := httptest.NewRequest(http.MethodDelete, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Delete(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n\nif !strings.Contains(w.Body.String(), \"key not found\") {\nt.Error(\"body not equal\")\n}\n\nshouldContain := \"key=test\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n\n_ = kverror.ErrKeyNotFound.DestoryData() // ignore error.\n}\n\nfunc TestDeleteSuccess(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{}),\nkvstorehandler.WithLogger(logger),\n)\n\nreq := httptest.NewRequest(http.MethodDelete, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Delete(w, req)\n\nif w.Code != http.StatusNoContent {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNoContent, w.Code)\n}\n\nif w.Body.Len() != 0 {\nt.Errorf(\"wrong body size, want: 0, got: %d\", w.Body.Len())\n}\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/get_test.go</code></p> <pre><code>package kvstorehandler_test\n\nimport (\n\"context\"\n\"net/http\"\n\"net/http/httptest\"\n\"strings\"\n\"testing\"\n\"time\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\"\n)\n\nfunc TestGetInvalidMethod(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodDelete, \"/key\", nil)\nw := httptest.NewRecorder()\n\nhandler.Get(w, req)\n\nif w.Code != http.StatusMethodNotAllowed {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusMethodNotAllowed, w.Code)\n}\n\nshouldContain := \"method DELETE not allowed\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestGetQueryParamRequired(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodGet, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.Get(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n\nshouldContain := \"key query param required\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestGetQueryParamKeyNotFound(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodGet, \"/?foo=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Get(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n\nshouldContain := \"key not present\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestGetTimeout(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithContextTimeout(time.Second*-1),\nkvstorehandler.WithService(&amp;mockService{\ngetErr: context.DeadlineExceeded,\n}),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Get(w, req)\n\nif w.Code != http.StatusGatewayTimeout {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusGatewayTimeout, w.Code)\n}\n\nshouldContain := \"context deadline exceeded\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestGetErrUnknown(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\ngetErr: kverror.ErrUnknown,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Get(w, req)\n\nif w.Code != http.StatusInternalServerError {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusInternalServerError, w.Code)\n}\n\nshouldContain := \"unknown error\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestGetErrKeyNotFound(t *testing.T) {\n_ = kverror.ErrKeyNotFound.AddData(\"key=test\") // ignore error.\n\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\ngetErr: kverror.ErrKeyNotFound,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Get(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n\nshouldContain := \"key not found\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n\nshouldContain = \"key=test\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n\n_ = kverror.ErrKeyNotFound.DestoryData() // ignore error.\n}\n\nfunc TestGetSuccess(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{}),\nkvstorehandler.WithLogger(logger),\nkvstorehandler.WithService(&amp;mockService{\ngetResponse: &amp;kvstoreservice.ItemResponse{\nKey:   \"test\",\nValue: \"test\",\n},\n}),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/?key=test\", nil)\nw := httptest.NewRecorder()\n\nhandler.Get(w, req)\n\nif w.Code != http.StatusOK {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusOK, w.Code)\n}\n\nshouldEqual := `{\"key\":\"test\",\"value\":\"test\"}`\nif w.Body.String() != shouldEqual {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldEqual, w.Body.String())\n}\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/list_test.go</code></p> <pre><code>package kvstorehandler_test\n\nimport (\n\"context\"\n\"net/http\"\n\"net/http/httptest\"\n\"strings\"\n\"testing\"\n\"time\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\"\n)\n\nfunc TestListInvalidMethod(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodDelete, \"/key\", nil)\nw := httptest.NewRecorder()\n\nhandler.List(w, req)\n\nif w.Code != http.StatusMethodNotAllowed {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusMethodNotAllowed, w.Code)\n}\n\nshouldContain := \"method DELETE not allowed\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestListTimeout(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithContextTimeout(time.Second*-1),\nkvstorehandler.WithService(&amp;mockService{\nlistErr: context.DeadlineExceeded,\n}),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.List(w, req)\n\nif w.Code != http.StatusGatewayTimeout {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusGatewayTimeout, w.Code)\n}\n\nshouldContain := \"context deadline exceeded\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestListErrUnknown(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\nlistErr: kverror.ErrUnknown.AddData(\"fake error\"),\n}),\nkvstorehandler.WithLogger(logger),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.List(w, req)\n\nif w.Code != http.StatusInternalServerError {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusInternalServerError, w.Code)\n}\n\nshouldContain := \"unknown error\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestEmptyList(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{}),\nkvstorehandler.WithLogger(logger),\nkvstorehandler.WithService(&amp;mockService{\nlistResponse: &amp;kvstoreservice.ListResponse{},\n}),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.List(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n}\n\nfunc TestListSuccess(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{}),\nkvstorehandler.WithLogger(logger),\nkvstorehandler.WithService(&amp;mockService{\nlistResponse: &amp;kvstoreservice.ListResponse{\n{\nKey:   \"test\",\nValue: \"test\",\n},\n},\n}),\n)\n\nreq := httptest.NewRequest(http.MethodGet, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.List(w, req)\n\nif w.Code != http.StatusOK {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusOK, w.Code)\n}\n\nshouldEqual := `[{\"key\":\"test\",\"value\":\"test\"}]`\nif w.Body.String() != shouldEqual {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldEqual, w.Body.String())\n}\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/set_test.go</code></p> <pre><code>package kvstorehandler_test\n\nimport (\n\"bytes\"\n\"context\"\n\"errors\"\n\"net/http\"\n\"net/http/httptest\"\n\"strings\"\n\"testing\"\n\"time\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\"\n)\n\ntype errorReader struct{}\n\nfunc (e *errorReader) Read(_ []byte) (n int, err error) {\nreturn 0, errors.New(\"forced error\") // nolint\n}\n\nfunc TestSetInvalidMethod(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodDelete, \"/key\", nil)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusMethodNotAllowed {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusMethodNotAllowed, w.Code)\n}\n\nshouldContain := \"method DELETE not allowed\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestSetBodyReadError(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodPost, \"/key\", &amp;errorReader{})\n\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n}\n\nfunc TestSetBodyUnmarshal(t *testing.T) {\nhandler := kvstorehandler.New()\nhandlerRequest := bytes.NewBufferString(`{\"key\": \"key\", \"value\": \"123}`)\nreq := httptest.NewRequest(http.MethodPost, \"/key\", handlerRequest)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusInternalServerError {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusInternalServerError, w.Code)\n}\n}\n\nfunc TestSetEmptyBody(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodPost, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n\nshouldContain := \"empty body/payload\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestSetKeyIsEmpty(t *testing.T) {\nhandler := kvstorehandler.New()\n\npayload := strings.NewReader(\"{}\")\nreq := httptest.NewRequest(http.MethodPost, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n\nshouldContain := \"key is empty\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestSetValueIsEmpty(t *testing.T) {\nhandler := kvstorehandler.New()\n\npayload := strings.NewReader(`{\"key\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPost, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n\nshouldContain := \"value is empty\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestSetTimeout(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithContextTimeout(time.Second*-1),\nkvstorehandler.WithService(&amp;mockService{\ngetErr: context.DeadlineExceeded,\n}),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPost, \"/?key=test\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusGatewayTimeout {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusGatewayTimeout, w.Code)\n}\n\nshouldContain := \"context deadline exceeded\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestSetErrUnknown(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\nsetErr: kverror.ErrUnknown,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPost, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusInternalServerError {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusInternalServerError, w.Code)\n}\n\nshouldContain := \"unknown error\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestSetServiceUnknownError(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\ngetErr: kverror.ErrUnknown.AddData(\"fake error\"),\n}),\nkvstorehandler.WithLogger(logger),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPost, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n}\n\nfunc TestSetServiceNilExistingItem(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{}),\nkvstorehandler.WithLogger(logger),\nkvstorehandler.WithService(&amp;mockService{\ngetResponse: &amp;kvstoreservice.ItemResponse{\nKey:   \"test\",\nValue: \"test\",\n},\n}),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPost, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusConflict {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusConflict, w.Code)\n}\n}\n\nfunc TestSetErrKeyExists(t *testing.T) {\n_ = kverror.ErrKeyExists.AddData(\"key=test\") // ignore error.\n\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\nsetErr: kverror.ErrKeyExists,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPost, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusConflict {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusConflict, w.Code)\n}\n\nshouldContain := \"key exist\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n\nshouldContain = \"key=test\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n\n_ = kverror.ErrKeyExists.DestoryData() // ignore error.\n}\n\nfunc TestSetSuccess(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{}),\nkvstorehandler.WithLogger(logger),\nkvstorehandler.WithService(&amp;mockService{\nsetResponse: &amp;kvstoreservice.ItemResponse{\nKey:   \"test\",\nValue: \"test\",\n},\n}),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPost, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Set(w, req)\n\nif w.Code != http.StatusCreated {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusCreated, w.Code)\n}\n\nshouldEqual := `{\"key\":\"test\",\"value\":\"test\"}`\nif w.Body.String() != shouldEqual {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldEqual, w.Body.String())\n}\n}\n</code></pre> <p><code>src/internal/transport/http/kvstorehandler/update_test.go</code></p> <pre><code>package kvstorehandler_test\n\nimport (\n\"bytes\"\n\"context\"\n\"net/http\"\n\"net/http/httptest\"\n\"strings\"\n\"testing\"\n\"time\"\n\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice\"\n\"github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\"\n)\n\nfunc TestUpdateInvalidMethod(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodDelete, \"/key\", nil)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusMethodNotAllowed {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusMethodNotAllowed, w.Code)\n}\n\nshouldContain := \"method DELETE not allowed\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestUpdateBodyReadError(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodPut, \"/\", &amp;errorReader{})\n\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n}\n\nfunc TestUpdateEmptyBody(t *testing.T) {\nhandler := kvstorehandler.New()\nreq := httptest.NewRequest(http.MethodPut, \"/\", nil)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n\nshouldContain := \"empty body/payload\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestUpdateBodyUnmarshal(t *testing.T) {\nhandler := kvstorehandler.New()\nhandlerRequest := bytes.NewBufferString(`{\"key\": \"key\", \"value\": \"123}`)\nreq := httptest.NewRequest(http.MethodPut, \"/\", handlerRequest)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusInternalServerError {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusInternalServerError, w.Code)\n}\n}\n\nfunc TestUpdateKeyIsEmpty(t *testing.T) {\nhandler := kvstorehandler.New()\n\npayload := strings.NewReader(\"{}\")\nreq := httptest.NewRequest(http.MethodPut, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n\nshouldContain := \"key is empty\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestUpdateValueIsEmpty(t *testing.T) {\nhandler := kvstorehandler.New()\n\npayload := strings.NewReader(`{\"key\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPut, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusBadRequest {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusBadRequest, w.Code)\n}\n\nshouldContain := \"value is empty\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestUpdateTimeout(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithContextTimeout(time.Second*-1),\nkvstorehandler.WithService(&amp;mockService{\nupdateErr: context.DeadlineExceeded,\n}),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPut, \"/?key=test\", payload)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusGatewayTimeout {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusGatewayTimeout, w.Code)\n}\n\nshouldContain := \"context deadline exceeded\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestUpdateErrUnknown(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\nupdateErr: kverror.ErrUnknown,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPut, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusInternalServerError {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusInternalServerError, w.Code)\n}\n\nshouldContain := \"unknown error\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n}\n\nfunc TestUpdateErrKeyExists(t *testing.T) {\n_ = kverror.ErrKeyNotFound.AddData(\"key=test\") // ignore return no need\n\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{\nupdateErr: kverror.ErrKeyNotFound,\n}),\nkvstorehandler.WithLogger(logger),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPut, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusNotFound {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusNotFound, w.Code)\n}\n\nshouldContain := \"key not found\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n\nshouldContain = \"key=test\"\nif !strings.Contains(w.Body.String(), shouldContain) {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldContain, w.Body.String())\n}\n\n_ = kverror.ErrKeyNotFound.DestoryData() // ignore error\n}\n\nfunc TestUpdateSuccess(t *testing.T) {\nhandler := kvstorehandler.New(\nkvstorehandler.WithService(&amp;mockService{}),\nkvstorehandler.WithLogger(logger),\nkvstorehandler.WithService(&amp;mockService{\nupdateResponse: &amp;kvstoreservice.ItemResponse{\nKey:   \"test\",\nValue: \"test\",\n},\n}),\n)\n\npayload := strings.NewReader(`{\"key\":\"test\",\"value\":\"test\"}`)\nreq := httptest.NewRequest(http.MethodPut, \"/\", payload)\nw := httptest.NewRecorder()\n\nhandler.Update(w, req)\n\nif w.Code != http.StatusOK {\nt.Errorf(\"wrong status code, want: %d, got: %d\", http.StatusOK, w.Code)\n}\n\nshouldEqual := `{\"key\":\"test\",\"value\":\"test\"}`\nif w.Body.String() != shouldEqual {\nt.Errorf(\"wrong body message, want: %s, got: %s\", shouldEqual, w.Body.String())\n}\n}\n</code></pre> <p>\u015fimdi testi \u00e7al\u0131\u015ft\u0131ral\u0131m; \u00f6nce paketleri bulal\u0131m;</p> <pre><code>$ go list ./... | grep 'kvstorehandler'\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\n\n$ go test -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\n$ go test -cover -race -v github.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler\n:\n:\ncoverage: 99.1% of statements\n</code></pre> <p>evet, testler bitti, t\u00fcm test coverage ne durumda?</p> <pre><code>$ go test -coverpkg=./... -coverprofile=coverage.out ./...\n$ go tool cover -func=coverage.out\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror/kverror.go:33:                AddData         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror/kverror.go:39:                Unwrap          100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror/kverror.go:44:                DestoryData     100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror/kverror.go:50:                Wrap            100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror/kverror.go:55:                Error           100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/kverror/kverror.go:63:                New         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice/base.go:28:            WithStorage     100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice/base.go:35:            New         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice/delete.go:8:           Delete          100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice/get.go:8:          Get         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice/list.go:7:         List            100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice/set.go:8:          Set         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/service/kvstoreservice/update.go:8:           Update          100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage/base.go:30:          WithMemoryDB        100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage/base.go:37:          New         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage/delete.go:3:         Delete          100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage/get.go:9:            Get         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage/list.go:3:           List            100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage/set.go:9:            Set         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/storage/memory/kvstorage/update.go:3:         Update          100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/basehttphandler/basehttphandler.go:18: JSON            71.4%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/base.go:33:     WithService     100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/base.go:40:     WithContextTimeout  100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/base.go:47:     WithServerEnv       0.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/base.go:54:     WithLogger      100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/base.go:61:     New         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/delete.go:11:       Delete          100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/get.go:11:      Get         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/list.go:11:     List            100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/set.go:14:      Set         100.0%\ngithub.com/&lt;GITHUB-KULLANICI-ADINIZ&gt;/kvstore/src/internal/transport/http/kvstorehandler/update.go:14:       Update          100.0%\ntotal:                                              (statements)        98.7%\n</code></pre> <p>yani t\u00fcm projenin toplam test coverage\u2019\u0131 98.7%. Sonra;</p> <pre><code>$ git add .\n$ git commit -m 'add http handler tests'\n</code></pre>"},{"location":"18/05-docker/","title":"B\u00f6l\u00fcm 18/05: In-Memory Key-Value Store","text":""},{"location":"18/05-docker/#docker","title":"Docker","text":"<p>\u015eimdi bu go servisimizi <code>docker</code> ile bir container i\u00e7inden \u00e7al\u0131\u015ft\u0131ral\u0131m. \u00d6ncelikle <code>Dockerfile</code> olu\u015ftural\u0131m:</p> <pre><code>$ touch Dockerfile\n</code></pre> <p>sonra;</p> <pre><code># build application\nFROM golang:1.21.0-alpine AS builder\n\nENV GOPRIVATE=github.com/vbyazilim\n\nARG GITHUB_ACCESS_TOKEN\nARG BUILD_INFORMATION\n\n# hadolint ignore=DL3018\nRUN apk add --update --no-cache git \\\n&amp;&amp; git config --global url.https://${GITHUB_ACCESS_TOKEN}@github.com/.insteadOf https://github.com/\n\nWORKDIR /build\nCOPY ./go.mod /build/\n\n# COPY ./go.mod ./go.sum /build/\n# RUN go mod download\n\nCOPY . /build\nRUN GOOS=linux CGO_ENABLED=0 GOARCH=amd64 go build -ldflags=\"-X 'github.com/vbyazilim/kvstore/src/releaseinfo.BuildInformation=${BUILD_INFORMATION}'\" -o app ./cmd/server\n\n# get certificates\nFROM alpine:3.18.3 AS certs\n\n# hadolint ignore=DL3018\nRUN apk add --update --no-cache ca-certificates\n\nFROM busybox:1.36\nCOPY --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=builder /build/app /kvstoreapp\n\nEXPOSE 8000\nCMD [\"/kvstoreapp\"]\n</code></pre> <p>Hemen deneyelim oldu mu?</p> <pre><code>$ export BUILD_INFO=\"$(git rev-parse HEAD)-$(go env GOOS)-$(go env GOARCH)\"\n$ echo $BUILD_INFO\n$ docker build --build-arg=\"BUILD_INFORMATION=${BUILD_INFO}\" -t kvstore:latest .\n</code></pre> <p>\u015fimdi \u00e7al\u0131\u015ft\u0131ral\u0131m;</p> <pre><code>$ SERVER_ENV=\"production\" LOG_LEVEL=\"ERROR\" docker run --cpus=\"2\" --env SERVER_ENV --env LOG_LEVEL -p 9000:8000 kvstore:latest\n</code></pre> <p>\u015eimdi service <code>:9000</code>\u2019den eri\u015felim?</p> <pre><code>$ http POST \"http://localhost:9000/api/v1/set\" key=\"success\" value:=true\n$ http POST \"http://localhost:9000/api/v1/set\" key=\"server_env\" value=\"production\"\n$ http \"http://localhost:9000/api/v1/list\"\n$ http PUT \"http://localhost:9000/api/v1/update\" key=\"success\" value:=false\n$ http \"http://localhost:9000/api/v1/get?key=success\"\n$ http DELETE \"http://localhost:9000/api/v1/delete?key=success\"\n</code></pre> <p>Tamamsa;</p> <pre><code>$ git add Dockerfile\n$ git commit -m 'add Dockerfile'\n</code></pre>"},{"location":"18/06-github-actions/","title":"B\u00f6l\u00fcm 18/06: In-Memory Key-Value Store","text":""},{"location":"18/06-github-actions/#github-actions","title":"GitHub Actions","text":"<p>GitHub\u2019a <code>push</code> yapt\u0131\u011f\u0131m\u0131zda ya da <code>pull request</code>\u2019leri <code>merge</code> etti\u011fimizde, bir k\u0131s\u0131m kontrollerin yap\u0131lmas\u0131n\u0131 istiyoruz. Otomatik olarak testler \u00e7al\u0131\u015fs\u0131n, linter kodu kontrol etsin:</p> <pre><code>$ mkdir -p .github/workflows\n$ touch .github/workflows/go-{lint,test}.yml\n</code></pre> <p><code>.github/workflows/go-lint.yml</code></p> <pre><code>name: Golang CI Lint\n\non:\npull_request:\n\nconcurrency:\ngroup: golangci-lint\ncancel-in-progress: true\n\njobs:\ngolangci:\nname: golangci linter\nruns-on: ubuntu-latest\nenv:\nGOPRIVATE: github.com/vbyazilim\nsteps:\n- uses: actions/checkout@v3\n- uses: actions/setup-go@v4\nwith:\ngo-version: '1.21'\ncache: false\n- name: golangci-lint\nuses: golangci/golangci-lint-action@v3\nwith:\nversion: v1.54\nargs: --timeout=5m\n</code></pre> <p><code>.github/workflows/go-test.yml</code></p> <pre><code>name: Golang Tests\n\non:\npull_request:\npush:\nbranches:\n- main\ntags-ignore:\n- '**'\n\nconcurrency:\ngroup: golang-test\ncancel-in-progress: true\n\njobs:\ntest:\nname: Run tests\nruns-on: ubuntu-latest\nenv:\nGOPRIVATE: github.com/vbyazilim\nsteps:\n- name: Checkout code\nuses: actions/checkout@v3\n\n- name: Setup Go\nuses: actions/setup-go@v4\nwith:\ngo-version-file: \"go.mod\"\nid: go\n\n- run: git config --global url.https://${{ github.token }}@github.com/.insteadOf https://github.com/\n\n- name: Run tests\nrun: LOG_LEVEL=\"error\" go test -p 1 -v -race -failfast -coverprofile=coverage.txt -covermode=atomic ./...\n\n- name: Upload coverage to Codecov\nuses: codecov/codecov-action@v3\nwith:\ntoken: ${{ secrets.CODECOV_TOKEN }}\n</code></pre> <p>sonra;</p> <pre><code>$ git add .\n$ git commit -m 'add github action workflows'\n</code></pre> <p>Action\u2019lar\u0131 \u00e7al\u0131\u015ft\u0131rmak i\u00e7in kodu GitHub\u2019a push etmemiz laz\u0131m.</p>"},{"location":"18/07-acik-kaynak/","title":"B\u00f6l\u00fcm 18/07: In-Memory Key-Value Store","text":""},{"location":"18/07-acik-kaynak/#ack-kaynak-haline-getirmek","title":"A\u00e7\u0131k Kaynak Haline Getirmek","text":"<p>Art\u0131k elimizde \u00e7al\u0131\u015fan k\u00fc\u00e7\u00fck bir servis var. Bu servisi GitHub\u2019ta payla\u015fmak i\u00e7in neler eksik kald\u0131?</p> <ul> <li><code>README.md</code></li> <li><code>LICENSE</code></li> <li><code>CODE_OF_CONDUCT</code></li> </ul> <p>dosyalar\u0131 :)</p>"},{"location":"bonus/01-links/","title":"Faydal\u0131 Linkler","text":"<p>Go ile ilgili kaynak kodlar, e\u011fitimler, makaler:</p> <ol> <li>https://github.com/avelino/awesome-go</li> <li>https://github.com/halfrost/LeetCode-Go</li> <li>https://github.com/shubhamgrg04/awesome-diagramming</li> <li>https://github.com/luk4z7/go-concurrency-guide</li> <li>https://github.com/ThreeDotsLabs/wild-workouts-go-ddd-example</li> <li>https://github.com/zillow/howwegoatzillow *</li> <li>https://www.youtube.com/watch?v=9Q1RMueVHAg (how we go at zillow) *</li> <li>https://github.com/dgryski/awesome-go-style</li> <li>https://github.com/uber-go/guide/blob/master/style.md</li> <li>http://golang50shad.es/ *</li> <li>https://www.linkedin.com/learning/applied-concurrency-in-go/ **</li> <li>https://www.linkedin.com/learning/go-performance-optimization/ **</li> <li>https://www.linkedin.com/learning/generics-in-go/ **</li> <li>https://www.linkedin.com/learning/grpc-in-go/ **</li> <li>https://www.udemy.com/course/concurrency-in-go-golang/ **</li> <li>https://www.youtube.com/@GopherAcademy/playlists</li> <li>https://arslan.io/2022/12/04/functional-table-driven-tests-in-go/</li> <li>https://arslan.io/2020/07/07/using-go-analysis-to-fix-your-source-code/</li> <li>https://arslan.io/2019/08/02/why-you-should-use-a-go-module-proxy/</li> <li>https://arslan.io/2019/07/03/how-to-write-idempotent-bash-scripts/</li> <li>https://arslan.io/2017/09/14/the-ultimate-guide-to-writing-a-go-tool/</li> <li>https://rakyll.org/typesystem/</li> <li>https://rakyll.org/http2push/</li> <li>https://rakyll.org/leakingctx/</li> </ol> <ul> <li><code>*</code>: \u00d6nemli</li> <li><code>**</code>: \u00dccretli</li> </ul>"},{"location":"quiz/01-go-cash-register/","title":"Go Cash Register Assignment","text":""},{"location":"quiz/01-go-cash-register/#amac","title":"Ama\u00e7","text":"<p>Go dilinde basit bir kasa kay\u0131t program\u0131 olu\u015fturun. Bu program, bir liste i\u00e7indeki \u00fcr\u00fcnleri i\u015fleyebilmeli ve olas\u0131 indirimleri uygulayarak toplam tutar\u0131 hesaplayabilmelidir.</p>"},{"location":"quiz/01-go-cash-register/#gereklilikler","title":"Gereklilikler","text":""},{"location":"quiz/01-go-cash-register/#tipler-ve-degiskenler","title":"Tipler ve De\u011fi\u015fkenler","text":"<p>Item ad\u0131nda bir yap\u0131 (struct) tan\u0131mlay\u0131n. Bu yap\u0131da Name (\u0130sim), Price (Fiyat) ve Discount (\u0130ndirim) alanlar\u0131 olsun. \u0130\u015flenecek \u00fcr\u00fcnleri tutmak i\u00e7in Item t\u00fcr\u00fcnden bir slice olu\u015fturun.</p>"},{"location":"quiz/01-go-cash-register/#fonksiyonlar","title":"Fonksiyonlar","text":"<p>calculatePrice(item Item) float64: Bu fonksiyon, bir \u00fcr\u00fcn\u00fc parametre olarak al\u0131r ve indirim uyguland\u0131ktan sonra fiyat\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr.</p> <p>totalPrice(items []Item) float64: Bu fonksiyon, kesitteki t\u00fcm \u00fcr\u00fcnlerin toplam fiyat\u0131n\u0131 hesaplayarak d\u00f6nd\u00fcr\u00fcr.</p>"},{"location":"quiz/01-go-cash-register/#donguler-ve-kosullu-ifadeler","title":"D\u00f6ng\u00fcler ve Ko\u015fullu \u0130fadeler","text":"<p>calculatePrice fonksiyonunda, bir \u00fcr\u00fcn\u00fcn indirimli olup olmad\u0131\u011f\u0131n\u0131 kontrol etmek i\u00e7in bir if ifadesi kullan\u0131n ve varsa indirimi uygulay\u0131n.</p> <p>totalPrice fonksiyonunda, bir d\u00f6ng\u00fc kullanarak kesit i\u00e7indeki \u00fcr\u00fcnleri dola\u015f\u0131n ve fiyatlar\u0131 toplay\u0131n.</p>"},{"location":"quiz/01-go-cash-register/#arayuzler","title":"Aray\u00fczler","text":"<p>Describable ad\u0131nda bir interface tan\u0131mlay\u0131n ve i\u00e7inde Description() string ad\u0131nda bir method olsun. Item yap\u0131s\u0131 i\u00e7in Description fonksiyonunu receiver olarak ekleyin; bu y\u00f6ntem, \"Ad - Fiyat (E\u011fer indirim varsa indirimli fiyat)\" format\u0131nda bir metin d\u00f6nd\u00fcrmelidir.</p>"},{"location":"quiz/01-go-cash-register/#ornek-ckt","title":"\u00d6rnek \u00c7\u0131kt\u0131","text":"<pre><code>Elma - 0.75 TL (10% indirimle 0.68 TL)\nPortakal - 1.00 TL\nToplam Fiyat: 1.68 TL\n</code></pre>"}]}